.spacing 1
.paper size 58,70
.comment paper size 68,75 for 85% reduction
.left margin 5
.right margin 70
.comment right margin 75 for 85% reduction
.nhy
.no number
^^
.comment Indexing is used in a funny way in this document...
.comment
.comment All command characters and other special characters are indexed
.comment as follows:
.comment        .index ^^Innnx#ddd
.comment where:
.comment  I signals the indexing of a command or other special character
.comment  nnn is the character's ASCII code in octal with leading zeroes
.comment  x is used for characters with multiple meanings (see below)
.comment  ddd is the indexed description
.comment The "x" is normally a literal blank (#).  For characters with
.comment many meanings (e.g., ^E), the "x" is used to create multiple
.comment index entries.  For example:
.comment        .index ^^I005A#_^EA    is match any alphabetic
.comment        .index ^^I005X#_^EX    is match anything
.comment        etc.
.comment
.comment All command index entries should pad out the command with blanks
.comment to 7 characters, so that the text descriptions in the index line up.
.comment
.comment All Chapters and their sections are indexed as follows:
.comment        .index ^^Oxyyz#ddd
.comment where:
.comment  O signals the indexing of a Chapter or its section
.comment  x is the Chapter number (1, 2, 3, etc.)
.comment  yy is the Chapter's section number in decimal with leading zeroes
.comment  z is the section's sub-section in decimal
.comment  ddd is the indexed Chapter or section name
.comment
.comment As examples:
.comment        .index ^^O010##INTRODUCTION
.comment        .index ^^O050##PREFACE TO THE MAY 1985 EDITION
.comment
.comment        .index ^^O3####CHAPTER 3        CONVENTIONS AND STRUCTURES
.comment        .index ^^O303##        3.3      DATA STRUCTURES
.comment        .index ^^O3032#        3.3.2       Q-registers
.comment
.comment All other random, but important references (like the manual's
.comment version number) are indexed as follows:
.comment        .index ^^Ref###ddd
.comment where:
.comment  Ref signals a random reference
.comment  ddd is the thing referenced
.title #####Standard TECO
#####
.break
.blank 15
.center
Standard TECO
.skip 2
.center
TEXT EDITOR AND CORRECTOR FOR THE
.center
VAX-11, PDP-11, PDP-10, and PDP-8
.skip 2
.center
USER'S GUIDE AND LANGUAGE REFERENCE MANUAL
.skip 2
.center
May 1985 Edition
.skip 2
.index ^^Ref###TECO-11 Version 40
.center
TECO-11 VERSION##40
.index ^^Ref###TECO-10 Version 3
.center
TECO-10 VERSION###3
.index ^^Ref###TECO-8 Version 7
.center
TECO-8##VERSION###7
.blank 20
May, 1985
.page
The information in this document is subject to change without notice
and should not be construed as a commitment by Digital Equipment
Corporation or by DECUS.
.blank 1
Neither Digital Equipment Corporation, DECUS, nor the authors
assume any responsibility for the use or reliability
of this document or the described software.
.blank 3
.center
Copyright (C) 1979, 1985 TECO SIG
.skip
.lm +10
.rm -10
General permission to copy or modify, but not for profit, is
hereby granted, provided that the above copyright notice is included
and reference made to the fact that reproduction privileges were
granted by the TECO SIG.
.lm -10
.rm +10

.display number rl
.comment The above will fail with RNO
.number page 1
.page
.nofill
.center
CONTENTS
.skip 3
.lm14
.ts23,26,65
.skip 1
.indent -8
INTRODUCTION			???
.break
.skip 1
.indent -8
PREFACE TO THE MAY 1985 EDITION	???
.break
.skip 1
.indent -8
CHAPTER 1	BASICS OF TECO	???
.break
.skip 1
1.1	USING TECO	???
1.2	DATA STRUCTURE FUNDAMENTALS	???
1.3	FILE SELECTION COMMANDS	???
1.3.1		Simplified File Selection	???
1.3.2		Input File Specification (ER command)	???
1.3.3		Output File Specification (EW command)	???
1.3.4		Closing Files (EX command)	???
1.4	INPUT AND OUTPUT COMMANDS	???
1.5	POINTER POSITIONING COMMANDS	???
1.6	TYPE OUT COMMANDS	???
1.6.1		Immediate Inspection Commands	???
1.7	TEXT MODIFICATION COMMANDS	???
1.8	SEARCH COMMANDS	???
1.9	SAMPLE EDITING JOB	???
.skip 1
.indent -8
INTERLUDE			???
.break
.skip 1
.indent -8
CHAPTER 2	INVOKING TECO	???
.break
.skip 1
2.1	RUNNING TECO	???
2.2	CREATING A NEW FILE	???
2.3	EDITING AN EXISTING FILE	???
2.4	SWITCHES ON TECO AND MAKE COMMANDS	???
2.5	INVOKING A TECO PROGRAM	???
2.6	USER INITIALIZATION	???
.skip 1
.indent -8
CHAPTER 3	CONVENTIONS AND STRUCTURES	???
.break
.skip 1
3.1	TECO CHARACTER SET	???
3.2	TECO COMMAND FORMAT	???
3.2.1		Numeric Arguments	???
3.2.2		Text Arguments	???
3.2.3		Colon Modifiers	???
3.3	DATA STRUCTURES	???
3.3.1		Text Buffer	???
3.3.2		Q-registers	???
3.3.3		Q-register Push-down List	???
3.3.4		Numeric Values and Flags	???
.page
.break
.skip 1
.indent -8
CHAPTER 4	COMMAND STRING EDITING	???
.skip 1
4.1		Immediate Action Editing Characters	???
4.2		Immediate Action Commands	???
4.3		Introduction to Macros	???
4.4		Immediate ESCAPE-Sequence Commands	???
4.5		Operating System Character Filters	???
.skip 1
.indent -8
CHAPTER 5	COMMAND DESCRIPTIONS	???
.break
.skip 1
5.1	FILE SPECIFICATION COMMANDS	???
5.1.1		File Opening Commands	???
5.1.2		File Specification Switches	???
5.1.3		File Close and Exit Commands	???
5.1.4		Secondary Stream Commands	???
5.1.5		Wildcard Commands	???
5.1.6		Direct I/O to Q-Registers	???
5.2	PAGE MANIPULATION COMMANDS	???
5.3	BUFFER POINTER MANIPULATION COMMANDS	???
5.4	TEXT TYPE OUT COMMANDS	???
5.5	DELETION COMMANDS	???
5.6	INSERTION COMMANDS	???
5.7	SEARCH COMMANDS	???
5.8	SEARCH ARGUMENTS	???
5.9	Q-REGISTER MANIPULATION	???
5.10	ARITHMETIC AND EXPRESSIONS	???
5.11	SPECIAL NUMERIC VALUES	???
5.12	COMMAND LOOPS	???
5.13	BRANCHING COMMANDS	???
5.14	CONDITIONAL EXECUTION COMMANDS	???
5.15	RETRIEVING ENVIRONMENT CHARACTERISTICS	???
5.16	MODE CONTROL FLAGS	???
5.17	SCOPE COMMANDS	???
5.17.1		Video Terminal Scope Commands	???
5.17.2		Refresh Scope Commands	???
5.18	PROGRAMMING AIDS	???
5.18.1		Text Formatting	???
5.18.2		Comments	???
5.18.3		Messages	???
5.18.4		Tracing	???
5.18.5		Convenience Characters	???
5.18.6		Memory Expansion	???
5.18.7		Case Control	???
5.19	MANIPULATING LARGE PAGES	???
5.20	TECHNIQUES AND EXAMPLES	???
.page
.skip 1
.indent -8
APPENDIX A	ASCII CHARACTER SET	???
.skip 1
.indent -8
APPENDIX B	ERROR MESSAGES	???
.skip 1
.indent -8
APPENDIX C	INCOMPATIBLE, OBSOLETE, AND SYSTEM-SPECIFIC
	COMMANDS	???
.break
.skip 1
C.1	SPECIFIC FEATURES OF TECO-11	???
C.1.1		TECO Commands	???
C.1.2		String Build Constructs	???
C.2	SPECIFIC FEATURES OF RT-11	???
C.3	SPECIFIC FEATURES OF RSTS/E	???
C.4	SPECIFIC FEATURES OF RSX-11/M, RSX-11/D,
	and IAS	???
C.5	SPECIFIC FEATURES OF VAX/VMS	???
C.6	SPECIFIC FEATURES OF OS/8	???
C.7	SPECIFIC FEATURES OF TOPS-10	???
.skip 1
.indent -8
APPENDIX D	RT-11 OPERATING CHARACTERISTICS	???
.skip 1
.indent -8
APPENDIX E	RSTS/E OPERATING CHARACTERISTICS	???
.skip 1
.indent -8
APPENDIX F	RSX-11 OPERATING CHARACTERISTICS	???
.skip 1
.indent -8
APPENDIX G	VAX/VMS OPERATING CHARACTERISTICS	???
.skip 1
.indent -8
APPENDIX H	OS/8 OPERATING CHARACTERISTICS	???
.skip 1
.indent -8
APPENDIX I	TOPS-10 OPERATING CHARACTERISTICS	???
.skip 1
.indent -8
APPENDIX J	BASIC-PLUS/BASIC-PLUS-2 HANDLING	???
.skip 1
.indent -8
GLOSSARY			???
.skip 1
.indent -8
INDEX			???
.break
.fill
.lm5

.display number d
.comment The above will fail with RNO
.number page 1

.page
.subtitle #####Introduction
.index ^^O010##INTRODUCTION
.center
INTRODUCTION
.skip 1
TECO is a powerful text editing language
available under most DIGITAL operating systems.
TECO may be used to edit any form of ASCII text:
program sources, command procedures, or manuscripts, for example.
TECO is a character-oriented editor, and also
offers a number of facilities for dealing with lines of text.
.skip 1
You can use TECO interactively, issuing commands which are
to be executed as soon as they are typed in.
(TECO is an interpreter.)
In this mode, TECO can be used for tasks ranging
from very simple to quite complex.
.skip
You can write sequences of commands called macros,
which can be stored and then invoked by short commands
or even single keystrokes.
You can write sequences of commands to be run as TECO programs,
and store them on disk for execution at convenience.
.skip
TECO can be used as an implementation language,
as it provides powerful primitive functions for
text processing, screen handling, and keyboard management.
(The VTEDIT program included with some TECO
distributions is an example of a full keypad editor
developed in the TECO language.)
.skip
TECO correctly handles most sequential ASCII formats supported
by the operating systems upon which it runs.
It provides flexible pattern-matching constructs for text searching,
file wildcarding, and special support for editing
BASIC-PLUS/BASIC-PLUS-2 source programs.
A split screen scrolling feature allows command dialogue to
share the screen with an automatically-updated window into
the editing buffer.
.skip 1
TECO's syntax is terse;  commands are designed to minimize keystrokes.
Also, the versatility of TECO "in all its glory" makes it complex.
However, just a few commands suffice to get real work done,
and a novice TECO user can begin creating and editing text files
after only a few hours of instruction.
More powerful features can be learned one at a time, and at leisure.
.skip
This manual presents TECO in two stages.
The first part (Chapter 1) contains basic information
and introduces that set of "just a few" commands.
.skip 1
Subsequent chapters describe the full TECO command set,
including a review of the those commands presented in Chapter 1.
These chapters also introduce the concept of TECO as a
programming language and explain how basic editing
commands may be combined into "programs"
sophisticated enough to handle the most complicated
editing tasks.
.skip 1
The early sections of this manual include few specific examples of commands,
since all TECO commands have a consistent,
logical format which will quickly become apparent to the beginning user.
There is, however, an extensive example at the end of Chapter 1
which employs most of the commands introduced up to that point.
Students of TECO should experiment with each command as it is introduced,
and then duplicate the examples on their computer.
.skip 1
(If a video terminal which supports split-screen scrolling
such as a member of the VT100 or VT200 families
is available and the TECO being used supports it,
seeing both your commands and their effects in the text buffer
simultaneously can make learning easier.
A command such as "5,7:W" allows 5 lines for command dialogue,
while "watching" the text buffer on the remainder of the screen.
The 7:W command is described in Table 5-17B.)
.skip 1
This manual is intended to be a reference manual,
and except for Chapter 1 is not a tutorial.
After Chapter 1, it is assumed that the reader has a general familiarity
with TECO and is referring to this manual to find detailed information.
.skip 2
.center
Notation
.skip 1
.test page 22
The following notation is used in this manual to represent special
characters:
.skip
.nf.ts 11,25,50
	Notation	ASCII code (octal)	Name
.skip
	_<NULL_>	##0	Null
	_<BS_>	#10	Backspace
	_<TAB_>	#11	Tab
	_<LF_>	#12	Line Feed
	_<VT_>	#13	Vertical Tab
	_<FF_>	#14	Form Feed
	_<CR_>	#15	Carriage Return
	_<ESCAPE_> or $	#33	ESCape or Altmode
	_<CTRL/x_>	##-	Control-x
	_<space_>	#40	Space
	_<DELETE_>	177	Delete or Rubout
.skip
	_<DELIM_> or `	##-	See below
.f.skip 1
_<DELIM_> is a character used to signify the end of text strings
.index ^^I104m#DELIM  Character typed as surrogate for ESCape
and TECO commands typed at the console.
(TECO presumes that you may need to deal with carriage return
and line feed as ordinary characters in ASCII text,
so another character must be used as TECO's text-string
and command-string delimiter.)
.skip
When a command string is being executed,
TECO looks for the ESCape character (octal 033) as its delimiter.
Some newer terminals, however, no longer possess an ESCape key.
Late-model TECO's are capable of recognizing a surrogate
(some other, user-specified) character as signifying an ESCape
when typed at the console.
Such a character echos as accent grave -- you see an ` character,
.index ^^I140a#`      ESCape surrogate typeout
and TECO receives an ESCape character.
(Note that TECO programs, command files, and macros cannot
use the surrogate, since it is translated to ESCape only when
you type it at the console.)
For details on choosing a surrogate for ESCape,
see the EE flag or the 8192 ET bit (section 5.16).
.skip
Throughout this manual, the term _<DELIM_> is used to mean whatever
character you type as a text-string or command-string delimiter.
The ` character is used throughout to mean whichever character is echoed
for a keystroke which passes an ESCape to TECO;
if no ESCape surrogate is active, you will see a $ instead.
.index ^^I044s#$      ESCape (no surrogate) typeout
.skip
Control characters, _<CTRL/x_>, are produced by striking the CONTROL
key and a character key simultaneously.
.skip 1
Throughout this manual, upper case characters will be used to
represent TECO commands.

.page
.subtitle #####Preface to the May 1985 edition
.index ^^O050##PREFACE TO THE MAY 1985 EDITION
.center
PREFACE TO THE MAY 1985 EDITION
.skip 2
.lm +5
.indent -5
Trading in the ESCape key
.skip
In the beginning, terminals had ESCape keys.
(Go back far enough and the device TT: stands for
might actually have existed on the system, too.)
Programs wanting to treat _<CR_> _& Co. as data needed
another character to serve as command delimiter,
and ESCape looked available.
.skip
Times change.
Welcome to ESCape sequences, to cursor-control and function keys.
Farewell to $$.
.skip
See the Introduction for the notation used in this manual.
Hello ``.

.skip 2
.indent -5
Changes to the manual
.skip
This edition of the manual incorporates new material pertinent
to the enhancements to TECO-11 between Version 36 and Version 40
(see below).
.skip
Although this manual is still not intended to be a tutorial,
some "how to learn" suggestions (such as use of split-screen
scrolling) were added,
as were indications of how TECO can be used to build
custom-designed editors.
.skip
Numerous smaller changes were also made:
clarifications, new index and glossary entries,
additional explanatory material and cross referrals,
correction of old typographic errors,
and (no doubt) addition of new ones.

.page
.indent -5
From Version 36 to Version 40 - affected section numbers
.skip
.indent -2
Manual organization/additions --
.skip
.nofill
Introduction to Macros (new section), 4.3

Split-screen scrolling, 5.17

"Immediate action commands" renamed
to "immediate inspection commands", 1,6.1

"Immediate action editing characters" (new name), 4.1

VAX/VMS filespec qualifiers, format/attribute table, G.11

Eight-bit ASCII character set table, Appendix A

Handling for BASIC-PLUS-x source files, Appendix J
.fill
.skip
.indent -2
"Significant" software changes --
.skip
.nofill
ESCape surrogate - EE flag, 8192 ET bit, 5.16

Reverse paging (-P, et al, VAX/VMS only), 5.2

Reverse searching (-N, et al, VAX/VMS only), 5.7

Local Q-registers, 3.3.2

Local Q-register manipulation, 5.9

Immediate ESCape-sequence commands, 4.4

:_^T, read/decode a keystroke, 5.11

32 ED bit controls immediate ESC-seq commands, 5.16

Acceptance and handling of 8-bit characters, [throughout]

Typeout of 8-bit data, and the 4096 ET bit, 5.16

n:_^T, one-shot binary-mode character typeout, 5.4

TECO HELP facilities on VAX/VMS, G.13
.fill
.skip
.indent -2
"Minor" software changes --
.skip
.nofill
_^W as immediate mode command (screen re-paint), 4.2

_<DELIM_> character as immediate inspection command, 1.6.1, 4.2

Null tag allowed in computed GOTO, 5.13

nFRtext` command (replace n characters), 5.6

m,nFRtext` command (replace from m to n), 5.6

_^E (form feed flag) can now be user-set, 5.11

Setting 1:W changes width and O/S characteristic, 5.17

WRAP/NOWRAP set by 256 ET bit on VAX/VMS, 5.16

128 ED bit inhibits auto-refresh in split scrolling, 5.16

Search matching with diacritical marks, 5.16

New 0:W codes for VT102 and GIGI scope types, 5.17

VAX/VMS handling of _^T (disabled when), 4.5
.fill
.lm -5

.page
.subtitle #####Basics of TECO
.index ^^O1####CHAPTER 1        BASICS OF TECO
.center
CHAPTER 1
.skip 1
.center
BASICS OF TECO
.blank 2
.subtitle #####Using TECO
.index ^^O101##        1.1      USING TECO
1.1 USING TECO
.skip 1
TECO may be called from command level by typing the appropriate command,
followed by a carriage return:
.ts 11,50
.skip 1
	For RT-11, OS/8, TOPS-10, and TOPS-20	R TECO
.skip 1
	For RSTS/E	RUN TECO$:TECO -or-
.break
		EDIT/TECO
.skip 1
	For RSX-11	RUN $TEC
.skip 1
	For VAX/VMS	RUN SYS$SYSTEM:TECO
.skip 1
TECO will respond by printing an asterisk at the left margin
to indicate that it is ready to accept user commands.
At this point,  you may type one or more commands.
.skip 1
A TECO command consists of one or two characters which cause
a specific operation to be performed. Some TECO commands may be
preceded or followed by arguments. Arguments may be either
numeric or textual. A numeric argument is simply an integer
value which can be used to indicate, for example, the number
of times a command should be executed. A text argument is a
string of ASCII characters which might be, for example, words of text
or a file specification.
.skip 1
If a command requires a numeric argument, the numeric
argument always precedes the command. If a command
requires a text argument, the text argument always
follows the command.
Each text argument is terminated by a special character
(usually a _<DELIM_> character, which TECO hears as an ESCape -
see Introduction).
.index ^^I033##ESC    String and command terminator
.index ^^I104m#DELIM  Character typed as surrogate for ESCape
This indicates to TECO that the next character typed
will be the first character of a new command.
.skip 1
TECO accumulates commands as they are typed in a command string,
and executes commands upon receipt of two
consecutive _<DELIM_> characters.
_<DELIM_> may be any character you select (if your
TECO and operating system support user-selectable
ESCape surrogates - see sections on ET and EE flags).
When you type the character you have designated as _<DELIM_>,
TECO receives an ESCape character,
and an ` (accent grave) is echoed.
(If you are not using an ESCape surrogate -- that is,
you are actually pressing an ESCape key -- a dollar sign is echoed.)
The accent grave character is used in examples throughout
this manual to represent typed _<DELIM_>s.
Note that the carriage return character
has no special significance to TECO;
only the _<DELIM_>_<DELIM_> forces execution of the command string.
.skip 1
TECO executes command strings
from left to right until either all commands have been executed
or a command error is recognized.  It then prints an asterisk to signal that
additional commands may be entered.
.skip 1
If TECO encounters an erroneous command, it prints an error
message and ignores the erroneous command as well as all commands
which follow it. All error messages are of the form:
.skip 1
?XXX	#Message
.skip 1
where XXX is an error code and the message is a description of the error.
Some error messages mention the specific character or string of characters
in error.  In these error messages, TECO represents the non-printing
special characters as follows:
.skip 1
.ts10,25
.nofill
.test page 9
	Character	Form Displayed
.skip 1
	_<TAB_>	_<TAB_>
	_<LF_>	_<LF_>
	_<VT_>	_<VT_>
	_<FF_>	_<FF_>
	_<CR_>	_<CR_>
	_<ESCAPE_>	_<ESC_>
	_<CTRL/x_>	_<_^x_>
.skip 1
.skip 1
.fill
Every error message is followed by an asterisk at the left margin,
indicating that TECO is ready to accept additional commands.
If you type a single question mark character
after a TECO-generated error message, TECO
will print the erroneous command string up to and including the
character which caused the error message. This helps you to find
errors in long command strings and to determine
how much of a command string was executed before the error was encountered.
.skip 1
You can correct typing errors by hitting the DELETE key,
which may be labeled DEL or RUBOUT on your keyboard.
Each depression of the DELETE key deletes one character
and echoes it on your terminal,
beginning with the last character typed.
If your terminal is a CRT, TECO will actually erase the deleted character
from the screen.  You can delete an entire command string
this way, if necessary.
To delete an entire line of commands, enter the character _<CTRL/U_>,
typed by holding down the CONTROL key while depressing the "U" key.
.skip 1
When you are done editing, use the EX command
to exit TECO, as described below in section 1.3.4.

.page
.subtitle #####Data Structure Fundamentals
.index ^^O102##        1.2      DATA STRUCTURE FUNDAMENTALS
1.2    DATA STRUCTURE FUNDAMENTALS
.skip 1
TECO considers any string of ASCII codes to be text.
Text is broken down into units of characters, lines, and pages.
A character is one ASCII code. A line of text is a string of ASCII
codes including one line terminator (usually a line feed) as the last
character on the line.  A page of text is a string of ASCII codes
including one form feed character as the last character on the page.
.skip 1
TECO maintains a text buffer in which text is stored.
The buffer usually contains one page of text,
but the terminating form feed character never appears in the
buffer. TECO also maintains a text buffer pointer. The pointer
is a movable position indicator which is never located directly on a
character, but is always between characters:
between two characters in the buffer,
before the first character in the buffer, or after
the last character in the buffer.
.skip 1
.index ^^I012##LF     Line terminator_; Ignored in commands
.index ^^I014##FF     Page terminator_; Output Form Feed
.index ^^I015##CR     End input line_; Ignored in commands
Line feed and form feed characters are inserted automatically
by TECO. A line feed is automatically appended to every carriage
return typed to TECO and a form feed is appended to the
contents of the buffer by certain output commands.
Additional line feed and form feed characters may be entered
into the buffer as text. If a form feed character is entered
into the buffer, it will cause a page break upon output;
text following the form feed will begin a new page.
.skip 1
Finally, TECO maintains an input file and an output
file, both of which are selected by the user through
file specification commands. The input file may be on any device
from which text may be accepted.
The output file may be on any device on which edited text may be written.
.skip 1
TECO functions as a "pipeline" editor.
Text is read from the input file into the text buffer,
and is written from the buffer onto the output file.
In the VAX/VMS implementation, it is possible to "back up"
as well as page forward in the file being edited.
In other implementations, once text has been written to the output file,
it cannot be accessed again without closing the output file and
reopening it as an input file.

.page
.subtitle #####File Selection Commands
.index ^^O103##        1.3      FILE SELECTION COMMANDS
1.3 FILE SELECTION COMMANDS
.skip 1
Input and output files may be specified to TECO in several ways.
The following sections present first a simple method for  specifying
files, and then more sophisticated commands that permit flexible file
selection.
.note
All of the following file selection commands are shown with
a general argument of "filespec". The actual contents of this
filespec argument are operating system dependent. See the operating
characteristics appendices.
Examples include a mixture of file specifications from various
operating systems.
.end note
.index ^^O1031#        1.3.1       Simplified File Selection
1.3.1 Simplified File Selection
.skip 1
For most simple applications, you can use special operating system
commands to specify the name of the file you wish to edit at the same
time that you start up TECO.
.skip 1
To create a new file:
.skip 1
.center
MAKE filespec
.skip 1
This command starts up TECO and creates the specified file for output.
.skip 1
To edit an existing file:
.skip 1
.center
TECO filespec
.skip 1
This command starts up TECO and
opens the specified file for editing while
preserving the original file (as a backup file).  It also
automatically brings the first page of the file into the text buffer.
These functions simulate the EB command described in Chapter 5.
.skip 1
If any of the above commands do not seem to work on your operating
system, consult the appropriate appendix for information about how to
install TECO and its associated operating system commands.

.page
.left margin 5
.index ^^O1032#        1.3.2       Input File Specification (ER command)
1.3.2 Input File Specification (ER command)
.skip 1
TECO will accept input text from any input device in the operating system.
The input device may be specified by the text string
supplied in the ER command
(and which, like any text argument, is terminated by a _<DELIM_> character).
The ER command causes TECO to open the specified file or print
an error message if the file is not found.
This command does not cause any portion of the file to be read into
the text buffer, however.
The following examples illustrate use of the ER command.
.left margin 25
.skip 2
.ts 25
.indent -20
COMMAND	FUNCTION
.skip 1
.indent -20
ERfilespec`	General form of the ER command where
"filespec" is the designation of the input file. The
command is terminated by a _<DELIM_> character.
.skip 1
.indent -20
ERPR:`	Prepare to read an input file from the paper tape reader.
.skip 1
.indent -20
ERPROG.MAC`	Prepare to read input
file PROG.MAC from the system's default device.
.skip 1
.indent -20
ERDX1:PROG.FOR`	Prepare to read input file
PROG.FOR from DX1:.
.skip
.left margin 5
.skip 1
TECO will only keep one input and one output file open and selected at a
time. The current input file may be changed by simply using the
ER command to specify a new file.
.skip 1
It is not always necessary to specify an input file. If you want
to create a file without using any previously edited text
as input, you may type commands to insert the necessary text directly into the
text buffer from the keyboard and, at the end of each page, write the
contents of the buffer onto an output file. Since all input is supplied
from the keyboard, no input file is necessary.

.left margin 5
.page
.index ^^O1033#        1.3.3       Output File Specification (EW command)
1.3.3 Output File Specification (EW command)
.skip 1
TECO will write output text onto any output device in the operating system.
The output file may be specified by means of the text string
supplied in an EW command.
If the output device is a file-structured device (for example, a disk),
the file name and any extension must be supplied.
If a file name is specified but no device is explicitly specified, the
system's default device is assumed.
The following examples illustrate
use of the EW command.
.skip 2
.left margin 25
.indent -20
COMMAND	FUNCTION
.skip 1
.indent -20
EWfilespec`	General form of the EW command where
"filespec" is the designation of the output file.
The command is terminated by a _<DELIM_> character.
.skip 1
.indent -20
EWSYS:TEXT.LST`	Prepare to write output file
TEXT.LST on SYS:.
.skip 1
.indent -20
EWPROG`	Prepare to write output file
PROG on the system's default device.
.skip 1
.indent -20
ERDX1:INPUT.MAC`EWOUTPUT.MAC``
.break
Open an input file INPUT.MAC to be
found on DX1: and open an output file named OUTPUT.MAC.
The double _<DELIM_> (echoed as ``) terminates the command
string and causes the string to be executed.
Note that the _<DELIM_> which terminates the EW command
may be one of the two _<DELIM_>s which terminates the command string.
.skip 1
.left margin 5
.skip 1
You do not need to specify an output file if you only want to examine
an input file, without making permanent changes or corrections.
In this case, the contents of the input file may be read into
the text buffer page by page and examined at the terminal.
Since all output is printed on the user terminal, no output
file is needed.

.page
.index ^^O1034#        1.3.4       Closing Files (EX command)
1.3.4  Closing Files (EX command)
.skip 1
When you are finished editing a file, use the EX command to close out
the file and exit from TECO. The current contents of the text buffer
and any portion of the input file that has not been read yet are
copied to the output file before TECO exits.
The EX command takes no arguments.
.skip 2
.left margin 25
.indent -20
COMMAND	FUNCTION
.skip 1
.indent -20
EX	Write the text buffer to the current output file,
move the remainder of the current input file to
the current output file, close the output file, then return to
the operating system.
.skip 1
.indent -20
ERFILE.MAC`EWCOPY.MAC`EX``
.break
Open an input file FILE.MAC
and open an output file named COPY.MAC, then copy
all the text in the input file to the output file, close the output file,
and exit from TECO.
.lm 5

.page
.lm5
.subtitle #####Input and Output Commands
.index ^^O104##        1.4      INPUT AND OUTPUT COMMANDS
1.4 INPUT AND OUTPUT COMMANDS
.skip 1
The following commands permit pages of text to be read
into the TECO text buffer from an input file or written
from the buffer onto an output file.  Once a page of text
has been written onto the output file, it cannot be recalled
into the text buffer unless the output file is closed
and reopened as an input file.
.skip 2
.left margin 13
.ts 13
.indent -8
COMMAND	#####FUNCTION
.skip 1
.indent -8
Y	Clear the text buffer, then read the next page of the input
file into the buffer.
Since the Y command causes the contents of the text buffer
to be lost, it is not permitted if an output file is open and
there is text in the buffer.
.skip 1
.indent -8
P	Write the contents of the text buffer onto the next page
of the output file, then clear the buffer and read the next page
of the input file into the buffer.
.skip 1
.indent -8
nP	Execute the P command n times.
If n is not specified, a value of 1 is assumed.
.left margin 5
.skip 1
After each Y, P, or nP command, TECO positions the pointer before the
first character in the buffer.

.page
.subtitle #####Pointer Positioning Commands
.index ^^O105##        1.5      POINTER POSITIONING COMMANDS
1.5 POINTER POSITIONING COMMANDS
.skip 1
The buffer pointer provides the means of specifying the
location within a block of text at which insertions, deletions
or corrections are to be made. The following commands permit the buffer
pointer to be moved to a position between any two adjacent characters
in the buffer.
.skip 2
.left margin 13
.indent -8
COMMAND	#####FUNCTION
.skip 1
.indent -8
J	Move the pointer to the beginning of the buffer.
.skip 1
.indent -8
L	Move the pointer forward to a position between the next line
feed and the first character of the next line.  That is, advance
the pointer to the beginning of the next line.
.skip 1
.indent -8
nL	Execute the L command n times, where n is a signed integer.
A positive value of n moves the pointer to the beginning of the
nth line following the current pointer position. A negative
value moves the pointer backward n lines and positions it at
the beginnning of the nth line preceding the current position.
If n is zero, the pointer is moved to the beginning of the
line on which it is currently positioned.
.skip 1
.indent -8
C	Advance the pointer forward across one character.
.skip 1
.indent -8
nC	Execute the C command n times, where n is a signed integer.
A positive value of n moves the
pointer forward across n characters.
A negative value of n moves the
pointer backward across n characters. If n is zero, the pointer
position is not changed.  Remember that there are two characters,
_<CR_> and _<LF_>, at the end of each line in the buffer.
.left margin 5
.skip 1
These commands may be used to move the buffer pointer across
any number of lines or characters in either direction; however, they
will not move the pointer across a page boundary. If a C
command attempts to move the pointer backward beyond the beginning
of the buffer or forward past the end of the buffer, an error
message is printed and the command is ignored.
.skip 1
If an L command attempts to exceed the page boundaries in this
manner, the pointer is positioned at the boundary which would have
been exceeded.  Thus, in a page of 2000 lines,
the command "-4000L" would position the
pointer before the first character in the buffer.  The command
"4000L" would position the pointer after
the last character in the buffer. No error message is printed
in either case.

.page
.subtitle #####Type Out Commands
.index ^^O106##        1.6      TYPE OUT COMMANDS
1.6 TYPE OUT COMMANDS
.skip 1
The following commands permit sections of the text in the
buffer to be printed out on your terminal for examination.
These commands do not move the buffer pointer.
.skip 2
.left margin 13
.indent -8
COMMAND	#####FUNCTION
.skip 1
.indent -8
T	Type the contents of the text buffer from the current
position of the pointer through and including the next line feed
character.
.skip 1
.indent -8
nT	Type n lines, where n is a signed integer. A positive value of n
causes the n lines following the pointer to be typed. A negative
value of n causes the n lines preceding the pointer to be typed.
If n is zero, the contents of the buffer from the beginning of the line
on which the pointer is located up to the pointer is typed.
This is useful for verifying the location of the buffer pointer.
.skip 1
.indent -8
HT	Type the entire contents of the text buffer.
.skip 1
.indent -8
V	Type the current line. Equivalent to the sequence "0TT".
.left margin 5

.page
.index ^^O1061#        1.6.1       Immediate Inspection Commands
1.6.1 Immediate Inspection Commands [not in TECO-10]

.skip 1
In addition, there are available as a convenience
abbreviations of two frequently used type out commands.
Each one consists of a single character,
and must be the very first character typed after TECO
prints its prompting asterisk.
Each of these commands takes effect immediately;
there is no need to follow any of these commands
by any _<DELIM_> character.
For this reason, these commands are known as "immediate" commands
(see Chapter 4 for more information on immediate commands).
.skip 2
COMMAND	#####FUNCTION
.left margin 13
.skip 1
.indent -8
_<LF_>	Immediately execute an LT command.
.index ^^I012i#LF     Advance and type one line
This command is issued by typing the line feed key
as the first keystroke after TECO's prompt.
It causes TECO to move the pointer ahead one line
and then type out the new line.
On terminals without a line feed key,
typing _<CTRL/J_> has the same effect.
(See also the next command.)
.skip 1
.indent -8
_<DELIM_>	Immediately execute an LT command.
.index ^^I104p#DELIM  Advance and type one line
(Action identical to that of the command above.)
This command is available when an ESCape surrogate is active,
and causes TECO to move the pointer ahead one line
and then type out the new line when a _<DELIM_> is the first
thing typed after TECO's prompting asterisk.
.break
[RSTS/E only]
.skip 1
.indent -8
_<BS_>	Immediately execute a -LT command.
.index ^^I010i#BS     Back up and type one line
This command is issued by typing the backspace key
as the first keystroke after TECO's prompt.
It causes TECO to move the pointer back one line
and then type the line just moved over on the terminal.
On terminals without a backspace key,
typing _<CTRL/H_> has the same effect.
.LEFT MARGIN 5
.skip 2
.skip 1
These commands are useful for "walking through" a file, examining and/or
modifying lines one at a time.

.page
.subtitle #####Text Modification Commands
.index ^^O107##        1.7      TEXT MODIFICATION COMMANDS
1.7 TEXT MODIFICATION COMMANDS
.skip 1
You can insert or delete text from the buffer using the following commands:
.left margin 13
.skip 2
.indent -8
COMMAND	#####FUNCTION
.skip 1
.indent -8
Itext`	Where "text" is a string of ASCII characters terminated
by a _<DELIM_> character.
The specified text is inserted into the buffer at the current position
of the pointer. The pointer is positioned immediately after
the last character of the insertion.
.skip 1
.indent -8
K	Delete the contents of the text buffer from the current
position of the pointer up to and including the next line
feed character.
.skip 1
.indent -8
nK	Execute the K command n times, where n is a signed integer.
A positive value of n causes the n lines following the pointer to
be deleted. A negative value of n causes the n lines preceding the
pointer to be deleted. If n is zero, the contents of the buffer from
the beginning of the line on which the pointer is located up to the
pointer is deleted.
.skip 1
.indent -8
HK	Delete the entire contents of the text buffer.
.skip 1
.indent -8
D	Delete the character following the buffer pointer.
.skip 1
.indent -8
nD	Execute the D command n times, where n is a signed integer.
A positive value of n causes the n characters following the pointer
to be deleted. A negative value of n causes the n characters
preceding the pointer to be deleted. If n is zero, the command is
ignored.
.left margin 5
.skip 1
Like the L and C commands, the K and D commands may not execute across
page boundaries. If a K command attempts to delete text
up to and across the beginning or end of the buffer, text will
be deleted only up to the buffer boundary and the pointer will be
positioned at the boundary. No error message is printed.
A D command attempting to delete text past the end or
beginning of the text buffer
will produce an error message and the command will be ignored.

.page
.subtitle #####Search Commands
.index ^^O108##        1.8      SEARCH COMMANDS
1.8 SEARCH COMMANDS
.skip 1
The following commands may be used to search  the input file for a specified
string of characters.
.left margin 13
.skip 2
.indent -8
COMMAND	#####FUNCTION
.skip 1
.indent -8
Stext`##Where "text" is a string of ASCII
characters terminated by a _<DELIM_> character.
This command searches the text buffer for the next
occurrence of the specified character string following the
current pointer position.  If the string is found, the pointer
is positioned after the last character on the string.  If it
is not found, the pointer is positioned immediately before
the first character in the buffer and an error message is printed.
.skip 1
.indent -8
Ntext`##Performs the same function as the S command except
that the search is continued across page boundaries, if necessary,
until the character string is found or the end of the input file is reached.
If the end of the input file is reached,
an error message is printed.
On VAX/VMS, you can "back up" into the file and continue editing,
although doing so uses TECO features beyond those introduced in this chapter.
Using only basic features (or a TECO implementation other than VAX/VMS),
you must close the output file and reopen it as an input file
before you can edit the file further.
.left margin 5
.skip 1
Both the S command and the N command begin searching for the
specified character string at the current position of the
pointer. Therefore, neither command will locate any occurrence of the
character string which precedes the current pointer position, nor
will it locate any character string which is split across a
page boundary.
.skip 1
Both commands execute the search by attempting to match the
command argument, character for character, with some
portion of the buffer contents. If an N command reaches the
end of the buffer without finding a match for its argument,
it writes the contents of the buffer onto the output file,
clears the buffer, reads the next page of the input file into
the buffer, and continues the search.

.page
.subtitle #####Sample Editing Job
.index ^^O109##        1.9      SAMPLE EDITING JOB
1.9 SAMPLE EDITING JOB
.skip 1
The following sample editing job is included to help the new
user to achieve a greater understanding of the basic TECO
commands. The entire terminal output from the editing
run is reproduced intact, with  numbers added
in the left margin referring to the explanatory paragraphs
which follow.
.skip 4
.nofill
1_< *EWDT1:FILE1.TXT``
2_< *HKIMR. JOHN P. JONES
 ! COMPUTER ELECTRONICS CORPORATION
 ! BOSTON, MASAASACHUSETTS
 !
 ! DEAR MR. JONES:
 !
 ! I WAS PLEASED TO RECEIVE YOUR REQUEST FOR INFORMATION
 ! PERTAINING TO THE NEW TECO TEXT EDITING AND CORRECTING
 ! PROGRAM.
 !
 ! ENCLOSED IS A COPY OF THE TECO USERS'S GUIDE, WHICH
 ! SHOULD ANSWER ALL OF YOUR QUESTIONS.
 !
 ! SINCERELY,
 !
 !
 !
 !
 ! ``
3_< *-20LSETTS`I 02150``
 ! *STION`2C13DIREGARDING``
4_< *SGUIDE`-5DIMANUAL``
 ! *SELY`0T``
 ! SINCERELY*0KIVERY TRULY YOURS``
 ! *HT``
 ! MR. JOHN P. JONES
 ! COMPUTER ELECTRONICS CORPORATION
 ! BOSTON, MASSACHUSETTS 02150
 !
 ! DEAR MR. JONES:
 !
 ! I WAS PLEASED TO RECEIVE YOUR REQUEST FOR INFORMATION
 ! REGARDING THE NEW TECO TEXT EDITING AND CORRECTING
 ! PROGRAM.
 !
 ! ENCLOSED IS A COPY OF THE TECO USER'S MANUAL, WHICH
 ! SHOULD ANSWER ALL OF YOUR QUESTIONS.
 !
 ! VERY TRULY YOURS,
 !
 !
 !
 !
 !

5_< *EX``
 ! (TECO is rerun, operating system dependent)
 ! *ERDT1:FILE1.TXT`EWLP:``
6_< *Y5KIMR. JAMES B. SMITH
 ! DATEK ASSOCIATES, INC.
 ! 122 MAIN STREET WEST
 ! AUSTIN, TEXAS
 !
 ! DEAR MR. SMITH:
 ! ``
 ! *HT``
 ! MR. JAMES B. SMITH
 ! DATEK ASSOCIATES, INC.
 ! 122 MAIN STREET WEST
 ! AUSTIN, TEXAS
 !
 ! DEAR MR. SMITH:
 !
 ! I WAS PLEASED TO RECEIVE YOUR REQUEST FOR INFORMATION
 ! REGARDING THE NEW TECO TEXT EDITING AND CORRECTING
 ! PROGRAM.
 !
 ! ENCLOSED IS A COPY OF THE TECO USER'S MANUAL, WHICH
 ! SHOULD ANSWER ALL OF YOUR QUESTIONS.
 !
 ! VERY TRULY YOURS,
 !
 !
 !
 !
 !
 ! *EX``

.skip 1
.fill
.skip 1
1) At this point, the user called TECO into memory. TECO
responded by printing an asterisk at the left margin.
The user then entered an EW command, opening an output file
called "FILE1.TXT" on DT1. There is no input file.
Upon receipt of the double _<DELIM_> (echoed as ``),
TECO created the designated output file,
then printed another asterisk at the left margin.
.skip 1
2) The user entered a command string consisting of two commands.
The HK command cleared the text buffer (not really necessary, since
it was already empty), and the I command inserted 18 lines
of text into the buffer, including 8 blank lines. TECO executed
these commands upon receipt of the second double _<DELIM_>. At
this point, the buffer pointer was positioned at the end of the
buffer, following the last line feed character in the text.
Note that the user made an error while typing the word
"MASSACHUSETTS". He typed "MASA", then realized his
mistake and struck the DELETE key once to delete the second
"A". TECO echoed the deleted character. The user then typed
the correct character and continued the insertion.
.skip 1
3) The user typed -20L to move the pointer to the
beginning of the buffer and SETTS` to position the pointer
immediately after the character string "ETTS" (which terminates
the word "MASSACHUSETTS"). He then used an I command to insert
one space and a five-digit zip code. A second S command
positioned the pointer after the word "INFORMATION".
The 2C command moved the pointer to the beginning of the
next line (carriage return and line feed count two characters),
and the user deleted the words "PERTAINING TO" and replaced
them with the word "REGARDING".
.skip 1
4) The user continued editing by positioning the pointer
after the word "GUIDE". He then deleted this word, and
replaced it with the word "MANUAL". Finally, he searched
for the word "SINCERELY", typed 0T to determine that
the pointer was correctly positioned between the Y and the
comma which follows it, and typed 0K to delete everything
on the line except the comma. He then inserted "VERY TRULY YOURS"
in place of the word "SINCERELY". An HT command caused
the edited text to be printed at the terminal.
.skip 1
5) The command string EX`` caused the contents of the buffer
to be written onto the output file and the output file to be closed.
The user then reentered TECO and  reopened the  file
"FILE1.TXT" as an input file and
specified the line printer as an output file.
.skip 1
6) This command string reads the first (and only) page of
"FILE1.TXT" into the buffer, deleted the first 5 lines,
replaced them with a different address and salutation, then printed
the contents of the buffer on the terminal for verification and
finally printed the new version of the letter onto
the line printer. Note that the previous version of the letter
still resides in file "FILE1.TXT" on DT1.

.page
.subtitle #####Interlude
.index ^^O1I###INTERLUDE
.center
INTERLUDE
.skip 1
The rest of this manual is a description of TECO in all its glory.
TECO is a complex editor and has many features because it has been under
development for a long time.  (TECO is older than some of the
readers of this manual!)   Do not try to understand everything the first
time through.  If you find that what you are reading seems hopelessly
obscure, or makes no sense whatsoever, skip to the next section
and come back to it some time later.  It will be a while before you need
all of TECO's features.
.skip 1
This manual is meant to be a reference manual and not a tutorial.
Readers who are first learning TECO may wish to consult the following
document (available from Digital Equipment Corporation) for more
basic material: DEC-10-UTECA-A-D INTRODUCTION TO TECO.
.skip 1
The commands described in this manual are those implemented
.index ^^Ref###TECO-11 Version 40
.index ^^Ref###TECO-8 Version 7
.index ^^Ref###TECO-10 Version 3
in TECO-11 Version 40, TECO-8 Version 7, and TECO-10 Version 3.
Some of the more obscure commands may
not be present under some operating systems, in which case this is indicated
by a note in the form [Not in TECO-x].
.skip
This manual also describes some (but not necessarily all) of the obscure
commands that belong to one implementation of TECO but not to the other
implementations.  Such commands are flagged by a note of the form
[TECO-x only].
These commands are not to be considered part of the so-called
"Standard TECO" and should not be used in applications that may be run
on multiple operating systems.  Consult also the appendices for
commands that are very operating system dependent.

.page
.subtitle #####Invoking TECO
.index ^^O2####CHAPTER 2        INVOKING TECO
.center
CHAPTER 2
.SKIP 2
.center
INVOKING TECO
.skip 2
.subtitle #####Running TECO
.index ^^O201##        2.1      RUNNING TECO
2.1 RUNNING TECO
.skip 1
To run TECO with no special options or defaults, use
the same command on your operating system that you would use to
run any other program.  The command is system dependent
but is usually something like
.skip 1
.center
RUN TECO
.skip 1
Consult the appendix that describes your operating system's characteristics
for details.
.SKIP 2
.subtitle #####Creating a New File
.index ^^O202##        2.2      CREATING A NEW FILE
2.2 CREATING A NEW FILE
.skip 1
As described in Chapter 1, most operating systems use
the same command to invoke TECO
for the purpose of creating a new file:
.skip
.center
MAKE filespec
.skip 1
The "MAKE filespec" command takes as its single argument
the file specification
for the file to be created.  This file specification must conform
to the conventions used by your operating system.  If a file by that
name already exists, TECO will give you a warning message telling you
that you are superseding an existing file.
.skip 1
The MAKE command invokes TECO and performs an effective EWfilespec``
command, as described in Chapter 1.

.skip 2
.subtitle #####Editing an Existing File
.index ^^O203##        2.3      EDITING AN EXISTING FILE
2.3 EDITING AN EXISTING FILE
.skip 1
As Chapter 1 states, most operating systems
use the same command to invoke TECO
for the purpose of editing an existing file:
.skip
.center
TECO filespec
.skip 1
The "TECO filespec" command takes as its argument the file specification
for the file to be edited.  The file will be opened for input and output,
with back-up protection.  That means that the system will save the original
version of the source file (in case you 'blow' the edit).  If your
operating system supports file version numbers, a new version will be
created.  If your operating system does not support file version numbers,
the original file will be preserved in a file with the same name but with
a backup extension (.BAK).
.skip 1
The TECO command invokes TECO
and performs an effective EBfilespec`Y`` command.
Note that the first page of the file is brought into memory
and that the text buffer pointer is positioned at the start of the file.
.skip 1
If, at any time during the edit, you discover that the edit is invalid,
slowly (so TECO can respond to them)
type enough _<CTRL/C_>s to get you back to the operating system. You
will find that your original file has been preserved.
.skip 1
TECO remembers the filespec given in a MAKE or TECO command. If TECO is
invoked with the command "TECO", with no filespec, it will open the
file edited last (i.e., the remembered filespec).

.skip 2
.subtitle #####Switches on TECO and MAKE Commands
.test page 30
.index ^^O204##        2.4      SWITCHES ON TECO AND MAKE COMMANDS
2.4 SWITCHES ON TECO and MAKE COMMANDS
.skip 1
The TECO and MAKE commands can take switches (qualifiers) of the form /SWITCH.
These switches are described below.
.skip 2
.center
SWITCHES ON COMMAND LINES
.skip
.lm 30
.ts 15,30
.indent -25
System	Switch	Meaning
.skip
.indent -25
RSTS/E	/SIZE:n	start with nK word editing area
.indent -15
/SIZE:+n	start with nK additional words of editing area
.skip
.i-25
RSTS/E
.i-25
RSX-11
.i-25
VAX/VMS	/INSPECT	Do not create an output file
.indent -15
/FIND	Initially position to the position marker left in the file by
the VTEDIT macro and delete the marker.
.indent -15
/NOCREATE	Do not automatically create a new file if the file specified
by the TECO command does not exist.
.indent -15
/NOINI	Do not use TECO.INI to perform initialization
.indent -15
/NOMEMORY	Do not remember the argument to the invocation command.
.indent -15
/SCROLL	Automatically enter split screen scrolling mode, using 1/4
of the screen's lines as the scrolling area (available on VT100 terminals
only).
.indent -15
/VTEDIT	Load VTEDIT video terminal editor
.lm 5
.skip
The /SCROLL switch may take a value of the following form:
.s
.lm30.i-15
/SCROLL:n	Enter split screen scrolling mode, using n lines for the
scrolling area.
.s
.lm5
The /VTEDIT switch may also take values (of the form :value).
.skip
.lm30.i-15
/VTEDIT:HOLD	Start up in hold screen mode
.i-15
/VTEDIT:SEEALL	Start up in SEEALL mode
.skip
.lm5
These values can be combined, viz.: /VTEDIT:HOLD:SEEALL.

.skip 2
.test page 20
.subtitle #####Invoking a TECO Program
.index ^^O205##        2.5      INVOKING A TECO PROGRAM
2.5 INVOKING A TECO PROGRAM
.skip 1
All operating systems except TOPS-10 and TOPS-20
use the same command to let you
start up execution of a TECO program (macro).  This is the MUNG
command.
.skip 1
The MUNG command has the form
.skip
.center
MUNG filespec
.skip
where filespec is the name of the TECO program that is to be run.
If no file extension (file type) is specified, .TEC is assumed.  This command
executes the TECO code that appears within the specified file.
It invokes TECO and performs an effective EIfilespec`` command
(consult the appendices for operating-system dependent differences).
The contents of the specified file should generally end with
a double ESCAPE so that execution will start immediately.
.skip 1
.test page 3
Another form of this command is
.skip
.center
MUNG filespec,data
.SKIP
where "data" is any string of ASCII characters to be passed to the
TECO program.  This version of the MUNG command invokes TECO and issues
an effective
.skip
.center
Idata`EIfilespec``
.skip
command.
Under TECO-11, a space, tab, or a slash (/) may be used instead of the comma.

.skip 2
.test page 40
.subtitle #####User Initialization
.index ^^O206##        2.6      USER INITIALIZATION
2.6 USER INITIALIZATION
.skip 1
You can specify initialization commands to TECO by creating a file
called TECO.INI.  If, upon start-up, TECO finds a file called TECO.INI
in your area, TECO executes the commands in that file.
You can use TECO.INI commands to set initial values of flags and to
tailor TECO to your needs. You must, however, be very careful in
constructing code for your TECO.INI file: an error in this code may
keep TECO from running at all!
.skip
If you include unusual commands in your
initialization file, you  would be prudent to surround such commands with
the ? command.
This causes TECO to type the commands out
when they are executed (see section 5.18.4).
You should also print an informative message on the terminal
reminding other users that this version of TECO has been customized.
.skip
Example 1:
.skip
.center
?1ED?
.skip 1
The user initialization file sets the ED flag to 1 so that _^ characters
in search strings have their traditional meaning (do not convert the next
character to a control character).
The file also causes the command to be typed out when it is executed.
.skip
Example 2:
.skip
0,16ED _^A[Dot preserved on failing searches]_^A 13_^T 10_^T
.skip 1
The user initialization file causes future search string failures to preserve
the pointer position.
It also prints a message informing all users of this feature.
.skip 1
.test page 25
In TECO-11, the TECO.INI commands may return a value to the command
processor. Such a value, if present, is interpreted as a set of bit
encoded flags that control the startup processing. The following bits
may be set:
.s1.lm25.ts25
.i-10
Value_&1	Automatically load the VTEDIT macro (as if the user had typed
TECO/VTEDIT).
.s1.i-10
Value_&4	Inhibit use of the memory file
(as if the user had typed TECO/NOMEMORY).
.s1.i-10
Value_&16	Automatically load VTEDIT and start it in SEEALL mode
(as if the user had typed TECO/VTEDIT:SEEALL).
.s1.i-10
Value_&32	Automatically load VTEDIT and start it in HOLDSCREEN mode
(as if the user had typed TECO/VTEDIT:HOLD).
.s1.i-10
Value_&128	Automatically enter split screen scrolling mode (as if the
user had typed TECO/SCROLL).
.s1.i-10
Value_&256	Inhibit automatic creation of the output file if the
input file does not exist (as if the user had typed TECO/NOCREATE).
.lm5
.skip 1
For additional information on initialization, consult the operating system
specific appendices.

.page
.subtitle #####Conventions and Structures
.index ^^O3####CHAPTER 3        CONVENTIONS AND STRUCTURES
.center
CHAPTER 3
.s1
.center
CONVENTIONS AND STRUCTURES
.skip 2
.index ^^O301##        3.1      TECO CHARACTER SET
3.1  TECO CHARACTER SET
.skip 1
TECO accepts the full 8-bit ASCII character set.
(In other than TECO-11, characters typed at the console
have their 8th bit trimmed off.  If your terminal
does not transmit or  receive all of the ASCII codes, you can still insert the
full character set into your TECO buffer, using special commands
(see section 5.6).
.skip 1
For more information on TECO's handling of 8-bit characters
(including on terminals capable of displaying only 7-bit data),
see the description of the 4096 ET bit, in section 5.16.
.skip 1
When TECO is maintaining a window into the text buffer,
a special facility (called "SEEALL" or "View All" mode) is available to
.index ^^I123v#SEEALL "View All" characters display mode
explicitly show certain characters which normally do not
print, such as _<CR_>, _<FF_>, and _<TAB_>.
This mode is controlled by the 3:W flag,
which is described in section 5.17.
.skip 1
TECO command strings may be entered using upper case characters
(as shown throughout this manual) or lower case characters.
For example, the commands MQ, mQ, Mq, and mq are executed identically.
A file containing upper and lower case text can be edited
in the same way as a file containing upper case only,
although this may be clumsy to do from an upper case only terminal.
TECO can be set to convert lower case alphabetics to upper case
as they are typed in; commands to enable or disable
lower case type-in will be presented in section 5.16.
.skip 1
Control characters are generally echoed by TECO as a caret or
up-arrow followed by the character. Some control characters, such
as _<CTRL/L_> (form feed) and _<CTRL/G_> (bell) echo as the function
they perform. In many cases, you can type a control
character as a caret (up-arrow) followed by a character, and it will be
treated as if it had been entered using the control key.
.skip 1
There are exceptions to the interchangeable use of the CONTROL key and
the caret. When a control character is used as the delimiter of a text
string (as explained in Section 3.2.2  below), it must be entered in its
_<CTRL/x_> form.  This form must also be used if the control character is
the second character of a two-character command, or is being entered as
an immmediate action command.  Since certain control characters have
special meaning in text arguments, some of them (such as _<CTRL/N_>  and
_<CTRL/X_>), must be entered into a text string using the CONTROL key and
preceded by _<CTRL/Q_>, _^Q, _<CTRL/R_>, or _^R.

.page
.index ^^O302##        3.2      TECO COMMAND FORMAT
3.2 TECO COMMAND FORMAT
.skip 1
Each TECO commands consists of one or two characters.
.skip
TECO commands may be strung together (concatenated) into a command string.
If a command in the string returns numeric value(s),
it or they will be passed to the following command.
.note
Most commands which return a value are expressly designed for that purpose.
A few commands (such as n%q and m,n:W, q.v.) can be used to
cause an action, and also return a value.
Good programming practice suggests following such a command
with _<DELIM_> or caret-[ if the returned value is not intended
to affect the following command.
.end note
A TECO command may be preceded by one or two numeric arguments.
Some TECO commands may be followed by a text argument.
Many TECO commands can be modified by "@" (see section 3.2.2)
and/or by ":" (see section 3.2.3).
.skip
When TECO commands are concatenated into a command string,
no delimiter is necessary between commands except
for one necessary to delimit a text argument
or one as suggested in the note above.
.skip 1
TECO commands are accumulated into a command string as they are typed.
The command string is executed when it is terminated by typing two
consecutive _<DELIM_> characters.
TECO then executes the commands in the order in which they appear in the
command string, until the string is exhausted or an error occurrs.
(Some TECO commands cause branching or looping,
so altering the order of execution.)
.skip
TECO's _<DELIM_> character is (internally) the ESCape (octal 33).
Because newer terminals use the ESCape character as part of control
sequences (and some terminals no longer even possess an ESCape key),
provision is made for you to designate a key on your terminal
.index ^^I104m#DELIM  Character typed as surrogate for ESCape
to cause an ESCape to be sent to TECO --
that is, to act as an ESCape surrogate.
(See the EE flag and the 8192 ET bit, section 5.16.)
Because the key you press to delimit text strings and TECO
commands may be the ESCape key or may be the surrogate, this manual
uses the indirect term _<DELIM_> to mean whichever one you are using.
When an ESCape surrogate is active, the character you see is `.
(When no surrogate is active, you see $.)
.index ^^I140a#`      ESCape surrogate typeout
This manual uses the ` character.

.skip 2
.test page 10
.index ^^O3021#        3.2.1       Numeric Arguments
3.2.1  Numeric Arguments
.skip 1
Most TECO commands may be preceded by a numeric argument. Some numeric
arguments must be positive; others can be negative or zero.  The
maximum size of any numeric argument is restricted, as summarized in
the following table:
.skip 1
.test page 8
.ts 8,16,24,32,40,48,56,64
.literal
				  Signed	       Unsigned
		System	      Min	  Max		 Max
		TECO-8	    -2**12+1	+2**12-1	2**13-1
		TECO-10	    -2**34	+2**34-1	2**35-1
		TECO-11	    -2**15	+2**15-1	2**16-1
.end literal
.skip 1
.center
TABLE 3-1  Restrictions on numeric arguments
.skip 1
Exceeding these ranges of values can cause unpredictable results. So
can using a negative argument with a command that takes only an unsigned
argument.
.skip 1
Numeric arguments can be used in the following ways:
.lm 15
.skip 1;.indent -2
-#Character commands such as J, C, R, and D take a single
numeric argument which represents the number of characters
that the command is to act on.
.skip 1;.indent -2
-#Such commands as P, PW, and _< perform an action that can be
repeated.  The numeric argument is the repetition count.
.skip 1;.indent -2
-#Some commands, such as ED, ET, _^E, _^X, ES, EU, and EV, control
the setting of variables called flags.  When a numeric
argument is specified, the value of that argument becomes the
new value of the associated flag.  When no numeric argument is
specified, these command return the value of the associated
flag.
.skip 1;.indent -2
-#Line commands such as T, K, X, FB, and FC operate on lines.
They take zero, one, or two numeric arguments.  If one
argument (n) is specified, it represents the number of lines
over which the command is to have effect, beginning at the
current buffer pointer position. A positive (non-zero) n
affects a text running from the current pointer position to
the nth following line delimiter.  A negative n affects a text
running from the pointer back to the beginning of the line
containing the nth previous line delimiter.  When n is zero,
the affected text runs from the beginning of the current line
to the current pointer position.
When n is omitted, n = 1 is assumed.
.skip 1
When a line command contains two numeric arguments (m,n), these
represent the pointer positions between which text is
affected.
Unless the description of the command says the order of these two
arguments is important, they may be entered in either order.
.lm 5

.skip 1
.test page 21
When a command that normally takes an argument is specified with no
argument, TECO executes the command in the most common or most useful
way, as shown in the following table:
.ts 8,16,24,32,40,48,56,64
.skip 1
.literal
	Command   Default Argument	Default Action

	C		1		Advance 1 character
	R		1		Back over 1 character
	L		1		Advance 1 line
	J		0		Jump to start of buffer
	V		1		View 1 line
	D		1		Delete 1 character
	K		1		Kill 1 line
	S, N, etc.	1		Search for first occurrence
	%		1		Increment Q-register by 1
	X		1		Extract one line
.end literal
.skip 1
.center
Table 3-2  Default Arguments
.skip 1
These default arguments reduce the number of keystrokes needed for
common TECO actions.

.skip 2
.test page 10
.index ^^O3022#        3.2.2       Text Arguments
3.2.2 Text Arguments
.skip 1
Many TECO commands take a text (character string) argument. The string
is placed immediately after the command and consists of a sequence of
ASCII characters terminated by a _<DELIM_> character (or in the case
of ! and _^A commands, by the command character). The string of ASCII
characters may not include a _<DELIM_>, since this would terminate the
string prematurely, but may include any other character. (Some characters
may be difficult to enter from a terminal because they are TECO immediate
action commands or because they have been filtered out by the operating
system).
.skip 1
Examples of text arguments:
.lm40.ts40
.s1.i-25
Sabc`	Search for the string "abc"
.s1.i-25
_^UAHELLO`	Insert the text "HELLO" into Q-register A
.s1.i-25
OBEGIN`	Branch to the tag specified by the string "BEGIN"
.lm5.skip 1
Some TECO commands require two text arguments. Each argument must be
followed by a _<DELIM_> character, as follows:
.lm40.s1.i-25
FSabc`def`	Replace string "abc" by "def"
.lm5.skip 1
You can include a _<DELIM_> character in a text string by using another
format of text argument. In this alternate form, the string is
delimited on both sides by any ASCII code that does not otherwise
appear in the string. You signal that this format is being used by
.index ^^I100##@      Modify next text argument
inserting an @ character before the command, as follows:
.lm40.s1.i-25
@ER5TEST.FOR5	Open the file "TEST.FOR" for input. The delimiter used is "5"
.s1.i-25
@_^A+Hello out there!+	Type the message "Hello out there!"
on the terminal. The delimiter is "+"
.lm5.skip 1
Unpredictable results will occur if another TECO command intervenes
between an @ sign and the command that it is supposed to affect.
Note that a control character used as a delimiter
must be entered as _<CTRL/x_> (that is, in its single-keystroke form).
.skip 1

.skip 2
.test page 10
.index ^^O3023#        3.2.3       Colon Modifiers
3.2.3 Colon Modifiers
.skip 1
.index ^^I072##:      Modify next command
The colon (:) command modifies the action of the next command. In
some cases, it will cause the next command to return a value
indicating whether it has failed or succeeded. A zero (0) indicates
that the command has failed, while a -1 indicates that it has
succeeded. The colon modifier is used this way with
such commands as :ER, :EB, :EN, :S, :N, :FS, :FN, :FB, and :FC.
If the next sequential command requires a positive argument,
the -1 is interpreted as the largest possible positive number.
In other cases, such as :Gq and :=, the colon modifier changes
the meaning of the command. Unpredictable results may occur if you
place a colon directly before a TECO command that does not normally
accept a colon modifier.
.skip 1
If both the : and the @ (string delimiter) are used with the same
command, they may be placed in either order.

.page
.index ^^O303##        3.3      DATA STRUCTURES
3.3 DATA STRUCTURES
.skip 1
A good way to begin the study of a programming language is to forget
the commands, for the moment, and concentrate instead on the data
structures.  This section follows that approach, describing both the values
on which TECO operates and the buffers and
registers in which these values are stored.
.skip 1
TECO manipulates two types of data, namely,
.skip
.left margin 12
.ts 12
.indent -3
o	The character string: a sequence of zero or more ASCII characters, and
.skip
.indent -3
o	The integer: a numeric value that may be signed or unsigned.
.skip
.left margin 5
.skip 1
The text that TECO edits is, of course, a character string.
Less obviously, the
command string by which the user controls TECO is also a character string.
The counters and indices for character string manipulation, and the repetition
counts for loops are integers.
.skip 1
Character strings and integers have distinct internal representation
and this is reflected in the design of the TECO commands.  Commands designed
for character strings do not work on integers and vice versa.
.skip 1
The data structures described in this section are frequently applied
to character strings. Structure is never "built into" the data,
but rather is attributed to the data by particular commands and
conventions. Thus "lines" of characters are recognized by line
manipulation commands, but not by character manipulation commands,
which view an end-of-line character as just another ASCII code.
.skip 1
The following are definitions for the line and the page in TECO:
.skip
.left margin 12
.ts 12
.indent -3
o	Any character string can be divided into TECO lines by considering the
line to be ended by either
.lm17.nf.s1
.index ^^I012##LF     Line terminator_; Ignored in commands
a line feed (octal 12)
.index ^^I014##FF     Page terminator_; Output Form Feed
a form feed (octal 14)
.index ^^I013##VT     Line terminator_; Not a TECO command
a vertical tab (octal 13) or
the end of the given character string
.lm12.f.s1
.indent -3
o	Any character string can be divided into TECO pages by considering the
page to be ended by either
.lm17.nf.s1
.index ^^I014##FF     Page terminator_; Output Form Feed
a form feed (octal 14) or
the end of the given character string
.f.lm12.s1
.left margin 5
.skip 1
These data structures are used to achieve two quite separate results: the
formatting of type out and the logical division of data.
.s2
.index ^^O3031#        3.3.1       Text Buffer
3.3.1 Text Buffer
.skip 1
The main storage of TECO is the text buffer.
The text buffer stores a single character
string that TECO edits. A text buffer pointer is used to address text in
the buffer; it is moved about by many TECO commands.
The text buffer pointer never points to
characters in the buffer; it is always pointing at pointer positions (between
characters).
The available pointer positions in the text buffer are sequentially
numbered beginning with 0.
Pointer position 0 is the position at the start of the
buffer, just to the left of the first character.  Pointer position 1 is the
next position, just to the right of the first character, etc.  As an example,
suppose the text buffer contains the string FOOBAR.  Then seven text buffer
pointer positions are determined as shown
by the arrows in the following figure:
.ts 8,16,24,32,40,48,56,64
.skip
.literal
		F     O     O     B     A     R
	     |     |     |     |     |     |     |
	     0     1     2     3     4     5     6
.END LITERAL
.skip 2
Note that there are 6 characters in the buffer and that the highest
numbered pointer position is 6.  The pointer position number is equal to
the number of characters preceding that position.
.skip 1
Useful definitions of "current" objects are made with respect
to the text buffer pointer as follows:
.ls
.le;The current character of the text buffer is
the character just to the right
of the pointer.  If the pointer is at the end of the text buffer, there is no
character to the right of the buffer pointer,
and the current character does not
exist.
.le;The current line of the text buffer is
the TECO line that contains the current character.
In the special case that the pointer is at the end of the buffer, the
current line is everything back to (but not including) the last end-of-line
character.
.le;The current page of the text buffer is
the TECO page that contains the current
character.  In the special case that the pointer is at the end of the
buffer, the current page is everything back to (but not including) the
last form feed character (or the beginning of the buffer).
.els
When the text buffer pointer is at the end of the text buffer and the last
character of the buffer is an end-of-line character, then the current line
is an empty string according to the definition just given.  In this case, TECO
performs the required operation on this empty string.  For example, if the
pointer is at the end of the buffer and TECO is commanded to kill (delete)
the next 3 lines, then the empty string is killed 3 times.  Similarly, if the
pointer is at the end of the buffer and TECO is commanded
to advance the pointer 5 lines,
the pointer will remain at the end of the buffer.  No error
message will be given.  In a like fashion, if the pointer is at the end of
the first line of the buffer, and TECO is instructed to extract the previous
4 lines (into a Q-register), then only the first line is extracted since it
is presumed to be preceded by 3 empty lines.

.s3
.index ^^O3032#        3.3.2       Q-registers
3.3.2 Q-registers
.skip 1
TECO provides data storage registers, called Q-registers,
which may be used to store single integers and/or ASCII character
strings.
Each Q-register is divided into two storage areas.
In its numeric storage area, each Q-register can store one signed integer.
In its text storage area, each Q-register can store an
ASCII character string (which can be any text, including
the important case of a TECO command string).
.skip
There are global Q-registers and (in TECO-11) local Q-registers.
.skip
In every TECO, there are 36 global Q-registers,
each of which has a one-character name: A through Z and 0 through 9.
The global Q-registers are available to all macro levels,
including "outside" macros altogether (that is, at prompt level).
.skip
In TECO-11, there are additionally 36 local Q-registers,
each of which has a two-character name:  .A through .Z and .0 through .9.
Effectively, there is a complete and unique set of
local Q-registers available to each and every macro level,
including prompt level.
TECO automatically saves and restores a given macro level's
local Q-registers around execution of a nested (lower level) macro.
When a macro is invoked via an Mq command
(where the command is not colon-modified, and q is a global Q-register),
the current set of local Q-registers is saved and a
new set of local Q-registers created.
When the macro exits, its local Q-registers are destroyed
and those of the calling macro level are restored.
(If a fatal error occurs and TECO goes back to prompt level,
local Q-registers from all macro levels are destroyed and
prompt level's set is restored.)
.skip
(A new set of local Q-registers is not created when the command
is colon-modified, as in :MA, or when the invoked macro itself
resides in a local Q-register, as in M.A -- see Table 5-9C.)
.skip
A local Q-register name can be used in any command that
takes a Q-register name.
.skip 1
Various TECO commands allow the storing and retrieving of numeric
values from the numeric storage areas of the Q-registers.
Other TECO commands allow the storage and retrieval of strings from the
text storage areas of the Q-registers.
.s3
.index ^^O3033#        3.3.3       Q-register Push-down List
3.3.3 Q-register Push-down List [not in TECO-8]
.skip 1
The Q-register pushdown list is a stack that permits the numeric and
text storage areas of Q-registers to be saved (the [ command)
and restored (the ] command).
The command sequence [A#]B replicates the text string and numeric
value from Q-register A into Q-register B.
(Note that in TECO-11, macros can be written to use local Q-registers,
avoiding the need to save and restore Q-registers via the pushdown list.)
.s3
.index ^^O3034#        3.3.4       Numeric Values and Flags
3.3.4 Numeric Values and Flags
.skip 1
TECO has many special numeric values and flags which are accessible through
TECO commands. Some of these values, such as the text buffer pointer,
reflect the state of TECO. Others control TECO's behavior in various
ways.

.page
.subtitle #####Command String Editing
.index ^^O4####CHAPTER 4        COMMAND STRING EDITING
.center
CHAPTER 4
.skip 1
.center
COMMAND STRING EDITING
.s1
.skip 1
.index ^^O401##        4.1         Immediate Action Editing Characters
4.1 Immediate Action Editing Characters

.skip 1
While you are typing command strings at a terminal,
TECO considers certain ASCII characters to have special
meaning.
Most of the special characters cause TECO to perform a specified function
immediately, without waiting for the double _<DELIM_>
which normally be required to terminate a command string.
Immediate action editing characters may be entered at any point in a
command string - even in the middle of a command or text argument.
.skip 1
Many immediate action editing characters, such as _<DELETE_>
(which deletes the immediately preceding character),
cannot be used as regular TECO commands.
For instance, if you enter a _<DELETE_> into a command string which is
to be later executed as a macro, the _<DELETE_> will not delete a character
as part the execution of the macro.
.skip 1
Some characters, like _<CTRL/U_>, are both
regular TECO commands  and immediate action commands. The command string
_^Uqtext` enters the specified text into Q-register q.  However,
_<CTRL/U_> typed while entering a command string is
an immediate action editing character which
deletes the current line.  Thus you cannot type
a _<CTRL/U_> (or any similar sequence) directly into TECO as
part of a command string.
Nevertheless, _<CTRL/U_> is still a valid TECO command;
should TECO encounter it in a macro or indirect file,
it will have its regular TECO effect (_^Uqtext`).
.skip 1
Control characters used as immediate action editing characters must be entered
using the CONTROL key; they will not be recognized if entered in their
caret or up-arrow form.
.skip 1
Table 4-1 lists the immediate action editing characters
and explains their functions.

.page
.center
TABLE 4-1: IMMEDIATE ACTION EDITING CHARACTERS
.blank
These characters take immediate effect and are used to edit a command
string as it is being entered:
.left margin 20
.skip 1
.ts 20
.indent -15
CHARACTER	EXPLANATION
.skip 1
.indent -15
.index ^^I033##ESC    String and command terminator
_<DELIM_>_<DELIM_>
.br
The double _<DELIM_> character sequence
tells TECO to begin execution of the command string just typed in.
It inserts two _<ESCAPE_>s into the command string.
(_<DELIM_> may be generated by pressing a key designated by the user
.index ^^I104m#DELIM  Character typed as surrogate for ESCape
as an "ESCape surrogate" or by pressing an actual ESCape key.
.index ^^I140a#`      ESCape surrogate typeout
In the former case, `` is echoed;  if no ESCape surrogate
has been designated, $$ is echoed.
See the EE flag and the 8192 ET bit, section 5.16, for more information.)
.skip
The two _<DELIM_>s must be typed successively.
If any other character is typed
in between the two _<DELIM_>s (even if subsequently DELETEd),
then the two _<DELIM_>s might be treated simply as two _<DELIM_>s
to be entered into the command string
rather than as an immediate action command.
.skip
If you need to enter two _<DELIM_>s into a command line,
as in the case where you want to use the FSstring`` command
to delete a string,
you can keep TECO from recognizing `` as an immediate action command.
Type _<DELIM_>_<SPACE_>_<DELETE_>_<DELIM_> and
then continue entering the remainder of
your command string.
.skip
A single _<DELIM_> character can also be an immediate action command
(when typed immediately after TECO's prompting asterisk, see section 4.2).
Elsewhere, a single _<DELIM_> performs no immediate action.
.skip 1
.indent -15
.index ^^I177##DEL    Delete last character typed in
_<DELETE_>	Typing a DELETE character (DEL or RUBOUT on some
terminals) deletes the last character typed. DELETE can be typed
repeatedly to erase multiple characters. TECO echoes the deleted
character whenever a DELETE is typed,  indicating  to
you that the character has been rubbed out.  If you are
doing your editing on a scope terminal, then the action of this key is
different: the character that has been rubbed out
will disappear from the screen of your editing terminal
and the cursor will be moved back one position.
.skip
If you delete a line feed,
form feed, or vertical tab, the cursor will move up the screen and position
itself at the end of the text that immediately preceded the line feed,
form feed, or vertical tab.
.skip 1
.indent -15
.index ^^I003##_^C     Stop execution
_<CTRL/C_>	_<CTRL/C_> echoes as _^C (Caret-C) and aborts
the entering of the command string.
The exact action of the _<CTRL/C_> key depends on the operating
system being used (See appendices).
.skip 1
.indent -15
.index ^^I025##_^U     Kill command line
_<CTRL/U_>	_<CTRL/U_> causes the current line
of
the current command line to be deleted. TECO echoes the character
as _^U followed by _<CR_>_<LF_> and an asterisk prompt.
If you are using a scope terminal,
the visible action of typing this key is different.
The current line physically disappears from the screen and the cursor is
positioned back at the beginning of the line.
.skip 1
.indent -15
.index ^^I007a#_^G_^G   Kill command string
_<CTRL/G_>_<CTRL/G_>
.br
Typing two consecutive _<CTRL/G_> characters
causes all commands which have been
entered but not executed to be erased. (If the terminal has
a bell, it will ring.) This command is used to erase an entire
command string. A single _<CTRL/G_> character  is not
a special character.
.skip 1
.indent -15
.index ^^I007b#_^G_<sp_> Retype current command line
_<CTRL/G_>_<space_>
.br
_<CTRL/G_> followed by a space
causes the line currently being entered into the command string to be retyped.
.skip 1
.index ^^I007c#_^G*    Retype current command input
.indent -15
_<CTRL/G_>*	_<CTRL/G_>
followed by an asterisk causes all the lines typed by the user
from the last TECO prompt (the asterisk) to be retyped.
.skip 1
.indent -15
.index ^^I015##CR     End input line_; Ignored in commands
_<CR_>	Typing a carriage return enters a carriage return
followed by a line feed into the command string.  To enter a carriage return
without a line feed, type _<CR_>_<DELETE_>.
.skip 1
.indent -15
.index ^^I032z#_^Z_^Z_^Z Immediate exit from TECO
_<CTRL/Z_>_<CTRL/Z_>_<CTRL/Z_>
.break
RSX-11 TECO uses the triple _<CTRL/Z_> command as an immediate action command.
See the appropriate appendix for more details.
.left margin 5
.skip 1
The _<CTRL/Z_> character is used as an end-of-file terminator
in some contexts on some operating systems.
While its presence is usually harmless in disk files,
it may cause premature end of file if the file is copied to other media
(e.g., paper tape).

.page
.index ^^O402##        4.2         Immediate Action Commands
4.2 Immediate Action Commands

.skip 1
.center
TABLE 4-2: IMMEDIATE ACTION COMMANDS
.blank
The following commands take effect if (and only if)
they are typed as the very first keystroke(s) after
TECO issues its asterisk prompt.
.skip
The _<LF_>, _<DELIM_>, and _<BS_> commands are also described in
Chapter 1, where they are introduced as "immediate inspection commands".
.skip
.lm 20
.i -15
CHARACTER	EXPLANATION
.skip
.indent -15
.index ^^I077i#?      Type out command string in error
?	If the previous command aborted because of an error, this immediate
action command causes TECO to print the erroneous command string from the
beginning of the current macro level up to and including the character that
caused the error.
.skip
.indent -15
.index ^^I057i#/      Type detailed explanation of error
/	If TECO has just printed an error message, type this immediate
action command to receive a more detailed explanation of the error.
(On VAX/VMS, a HELP command is also available.  See section G.13.)
.break
[In TECO-11, implemented only on VAX/VMS]
.skip
.indent -15
.index ^^I012i#LF     Advance and type one line
_<LF_>	Typing this immediate action command, line feed,
as the first keystroke after TECO's prompt
causes TECO to immediately execute an LT command.
This aid lets you "walk through" a file on a non-scope terminal.
(If the EV flag is non-zero, then the T portion of this command
is redundant and therefore is not performed.)
If you are already positioned at the end of the text buffer,
TECO-11 will not type out anything.
.break
[Not in TECO-10]
.skip
.indent -15
.index ^^I104p#DELIM  Advance and type one line
_<DELIM_>	Typing this immediate action command, _<DELIM_>,
is synonymous with typing the _<LF_> immediate action command
(described above).
This command is available on TECOs offering the ESCAPE surrogate.
.break
[TECO-11 only]
.skip
.indent -15
.index ^^I010i#BS     Back up and type one line
_<BS_>	Typing this immediate action command, backspace,
(as the first keystroke
after TECO's prompt) causes TECO to immediately execute a -LT command.
(If the EV flag is non-zero,
then the T portion of this command is redundant and
therefore is not performed.)
.break
[Not in TECO-10]
.skip
.indent -15
.index ^^I027b#_^W     Refresh scrolled display
_^W	Typing this immediate action command, _<CTRL/W_>,
as the first keystroke after TECO's prompt
when split-screen scrolling is active
causes TECO to re-paint the buffer display portion of the screen.
(Split-screen scrolling is active when 7:W is non-zero.)
This command is useful if the display has been "confused"
by characters from a broadcast message or type-ahead.
It is also useful in conjunction with ED's 128 bit
(which inhibits all automatic scroll display updating).
.break
[TECO-11 only]
.skip
.indent -15
.index ^^I052i#*q     Save last command in Q-register q
*q	When an asterisk followed immediately by a Q-register name
(any alphanumeric character, here represented by q)
is the first keystroke after TECO's prompt,
TECO places  the previous command
string into Q-register q.
[In TECO-8, only the *Z command is permitted, and TECO will automatically
type the Z.]  Note that since *q is itself an immediate action command,
it may not be edited with other immediate action commands.  In other words,
you can't use DELETE to delete an incorrectly typed *.
.break
.skip 1
[In TECO-10, *q must be followed by _<DELIM_>_<DELIM_>.]
.lm 5

.page
.index ^^O403##        4.3         Introduction to Macros
4.3 Introduction to Macros

.skip 1
One of TECO's powerful features is the ability to
execute ASCII text stored in a Q-register as a command string.
This is called the "macro" facility, and a command string
so stored and executed is called a "macro".
.skip
A Q-register may be loaded with a macro by any of several means:
directly from the console (via the _^Uq command), by extraction
from the text buffer (via the X command), or by these or other
Q-register loading commands contained in an indirect file or
even in another macro.
.skip
Particularly handy is the "*" immediate action command,
discussed in a preceding section.
When you type this command as the first character following
TECO's asterisk prompt, whatever immediately preceding command
you just typed at the console is saved in a Q-register.
You can then use that command again (and repeatedly) by
using the Mq command.
.skip
You invoke a macro by using the Mq command, where "q"
is the name of the Q-register in which the macro text
has been stored.
.skip
A related facility is that of immediate ESCAPE-sequence commands,
which is discussed in the following section.

.page
.index ^^O404##        4.4         Immediate ESCAPE-Sequence Commands
4.4 Immediate ESCAPE-Sequence Commands [TECO-11 only]

.skip 1
Certain keys on many newer terminals generate ESCape sequences.
TECO provides a facility by which you can cause the pressing of one
of these keys at the prompting asterisk to be interpreted as an
immediate command.
When this facility is enabled, a key such as one of the cursor control
keys can cause TECO to immediately execute commands (previously stored
as a macro).
The single keystroke suffices;  no _<DELIM_>_<DELIM_> is needed.
.skip
The 32 bit in the ED flag enables immedate ESCape-sequence commands.
When ED's 32 bit is non-zero, and the first character TECO receives
after its * prompt is ESCape, TECO will automatically read further characters
and attempt to decode an ESCape sequence.
The decoded ESCape sequence is resolved into a pair of numeric values,
which are then passed to the macro residing in global Q-register A.
.skip
The two numeric values are a type code and a value code.
They are passed to the macro in QA by an effective _<type_>,_<value_>MA``.
The macro in QA can retrieve them by code such as:
.nofill
        UA                    ! Save the _<value_> code in QA !
        @O!T0,T1,T2,T3!       ! Dispatch on _<type_> code !
        !T0!                  ! Type 0 codes come here !
          QA@O!V0,V1,V2...
.fill
.skip
The _<type_> and _<value_> codes are as follows.
.skip
.nofill
Type 0 - ESCape followed by a control character
    The _<value_> code is the control character's code (0 - 31.)

Type 1 - ESCape followed by a letter (e.g., ESC A), -or-
         ESCape followed by [ then a letter (e.g., ESC [ A), -or-
         CSI    followed by a letter (e.g., CSI A), -or-
         ESCape, O, then an uppercase letter (e.g., ESC O A)
    The _<value_> code is the letter's ASCII value,
    trimmed to 5 bits (that is, a value of 0 through 31)
    Common keys of _<type_> 1 are:
         Up arrow      _<type_> 1    _<value_> 1
         Down arrow    _<type_> 1    _<value_> 2
         Left arrow    _<type_> 1    _<value_> 4
         Right arrow   _<type_> 1    _<value_> 3
         PF1           _<type_> 1    _<value_> 16
         PF2           _<type_> 1    _<value_> 17
         PF3           _<type_> 1    _<value_> 18
         PF4           _<type_> 1    _<value_> 19
         ENTER         _<type_> 1    _<value_> 13

.fill
.tp 6
.nofill
Type 2 - ESCape followed by ? then a letter (e.g., ESC ? p), -or-
         ESCape, O, then an lowercase letter (e.g., ESC O p)
    The _<value_> code is the letter's ASCII value,
    trimmed to 5 bits (that is, a value of 0 through 31)
    Common keys of _<type_> 2 are:
         Keypad ,      _<type_> 2    _<value_> 12
         Keypad -      _<type_> 2    _<value_> 13
         Keypad .      _<type_> 2    _<value_> 14
         Keypad 0      _<type_> 2    _<value_> 16
         Keypad 1      _<type_> 2    _<value_> 17
         Keypad 2      _<type_> 2    _<value_> 18
         Keypad 3      _<type_> 2    _<value_> 19
         Keypad 4      _<type_> 2    _<value_> 20
         Keypad 5      _<type_> 2    _<value_> 21
         Keypad 6      _<type_> 2    _<value_> 22
         Keypad 7      _<type_> 2    _<value_> 23
         Keypad 8      _<type_> 2    _<value_> 24
         Keypad 9      _<type_> 2    _<value_> 25

Type 3 - ESCape followed by [ then a digit string then ~ -or-
         CSI    followed by a digit string then ~
    The _<value_> code is the value of the digit string.
    All of the LK201 keyboard's editing and function
    keys generate sequences of this format.
.fill

.page
.index ^^O405##        4.5         Operating System Character Filters
4.5 Operating System Character Filters

.skip 1
.lm 5
In general, TECO accepts any ASCII character,
whether encountered in a macro, read from an indirect file,
or entered directly via a command string from the terminal.
(Note that TECOs other than TECO-11 strip the eighth bit on command input.)
In addition, some operating systems filter out certain characters typed at
a terminal and do not pass them to TECO.
So that you can be aware of the possible difficulty of entering
these characters directly into a TECO command string,
we list them below in Table 4-5.
Note that these characters are still valid characters to TECO,
but may have to be entered indirectly, such as by using the nI` command.
.skip
.lm 15
.indent -5
_^T Note:
.break
On some operating systems, the _^T character is an immediate action
command (to the operating system),
and invokes a one-line status report.
.s
Where reference is made below in Table 4-5 to this note,
TECO causes the operating system's recognition of _^T
to be turned off if TECO ever asks the user for input.
The original state of _^T handling is restored upon exit.
MUNGed TECO macros that never ask the user for input do
not affect the operating system's handling of _^T.
.page
.lm 20
TABLE 4-5: OPERATING SYSTEM CHARACTER FILTERS
.ts 20,32,42
.skip
.indent -15
SYSTEM	CHARACTER	SYSTEM's USE
.skip
.indent -15
RT-11	_^A	VT11 support [only if GT ON]
.break
_^B	Background control [F/B systems only]
.break
_^E	VT11 support [only if GT ON]
.break
_^F	Foreground control [F/B systems only]
.break
_^O	Output control
.break
_^Q	Terminal Synchronization
.break
_^S	Terminal Synchronization
.skip
.indent -15
RSTS/E	_^O	Output control
.break
_^Q	Terminal Synchronization
.break
_^S	Terminal Synchronization
.break
.skip
.indent -15
VAX/VMS	_^O	Output control
.break
_^Q	Terminal Synchronization
.break
_^S	Terminal Synchronization
.break
_^T	System status (see _^T Note above)
.break
_^X	Cancel Type-ahead
.break
_^Y	Process Interruption
.skip
.indent -15
RSX-11	_^O	Output control
.break
_^Q	Terminal synchronization
.break
_^S	Terminal synchronization
.break
_^X	Task control [RSX-11D only]
.skip
.indent -15
TOPS-10	_^C_^C	Job interruption
.break
_^O	Output control
.break
_^Q	Terminal synchronization
.break
_^S	Terminal synchronization
.break
_^T	System status
.skip
.indent -15
TOPS-20	_^C_^C	Job interruption
.break
_^O	Output control
.break
_^Q	Terminal synchronization
.break
_^S	Terminal synchronization
.break
_^T	System status
.skip
.indent -15
OS/8	_^B	Background control [F/B systems only]
.break
_^F	Foreground control [F/B systems only]
.break
_^Y	Reboot indicator [F/B systems only]
.lm 5

.page
.subtitle #####Command Descriptions
.index ^^O5####CHAPTER 5        COMMAND DESCRIPTIONS
.center
CHAPTER 5
.skip 2
.center
COMMAND DESCRIPTIONS
.skip 1
.skip 1
This chapter presents a detailed description
of the full TECO command set,
functionally organized. It assumes that the reader is
familiar with the elementary TECO commands presented earlier.
.skip 1
In the sections following, the letters "m" and "n" are used in command
formats to represent  numerical arguments. These may be either simple
integers or complex expressions.
The letter "q" represents any Q-register.
.page
.subtitle #####File Selection Commands
.index ^^O501##        5.1      FILE SPECIFICATION COMMANDS
5.1 FILE SPECIFICATION COMMANDS
.skip 1
You must specify an input file whenever you want TECO
to accept text from any source other than the terminal.  You must
specify an output
file whenever you want to make a permanent change to the
input file. Input and output files are selected by means
of file specification commands.
.skip 1
File specification formats are operating system dependent and are fully
described in  the operating
characteristics appendices at the end of this manual.
.skip 1
Almost every editing job begins with at least one file specification
command. Additional file specification commands may be executed
during an editing job whenever required; however, TECO will
keep only one input file and one output file selected at a time.
.skip 1
TECO-11 recognizes two input and two output "streams" called
the primary and secondary streams.
The primary input and output
streams are initially selected when TECO is invoked.
Most file selection commands, and all of the other TECO commands
(page manipulation, etc.),  operate
on the currently selected input and/or output stream.
.skip 1
The following sections list all of the file specification commands.
Unless otherwise noted, all of these commands
leave the text buffer unchanged.
Examples of some of these commands appear in Chapter 1.

.subtitle #####File Opening Commands
.skip 2
.index ^^O5011#        5.1.1       File Opening Commands
5.1.1 File Opening Commands
.skip 1
The following commands are used to open files for input and output:
.skip 2
.center
TABLE 5-1A:##FILE SPECIFICATION COMMANDS
.skip 1
.left margin 20
.ts 20
.indent -15
COMMAND	#####FUNCTION
.skip 1
.indent -15
.index ^^I105b#EB     Open input and output
EBfilespec`	Edit Backup. This command is recommended for most
editing jobs. It is used for files
on file-structured devices only. It opens the specified file
for input on the currently selected input stream and for output
on the currently selected output stream.
The EB command also keeps the unmodified file (the latest copy
of the input file) available to the user; details of this process are
system dependent  (See appendices).
.skip 1
.indent -15
.index ^^I105r#ER     Open input file
ERfilespec`	Edit Read. Opens a file for input on the currently
selected input stream.
.skip 1
.indent -15
.index ^^I105w#EW     Open output file
EWfilespec`	Edit Write. Opens a file for output on the currently selected
output stream.
.skip 1
.indent -15
:EBfilespec`	Executes the EB
command, and returns a numeric value.  -1 returned indicates success:  the
file is open for input.  A 0 indicates the specified file could not be
found, and no error message is generated.
Other errors (e.g., hardware errors, protection violations, etc.)
generate messages and terminate command execution as usual.
.skip 1
.indent -15
:ERfilespec`	Executes the ER
command, and returns a numeric value. See the :EB command, above.
.left margin 5

.subtitle #####File Specification Switches
.PAGE
.index ^^O5012#        5.1.2       File Specification Switches
5.1.2 File Specification Switches
.skip 1
Various system-dependent switches (qualifiers) of the form /SWITCH
can be used with the file specification in ER, EW, and EB commands.
These switches  are listed below.
Consult the operating system specific appendices for further details.
.skip
In addition, on some systems switches are provided for
convenient handling of BASIC-PLUS or BASIC-PLUS-2 source files
which use _<LF_> or _& characters for program line continuation.
See Appendix J for more information.
.skip 2
.center
TABLE 5-1B: SWITCHES ON FILE SPECIFICATIONS
.skip 1
.left margin 30
.ts 15,30
.indent -25
System	Switch	Meaning
.skip 1
.indent -25
OS/8	/S	Ignore end-of-file (_<CTRL/Z_>s) on input.
.BREAK
(SUPER TECO mode)
.skip 1
.indent -25
RSTS/E	/B	Read and write with unfiltered 8-bit
.indent -15
/n	Handle BASIC-PLUS-x line continuation
.indent -15
/B+	Handle BASIC-PLUS line continuation
.indent -15
/	Same as /B+
.indent -15
/B2	Handle BASIC-PLUS-x line continuation
.indent -15
/CLUSTERSIZE:n	Specifies output file cluster size
.indent -15
/MODE:n	Use non-standard open mode
.skip
.indent -25
VAX/VMS,	/B2	Handle BASIC-PLUS-x line continuation
.indent -25
RSX-11	/CR	Implied carriage control
.indent -15
/-CR	No (internal) carriage control
.indent -15
/FT	FORTRAN carriage control
.indent -15
/FTN	Same as /FT
.indent -15
/RW	Rewind magtape before opening file
.i-15
/SH	Open the file in shared mode
.i-15
/SHR	Same as /SH
.i-15
/STM	Stream format
.i-15
/VAR	Variable format
.skip
.indent -25
TOPS-10	/APPEND	Append to existing output file (EW only)
.indent -15
/ASCII	File is ASCII
.indent -15
/GENLSN	Generate line sequence numbers
.indent -15
.indent -15
/NOIN	Don't put user type-in into log file
.indent -15
/NONSTD	Open DECtape in non-standard mode
.indent -15
/NOOUT	Don't put TECO's type out into log file (EL only)
.indent -15
/OCTAL	Read file in octal
.indent -15
/PROTECT:n	Specify protection code
.indent -15
/SIXBIT	Read file in pure SIXBIT
.indent -15
/SUPLSN	Suppress line sequence numbers
.lm 5

.subtitle #####File Close and Exit Commands
.skip 2
.index ^^O5013#        5.1.3       File Close and Exit Commands
5.1.3 File Close and Exit Commands
.skip 1
The following commands are used to close files and exit from TECO:
.skip 2
.center
TABLE 5-1C: FILE CLOSE AND EXIT
.left margin 20
.ts 20
.skip 1
.indent -15
.index ^^I105c#EC     Close out (copy in to out and close)
EC	Moves the contents
of the text buffer, plus the remainder of the current input
file on the currently selected input stream,
to the current output file on the currently selected output stream;
then closes those input and output files.
Control remains in TECO.
EC leaves the text buffer empty.
.skip 1
.indent -15
.index ^^I105f#EF     Close output file
EF	Closes the current output file on the currently
selected output stream. The EF
command does not write the current contents of the buffer to the file
before closing it.
.skip 1
.indent -15
EG`	Performs the same function as
the EC command, but then exits from TECO and re-executes the last COMPIL
class command (.COMPILE, .LINK, .EXECUTE, etc.)
.break
[Same as EX in TECO-11]
.skip 1
.indent -15
.index ^^I105g#EG     Close out and exit with command
EGtext`	Performs the same function as the EC
command, but then exits from TECO and passes "text" to the
operating system as a command string to be executed (see appendices).
.skip 1
.indent -15
.index ^^I105h#:EG    Execute operating system function
:EGcmd args`	Performs operating system function "cmd" passing that
function "args" as arguments.
This command always returns a value as follows:
.lm +7
.skip 1
.i -7
#-1####Function "cmd" successfully performed.
.break
.i -7
##0####Function "cmd" is unsupported.
.break
.i -7
Other##Function "cmd" attempted, but failed.  The returned value
is the failure status.
.lm -7
.skip 1
There are four functions that are commonly defined:
.lm +7
.skip 1
.i -7
INI####Locates the user's private initialization TECO macro.
.break
.i -7
LIB####Defines the user's private library of TECO macros.
.break
.i -7
MEM####Read/write TECO's last edited file memory.
.break
.i -7
VTE####Locates the user's private scope editing TECO macro.
.lm -7
.skip 1
These four functions work as follows:
.lm +14
.skip 1
.i -14
:EGcmd`#######Loads Q-register * with the requested information.
If there is no information (e.g., no user private scope editing TECO macro)
then Q-register * is set to the null string.
.skip 1
.i -14
:EGcmd#`######Clears the information holder. Subsequent :EGcmd` commands
will set Q-register * to the null string.
.skip 1
.i -14
:EGcmd#text`##Sets the information holder to "text".  Subsequent :EGcmd`
commands will set Q-register * to "text".
.lm -14
.skip 1
Consult the appendices for details.
.skip 1
.indent -15
.index ^^I105k#EK     Kill output file
EK	Kill the current output file on the
currently selected output stream. This command, which
purges the output file without closing it, is useful
to abort an undesired edit.  Executing the EK
command after an EW which is superseding an existing
file leaves the old file intact.
The EK command also "undoes" an EB command.
(See appendices for details.)
.skip
.indent -15
.index ^^I105l#EL     Open log file
ELfilespec`	Open the specified file for output as a log file.
Any currently open log file will be closed.  If the /APPEND switch is
given, future logs will append to the file (if it already exists).
The default is to supersede.  All type-in to TECO and all type out
from TECO goes into the log file.  The log file is automatically
closed by the EX and _<CTRL/C_>_<CTRL/C_> TECO commands.
.break
[TECO-10 only]
.index ^^I105x#EX     Close out and exit
.skip 1
.i-15
EX	Performs the same function as the EC
command, but then exits from TECO.
For safety reasons,
this command is aborted if there is text in the text buffer
but no output file is open.
To exit TECO after just looking at a file, use the command string HKEX.
.skip
.indent -15
.index ^^I105z#EZ     Zero output tape
EZfilespec`	This command is useful for outputting
to magtapes and DECtapes,
on which it initializes (zeros) the specified output device before
switching the ouput to the primary output stream. In the case of
a magtape, this command rewinds the magtape to load point.
If the output device is a disk,
this command works exactly like the EW command.
.break
[TECO-10 only]
.skip 1
.indent -15
.index ^^I003##_^C     Stop execution
_<CTRL/C_>	The _<CTRL/C_> (caret/C) command terminates
execution of the current command string and returns control to TECO's prompt.
(Under TECO-8, the _<CTRL/C_> command currently acts as _<CTRL/C_>_<CTRL/C_>.)
.skip 1
.indent -15
_<CTRL/C_>_<CTRL/C_>
.br
The _^C_<CTRL/C_> command
causes an immediate abort and exit from TECO.
Currently open files are not necessarily closed. See the
appendices for more details.
Note that the second _<CTRL/C_> may not be entered in up-arrow mode.

.ts 20
.left margin 5
.subtitle #####Secondary Stream Commands
.skip 2
.test page 20
.index ^^O5014#        5.1.4       Secondary Stream Commands
5.1.4 Secondary Stream Commands
.skip 1
TECO-11 provides secondary input and output streams. These permit
the user to have two input and two output files open at the same time,
and to switch processing back and forth between them. Each stream
maintains its file position independently, so that one can read from one
stream (for example), switch to the other, and then switch back to the
first and resume from where one left off.
In addition, a separate command stream allows one to execute TECO commands
from a file without disturbing either input stream.
.s1
The following commands manipulate the secondary input and output streams:
.skip 2
.center
TABLE 5-1D: SECONDARY STREAM COMMANDS
.center
[Not in TECO-8 or TECO-10]
.skip 1
Input commands (do not open or close any file; do not change the text buffer):
.skip 1
.lm20.indent -15
.index ^^I105p#EP     Select secondary input stream
EP	Switches the input to the
secondary input stream.
.skip 1
.indent -15
.index ^^I105r#ER     Open input file
ER`	Switches the input to the
primary input stream.
.skip 1
.lm5
Output commands (do not open or close any file;
do not change the text buffer):
.skip 1
.lm20
.indent -15
.index ^^I105a#EA     Select secondary output stream
EA	Switches the output to the
secondary output stream.
.skip 1
.indent -15
.index ^^I105w#EW     Open output file
EW`	Switches the output to the
primary output stream.
.skip 1
.lm5
Indirect file commands:
.skip 1
.lm20
.indent -15
.index ^^I105i#EI     Open indirect command file
EIfilespec`	Opens a file as an indirect command file, so that
any further TECO requests for terminal input will come from
this file. At end-of-file, or upon TECO's receipt of any error message,
the indirect command file will be closed and
terminal input will be switched back to the terminal.
Note that this command only presets where input will
come from; it does not "splice" the file's data into the current
command string.
.skip 1
While end-of-file closes the indirect command file, it does not automatically
start execution of commands.
Execution will begin only upon TECO's receipt of two
adjacent _<ESC_>s.
For instance, assume that FOO.TEC contains valid TECO commands,
that it presets a return to your terminal with the customary EI`,
but that it does not contain an _<ESC_>_<ESC_> pair.
If you type EIFOO``, TECO will read in the contents of FOO.TEC
(building a command string) and attempt to continue building the
command string by reading from your terminal when end of file on
FOO.TEC is encountered.
Things will appear "very quiet" until it occurs to you
to type _<DELIM_>_<DELIM_> and so begin execution of
the (composite) command string.
.skip 1
All commands encountered in the indirect file will have their normal
TECO meaning (as opposed to any immediate action meaning).  For example,
a _<CTRL/U_> encountered in an indirect file will not erase the command
line in which it occurs.  Instead, it will be treated as the TECO _^Uqtext`
command.  The only exception to this rule is the _<ESC_>_<ESC_> command,
which directs TECO to execute the preceding command string and then return to
the indirect file at the point following the _<ESC_>_<ESC_>.
(We can say _<ESC_> explicitly here, because _<DELIM_> can be other
than ESCape only in commands typed at the console.)
.skip 1
.indent -15
EI`	If an indirect command file is active,
this command will close it and resume terminal input from the terminal.
Any portion of the file after a double _<DELIM_>
which has not yet been read is discarded.
This command has no effect  if no indirect file is already open.

.left margin 5
.subtitle #####Wildcard Commands
.page
.index ^^O5015#        5.1.5       Wildcard Commands
5.1.5 Wildcard Commands
.skip 1
.ts 20
TECO-11 supports wild card file processing with a set of special commands,
to allow TECO programs to operate on a set of files.
.skip 2
.center
TABLE 5-1E: WILDCARD COMMANDS
.center
[Not in TECO-8 or TECO-10]
.left margin 20
.skip 1
.indent -15
.index ^^I105n#EN     Wildcard lookup
ENfilespec`	This command presets the "wild card" lookup
filespec. It is only a preset; it does not open, close, or try to find
any file.
The "wild card" lookup  is the only filespec that can contain any wild card
notations. See the appendices for the allowed wild fields in each
operating system.
.skip 1
.indent -15
EN`	Once the wild card lookup filespec has been preset, executing
this command will find the next file that matches the preset wild card
lookup filespec and will load the filespec buffer with that file's name.
The G* command (see Appendix C, section C.1.1) can be used to
retrieve the fully expanded filespec. When no more occurences
of the wild card filespec exist, the ?FNF error is returned.
.skip 1
.indent -15
:EN`	Executes the EN`
command, and returns a numeric value. A -1 indicates that another match
of the wild card filespec exists and has been loaded into the filespec
buffer. A 0 indicates no more occurences exist. No error message is
generated.
.lm5
.skip 1
The filespec argument to the file selection commands in TECO-11 can use the
string building characters described in Table 5-8A (see section 5.8).
The _<CTRL/E_>Q* construct, described in Appendix C,
is especially useful in TECO-11.
.subtitle #####Direct I/O to Q-Registers
.s2
.index ^^O5016#        5.1.6       Direct I/O to Q-Registers
5.1.6 Direct I/O to Q-Registers
.skip 1
TECO-10 provides commands to do I/O directly to and from the Q-registers,
allowing I/O to bypass the text buffer.
.skip 2
.center
TABLE 5-1F: DIRECT I/O TO Q-REGISTERS
.center
[Not in TECO-8 or TECO-11]
.SKIP
.lm20
.indent -15
.index ^^I105q#EQq    Read file into Q-register q
EQqfilespec`	Read specified file into Q-register q.
No _<NULL_>s or _<FF_>s
are removed from the file, except that trailing _<NULL_>s are discarded.
The only switch permitted on the filespec in this command
is the /DELETE switch, which causes TECO to delete the file after reading it,
providing that the file is less than 500 characters long.
This command supports the pseudo-device TMP:, for TMPCOR.
Consult the appropriate
appendix for details.
.break
[TECO-10 only]
.skip
.indent -15
.index ^^I105%#E%q    Write Q-register q into a file
E%qfilespec`	Create the specified file.  The contents of the file will
be the contents of Q-register q with no _<NULL_>s deleted.  No switches
are permitted on the filespec of this command.
This command supports the pseudo-device TMP:, for TMPCOR.
Consult the appropriate
appendix for details.
.break
[TECO-10 only]
.left margin 5

.page
.subtitle #####Page Manipulation Commands
.index ^^O502##        5.2      PAGE MANIPULATION COMMANDS
5.2 PAGE MANIPULATION COMMANDS
.skip 1
The following commands permit text to be
read into the text buffer from an input file or written
from the buffer onto an output file.
.skip 1
All of the input commands listed in this table assume that the
input file is organized into pages small enough to fit
into available memory.
If any page of the input file contains more
characters than will fit into available
memory, the input command will continue
reading characters into the buffer until
a line feed is encountered when the buffer is about 3/4 full.
See the appendices for more details.
Special techniques for handling pages larger than the buffer
capacity will be presented later in this chapter.
.skip 2
.center
TABLE 5-2:##PAGE MANIPULATION COMMANDS
.skip 1
.left margin 15
.ts 15
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
APPEND commands:
.skip 1
.indent -10
.index ^^I101##A      Append to buffer
A	Appends the next page of the input file to the
contents of the text buffer, thus combining the two pages of text
on a single page with no intervening form feed character.
This command takes no argument.  To perform n Appends, use the
n_<A_> construct.  Note that nA is a completely different command.
.skip 1
.indent -10
:A	Equivalent to the A command except that a value is returned.
-1 is returned if the append succeeded, and 0 is returned if the
append failed because the end-of-the-input-file had previously
been reached (_^N flag is -1 at start of this command).
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I101o#n:A    Append n lines to buffer
n:A	Appends n lines of text from the input file to the
contents of the text buffer.
The value of n must not be negative.
A value is returned indicating whether or not there were in fact n lines
remaining in the input file.  -1 is returned if the command succeeded.
0 is returned if end-of-file on the input file was encountered
before all n lines were read in.  Note that the command can succeed and yet
read in fewer than n lines in the case that the text buffer fills up.
.break
[Not in TECO-8]
.skip 1
.indent -10
PAGE Commands:
.skip 1
.indent -10
P	Writes the contents of the buffer onto the
output file, then clears the buffer
and reads the next page of the input file into the buffer.
A form feed is appended to the output file if the last page read
in (with a P, Y, or A command) was terminated with a form feed.
.skip 1
.indent -10
:P	Same as the P command except that a value is returned.
-1 is returned if the command succeeded.  0 is returned if the command
failed because the end-of-file on the input file had been reached
prior to the initiation of this command.
The command string _<:P;_> takes you to end of file.
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I120##nP     Advance or back up n pages
nP	Executes the P command n times,
where n must be a non-zero positive integer.
.skip 1
In TECO-11 on VAX/VMS, n can be a negative integer (and -P means -1P).
A -nP command will back up n pages.
.skip 1
.indent -10
n:P	Executes the :P command n times,
where n must be a non-zero positive integer.
In TECO-11 on VAX/VMS, n can be a negative integer (and -:P means -1:P).
This command returns 0 when another page could not be
backed up because beginning of file had been reached.
.break
[Not in TECO-8]
.skip 1
.indent -10
PW	Write the contents of the buffer onto the output file
and append a form feed character.  The buffer is not cleared
and the pointer position remains unchanged.
.skip 1
.indent -10
.index ^^I120w#nPW    Write buffer n times
nPW	Executes the PW command n times, where n must
be a non-zero positive integer.
.skip 1
.indent -10
.index ^^I120x#m,nPW  Write out chars m to n
m,nPW	Writes the contents of the buffer between pointer positions m and n
onto the output file. m and n must be positive integers.
A form feed is not appended to this
output, nor is the buffer cleared. The pointer position
remains unchanged.
.skip 1
.indent -10
.index ^^I120a#m,nP   Write out chars m to n
m,nP	Equivalent to m,nPW.
.skip 1
.indent -10
HPW	Equivalent to the PW command except that a form
feed character is not appended to the output.
.skip 1
.indent -10
HP	Equivalent to HPW.
.skip 1
.indent -10
YANK commands:
.skip 1
.indent -10
.index ^^I131##Y      Read into buffer
Y	Clears the text buffer and then reads the next
page of the input file into the buffer.
Because the Y command DESTROYS the current text buffer,
its use can result in the loss of data, and is subject
to "Yank protection" (see ED flag in section 5.14).
.skip 1
.indent -10
-Y	Clears the text buffer and then reads the previous
page of the file being edited back into the buffer.
Because the Y command DESTROYS the current text buffer,
its use can result in the loss of data, and is subject
to "Yank protection" (see ED flag in section 5.14).
.break
[TECO-11 on VAX/VMS only]
.skip 1
.indent -10
:Y	Same as the Y command but a value is returned.
-1 is returned if the Yank succeeded.
0 is returned if the Yank failed because the end-of-file
had been reached on the input file prior to the initiation of this command.
.break
[Not in TECO-8]
.skip 1
.indent -10
-:Y	Same as the -Y command but a value is returned.
-1 is returned if the Yank succeeded.
0 is returned if the Yank failed because the beginning of file
had been reached on the file being edited prior to
the initiation of this command.
.break
[TECO-11 on VAX/VMS only]
.skip
.indent -10
.index ^^I105y#EY     Read without yank protection
EY	Same as the Y command, but its action is always permitted
regardless of the value of the Yank Protection bit in the ED flag.
Remember that Yank DESTROYS the current buffer;
there's no way to get it back!
.skip
.indent -10
:EY	Same as the :Y command, but its action is always permitted
regardless of the value of the Yank protection bit
in the ED flag.
Remember that Yank DESTROYS the current buffer;
there's no way to get it back!
.break
[Not in TECO-8]
.left margin 5

.page
.subtitle #####Buffer Pointer Manipulation Commands
.index ^^O503##        5.3      BUFFER POINTER MANIPULATION COMMANDS
5.3 BUFFER POINTER MANIPULATION COMMANDS
.skip 1
Table 5-3 describes all of the buffer pointer manipulation
commands These commands may be used to move the pointer
to a position between any two characters in the buffer, but they
will not move the pointer across a buffer boundary.
If any R or C command attempts to move the pointer
backward beyond the beginning of the buffer or forward past the
end of the buffer, the command is ignored and an error message
is printed. If any L command attempts to exceed the buffer
boundaries, the pointer is positioned
at the boundary which would have been exceeded and no error message
is printed.
.skip 2
.center
TABLE 5-3:##BUFFER POINTER MANIPULATION COMMANDS
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
CHARACTER commands:
.skip 1
.indent -10
C	Advances the pointer forward across one character.
.skip 1
.indent -10
.index ^^I103##nC     Advance n characters
nC	Executes the C command n times.
If n is positive,
the pointer is moved forward across n characters. If n is negative,
the pointer is moved backward across n characters. If n is
zero, the pointer position is not changed.
.skip
.i -10
n:C	Same as nC except that a value is returned.  If the command
succeeded, -1 is returned.  If the command failed, the pointer does
not move and a value of 0 is returned.
.break
[TECO-10 only]
.skip
.indent -10
:C	Equivalent to 1:C.
.skip 1
.indent -10
-C	Equivalent to -1C.
.skip 1
.indent -10
JUMP commands:
.skip 1

.indent -10
J	Moves the pointer to a position immediately
preceding the first character in the buffer.
Equivalent to 0J.
.skip 1
.indent -10
.index ^^I112##nJ     Move pointer to "n"
nJ	Moves the pointer to a position immediately following
the nth character in the buffer.
.skip 1
.indent -10
ZJ	Moves the pointer to a position immediately following
the last character in the buffer.
.skip
.i -10
n:J	Same as the nJ command except that if pointer position n
is outside of the buffer, the pointer does not move and a value of 0
is returned.  If the command succeeded, a value of -1 is returned.
.break
[TECO-10 only]
.test page 10
.skip 1
.indent -10
LINE commands:
.skip 1
.indent -10
L	Advances the pointer forward across the next line
terminator (line feed, vertical tab, or form feed)
and positions it at the beginning of the next line.
.skip 1
.indent -10
.index ^^I114##nL     Advance n lines
nL	Executes the L command n times.
A positive value of n advances the
pointer to the beginning of the nth line following its current
position. A negative value of n moves the pointer backwards
to the beginning of the nth complete line preceding its current position.
If n is zero, the pointer is moved to the beginning of the
line on which it is currently positioned.
.skip 1
.indent -10
-L	Equivalent to -1L.
.skip 1
.indent -10
REVERSE commands:
.skip 1
.indent -10
R	Moves the pointer backward across one character.
.skip 1
.indent -10
.index ^^I122##nR     Back up n characters
nR	Executes the R command n times.
If n is positive, the
pointer is moved backward across n characters. If n is negative,
the pointer is moved forward across n characters. If n is zero, the
position of the pointer is not changed.
.skip 1
.indent -10
-R	Equivalent to -1R.
.skip
.i -10
n:R	Same as the nR command except that a value is returned.  If the
command succeeded, then a value of -1 is returned.  If the command failed,
then the buffer pointer is not moved and a value of 0 is returned.
.break
[TECO-10 only]
.skip 1
.indent -10
:R	Equivalent to 1:R.
.left margin 5

.page
.subtitle #####Text Type Out Commands
.index ^^O504##        5.4      TEXT TYPE OUT COMMANDS
5.4 TEXT TYPE OUT COMMANDS
.skip 1
Table 5-4
describes the commands used to type out
part or all of the contents of the buffer for
examination. These commands do not move the
buffer pointer.
.skip 2
.center
TABLE 5-4:##TEXT TYPE OUT COMMANDS
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
T	Types out the contents of the buffer from the
current position of the buffer pointer through and
including the next line terminator character.
.skip 1
.indent -10
.index ^^I124##nT     Type n lines
nT	Types n lines. If n is positive, types
the n lines following the current position of the pointer.
If n is negative, types  the n lines preceding the pointer.
If n is zero, types the contents of the buffer from the
beginning of the line on which the pointer is located up to the pointer.
.skip 1
.indent -10
-T	Equivalent to -1T.
.skip 1
.indent -10
.index ^^I124a#m,nT   Type from m to n
m,nT	Types out the contents of the buffer
between pointer positions m and n.
.skip 1
.indent -10
 .,.+nT	Types out the n characters immediately following the
buffer pointer. n should be greater than zero.
.skip 1
.indent -10
 .-n,.T	Types the n characters immediately
preceding the buffer pointer. n should be greater than zero.
.skip 1
.indent -10
.index ^^I024n#n_^T    Type ASCII character of value n
n_^T	Types out to the console the character whose ASCII value is n.
Whatever normal type-out conversions may currently be in
effect and applicable (such as translation of control characters
to up-arrow format) are done.
The value of n is used modulo 256.
.skip 1
.indent -10
.index ^^I024o#n:_^T	Output binary byte of value n
n:_^T	Outputs to the console the character whose ASCII value is n.
Output is done in "one-shot" binary mode; no type-out translations are done.
The value of n is used modulo 256.
.break
[TECO-11 only]
.skip 1
.indent -10
HT	Types out the entire contents of the
buffer.
.skip 1
.indent -10
V	Types out the current line. Equivalent to 0TT.
.skip 1
.indent -10
.index ^^I126##nV     Type n current lines
nV	Types out n-1 lines on each side of the current line.
Equivalent to 1-nTnT.
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I126a#m,nV   Type m before _& n after current line
m,nV	Types out m-1 lines before and n-1 lines after the current line.
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I001##_^A     Output message to terminal
_^Atext_<CTRL/A_>
.break
Types "text" on the terminal. While the command
may begin with _<CTRL/A_> or Caret/A, the closing character
must be a _<CTRL/A_>.
A numeric argument must not be specified with this command.
.skip 1
.indent -10
@_^A/text/#Equivalent to the _^A command except that the text to
be printed may be bracketed with any character. This avoids the
need for the closing _<CTRL/A_>.
.left margin 5

.page
.skip 1
You may stop or delay the output of any type out command by typing
certain special characters at the keyboard while TECO
is  typing out at the terminal (via a T, V, _^A, or :G command).
These characters are described in the table below:
.skip 2
.center
TABLE 5-4B: TYPE OUT TIME COMMANDS
.skip 1
CHARACTER	#####FUNCTION
.skip
.left margin 18
.ts 18
.indent -13
.index ^^I017t#_^O     Kill terminal output
_<CTRL/O_>	Stops the terminal output
of the current command string.
TECO continues to run and to send characters to the terminal,
however, these characters are suppressed from actually printing on the
terminal.  You can resume printing characters by typing another _<CTRL/O_>
while type out is being suppressed.  TECO cancels this suppression
the next time that it prompts for command string input.  A TECO macro can
cancel the effect of any _<CTRL/O_> by setting the 16's bit in the ET flag
(see section 5.16).
.skip
.indent -13
.index ^^I023##_^S     Suspend terminal output
_<CTRL/S_>	Freezes the terminal output of the current command
string.  TECO stops running the next time it tries to output a character
to your terminal, and waits for you to type a _<CTRL/Q_> to indicate
that output should resume.
.skip 1
.indent -13
.index ^^I021##_^Q     Resume terminal output
_<CTRL/Q_>	Causes TECO to resume any type out that was frozen
via use of the _<CTRL/S_> command described above.  This character
has this effect only while typout is frozen.  Striking any key other
than _<CTRL/Q_> or _<CTRL/C_> while type out is frozen will have
unpredictable results; consult the appropriate operating
system manual.
.blank
.left margin 5
.skip 1
Note that _<CTRL/O_>, _<CTRL/Q_>, and _<CTRL/S_> are legal TECO commands as
well.   When TECO is
not typing on the terminal
(when you are entering a command string, for example),
these characters do not have the effect described above.
They may be entered into your command string just like any other control
character (except under operating systems that filter out these characters).

.page
.subtitle #####Deletion Commands
.index ^^O505##        5.5      DELETION COMMANDS
5.5  DELETION COMMANDS
.skip 1
Table 5-5 summarizes the text deletion commands, which permit
deletion of single characters, groups of adjacent characters,
single lines, or groups of adjacent lines.
.skip 2
.center
TABLE 5-5:##TEXT DELETION COMMANDS
.left margin 15
.skip 1
.ts 15
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
DELETE commands:
.skip 1
.indent -10
D	Delete the first character following the
current position of the buffer pointer.
.skip 1
.indent -10
.index ^^I104##nD     Delete n characters
nD	Execute the D command n times.
If n is positive, the n characters
following the current pointer position are deleted. If n is
negative, the n characters preceding the current pointer
position are deleted. If n is zero, the command is ignored.
.skip 1
.indent -10
-D	Equivalent to -1D.
.skip 1
.indent -10
.index ^^I104a#m,nD   Delete between m and n
m,nD	Equivalent to m,nK.
.break
[TECO-11 only]
.skip 1
.indent -10
n:D	Same as nD but returns a value (-1 if command succeeds, 0 if
command failed because the range of characters to be
deleted fell outside the text buffer).
.break
[TECO-10 only]
.skip
.indent -10
.index ^^I106d#nFD    Search and delete string
FDtext`	Search for the specified text string and delete it. (See search
commands in section 5.7.)
.break
[TECO-10 only]
.skip
.indent -10
@FD/text/ Equivalent to FDtext` except that the _<DELIM_> character
is not necessary.
.skip 1
.i -10
FR`	Equivalent to -nD where n is the length of the last insert, get
or search command.  See the description of the FRtext` command in section
5.6 for more details.
.skip 1
.indent -10
@FR//	Form of the FR` command that does not require use of the _<DELIM_>
character.
.skip 1
.indent -10
KILL commands:
.skip 1
.indent -10
K	Deletes the contents of the buffer from
the current position of the buffer pointer through and
including the next line terminator character.
.skip 1
.indent -10
.index ^^I113##nK     Kill n lines
nK	Executes the K command n times.
If n is positive,
the n lines following the current
pointer position are deleted. If n is negative, the n lines
preceding the current pointer position are deleted. If n is zero,
the contents of the buffer from the beginning of the line
on which the pointer is located up to the pointer is deleted.
It is not an error if more lines are specified than occur
when a boundary of the text buffer is encountered.
.skip 1
.indent -10
-K	Equivalent to -1K.
.skip 1
.indent -10
.index ^^I113a#m,nK   Delete between m and n
m,nK	Deletes the contents of the buffer
between pointer positions m and n.
The pointer moves to the point of the deletion.
The ?POP error message (or its equivalent) is issued if either m or n
is out of range.
.skip
.indent -10
.index ^^I106k#nFK    Search and delete intervening text
FKtext`	Executes a Stext` command then deletes all the text from the
initial pointer position to the new pointer position.
.break
[TECO-10 only]
.skip 1
.i -10
@FK/text/	Equivalent to FKtext` except that "text" may contain any
character, including _<ESCAPE_>, other than the delimiter (shown here as /).
.br
[TECO-10 only]
.skip 1
.indent -10
HK	Deletes the entire contents of the buffer.
.left margin 5

.page
.subtitle #####Insertion Commands
.index ^^O506##        5.6      INSERTION COMMANDS
5.6 INSERTION COMMANDS
.skip 1
Table 5-6 lists all of the text insertion commands.
These commands cause the string of characters
specified in the command to be inserted into the text buffer
at the current position of the buffer pointer. Following
execution of an insertion command, the pointer will be
positioned immediately after the last character
of the insertion.
.skip 1
The length of an insertion command is limited primarily
by the amount of memory available for command string storage.
During normal editing jobs, it is most convenient to limit
insertions to about 10 or 15 lines each. When command string
space is about to run out, TECO will ring the terminal's bell after each
character that is typed.
From the time you hear the first warning bell, you have 10 characters
to type in order to clean up your command line. Attempting to enter too many
characters into the current command string causes
unpredictible results to occur and should be avoided. Use the
DELETE key to shorten the command to permit
its termination.
.skip 1
As explained above in Chapter 4, certain characters
are filtered out by the operating system and/or may perform special functions,
and some characters are immediate action commands and have special effect.
If you want to insert such characters into the text buffer, use the nI`
command described in the following table.  It
will insert any ASCII character into the buffer, including
the special characters that could not ordinarily be typed at a terminal.
.skip 2
.center
TABLE 5-6:##TEXT INSERTION COMMANDS
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
INSERT commands:
.skip 1
.indent -10
.index ^^I111##I      Insert text
Itext`	Where "text" is a string of ASCII characters
terminated by a _<DELIM_>.
The specified text string is entered into the buffer at the current
position of the pointer, with the pointer positioned immediately
after the last character of the insertion.
.skip 1
.indent -10
.index ^^I111n#nI     Insert ASCII character "n"
nI`	This form of the
I command inserts the single character whose ASCII code is n
into the buffer at the current position of the buffer pointer.
(n is taken modulo 256 in TECO-11, modulo 128 in other TECOs.)
nI` is used to insert characters that are not available on
the user's terminal or special characters such as
DELETE which may not be inserted from a terminal with the
standard I command.
.skip 1
.indent -10
@I/text/##Equivalent to the I command except that the text
to be inserted may contain ESCAPE characters.
A delimiting character (shown as a slash here)
must precede and follow the text to be inserted, as described in
Section 3.1.2 above.
.skip 1
.indent -10
n@I//	Equivalent to the nI` command,
but does not require the _<DELIM_> character.
.skip 1
.indent -10
.index ^^I011##TAB    Insert tab and text
_<TAB_>text`#This
command is equivalent to the I command except that the
_<TAB_> is part of the text which is
inserted into the buffer.
.skip 1
.indent -10
.index ^^I106r#FR     Replace last string
FRtext`	Equivalent to "-nDItext`", where "n" is obtained
from the most recent occurrence
of the following: (a) the length of the most
recent string found by a successful search command,
(b) the length of the most recent text string inserted
(including insertions from the FS, FN, or FR commands),
or (c) the length of the string retrieved by the most recent "G" command.
In effect, the last string inserted or found is replaced with "text",
provided that the pointer has not been moved.
After execution of this command, the buffer pointer
is positioned immediately after "text".
.break
[Not in TECO-8]
.skip 1
.indent -10
@FR/text/	Equivalent to "FRtext`", except that "text" may contain
ESCAPE characters.
.break
[Not in TECO-8]
.skip 1
.indent -10
nFRtext`	Equivalent to "nDItext`".
If n is less than 0, characters preceding the buffer pointer
are deleted and replaced with "text".
If n is greater than 0, characters following the buffer pointer
are deleted and replaced with "text".
In either case, the buffer pointer is left positioned immediately
after "text" upon completion of this command.
.break
[TECO-11 only]
.skip 1
.indent -10
n@FR/text/	Equivalent to "nFRtext`", except that "text" may contain
ESCAPE characters.
.break
[TECO-11 only]
.skip 1
.indent -10
m,nFRtext`	Equivalent to "m,nDItext`".
The characters between buffer positions m and n are deleted
and replaced with "text".
The buffer pointer is left positioned immediately
after "text" upon completion of this command.
.break
[TECO-11 only]
.skip 1
.indent -10
m,n@FR/text/	Equivalent to "m,nFRtext`", except that "text" may contain
ESCAPE characters.
.break
[TECO-11 only]
.left margin 5

.page
.subtitle #####Search Commands
.index ^^O507##        5.7      SEARCH COMMANDS
5.7  SEARCH COMMANDS
.skip 1
In many cases, the easiest way to position the buffer pointer
is by means of a character string search. Search commands
cause TECO to scan through text until a specified
string of characters is found, and then
position the buffer pointer at the end of the string.
A character string search begins at the current position
of the pointer. It proceeds  within the current buffer in a forward
or a reverse direction or through the file in
a forward direction.
Specifying a negative numeric argument to the search command causes
the search to proceed backwards from the pointer.
.skip 1
Your last explicitly specified search string is always remembered
by TECO.
If a search command is specified with a null search
string argument, the last explicitly defined search string will
be used. This saves having to retype a complex or lengthy
search string on successive search commands.
.skip 1
Normally searches are "unbounded" - they search from the current
position to the end of the text buffer
(or in the case of backwards searches, until the beginning
of the buffer). A bounded search, however,  will only
search from the current position to the specified bound limit.
If the search string is found within the bound limits, the pointer
is positioned immediately after the last character in the string.
If the string cannot be found, the pointer is left unchanged.
.skip 1
A special case of the bounded search occurs when the upper and lower
bound limits are the same.  In such a case, the search command is called
an anchored search, and is used to compare the search argument against the
character string immediately following the text buffer pointer.
.skip 1
TECO-8 does not permit backward, bounded, or anchored
searches.  This is a general property and will not be specifically mentioned
again in the following tables.

.test page 30
.skip 2
.center
TABLE 5-7A:  SEARCH COMMANDS
.left margin 15
.skip 1
.ts 15
.indent -10
Stext`	Where "text" is a string of
characters terminated by a _<DELIM_>. This command searches
the text buffer for the next occurrence of the specified
character string following the current position of the buffer
pointer. If the string is found, the pointer is positioned
after the last character in the string. If it is not found, the
pointer is positioned immediately before the first
character in the buffer (i.e., a 0J is executed)
and an error message is printed.
.skip 1
.indent -10
.index ^^I123##nS     Local search
nStext`	This command searches for the nth
occurrence of the specified character string, where n is
greater than zero. It is identical to the S command in other
respects.
.skip 1
.indent -10
-nStext`	Identical to "nStext`" except that the search
proceeds in the reverse direction. If the string is not found, the
pointer is positioned immediately before the first character
in the buffer and an error message is printed.
If the pointer is positioned at the beginning of or within an occurrence of
the desired string, that occurrence is considered to be the first
one found. Upon successful completion,
the pointer is positioned after the last character
in the string found.
.skip 1
.indent -10
-Stext`	Equivalent to -1Stext`.
.skip 1
.indent -10
Ntext`	Performs the same function as the S
command except that the search is continued across page
boundaries, if necessary, until the character string is
found or the end of the input file is reached.
This is accomplished by executing an effective P command
after each page is searched. If the
end of the input file is reached, an error message is printed
and it is necessary to close the output file and re-open
it as an input file before any further editing
may be done on that file.
The N command will not locate a character
string which spans a page boundary.
.skip 1
.indent -10
-Ntext`	Performs the same function as the -S command except
that the search is continued (backwards) across page boundaries,
if necessary, until the character string is found or the
beginning of the file being edited is reached.
.break
[TECO-11 on VAX/VMS only]
.skip 1
.indent -10
-nNtext`	This command searches (backwards)
for the nth occurrence of the specified character string.
It is identical to the -N command in other respects.
.break
[TECO-11 on VAX/VMS only]
.skip 1
.indent -10
.index ^^I116##nN     Global search
nNtext`	This command searches for the nth occurrance
of the specified character string, where n must be greater than zero.
 It is identical to the N command in other respects.

.skip 1
.indent -10
__text`	The underscore command is
identical to the N command except that the search is continued
across page boundaries by executing effective Y commands instead
of P commands, so that no output is generated.
Since an underscore search can result in the loss of data,
it is aborted under the same circumstances as the Y command
(see the ED flag in section 5.16).
Note that underscore is backarrow on some terminals.
.skip 1
.indent -10
.index ^^I137##n__     Global search without output
n__text`	This command searches for the nth
occurrence of the specified character string, where n must be greater
than zero. It is identical to the __ command in other
respects.
.skip
In TECO-11 on VAX/VMS, n can be negative, in which case the search
proceeds backwards through each text buffer and through the
file being edited.
It terminates upon the correct search string match and/or
beginning of file.
A -n:__ command returns 0 at beginning of file.
.skip
.indent -10
E__text`	Same as __text` command except that effective EY
(rather than Y) commands are used.
Thus, this command is never aborted and is not
controlled by the Yank protection bit in the ED flag.
Remember that Yank DESTROYS the current buffer;
there's no way to get it back!
.skip 1
.indent -10
.index ^^I105__#nE__    Search without yank protection
nE__text`	Same as n__text` command except that effective EY (rather than
Y) commands are used.
.left margin 5
.skip 2
.test page 30
.center
TABLE 5-7B: BOUNDED SEARCH COMMANDS
.skip 1
.lm 15
.indent -10
m,nStext`	System specific command.  Consult Appendix C.
.skip 1
.indent -10
.index ^^I106b#m,nFB  Search between locations m and n
m,nFBtext`	Performs the same function as the nStext` command,
but m and n (inclusive) serve as bounds for the search.
In order for a search to be successful, the first
character to match must occur between buffer pointer positions m and n.
The string that is matched is permitted to extend beyond the search
limits specified, provided that it begins within bounds.
If m_<n, then the search proceeds in a forwards direction.
If m_>n, then the search proceeds in the reverse direction.
.skip 1
.indent -10
.index ^^I106b#nFB    Search, bounded by n lines
nFBtext`	Performs a bounded search over the next n lines.
If n is positive, the search proceeds forward over the next n lines; if n
is negative the search proceeds backwards over the n preceding lines;
if n is zero, the search proceeds backwards over the portion of the line
preceding the pointer.
.skip 1
.indent -10
FBtext`	Equivalent to 1FBtext`.
.skip 1
.indent -10
-FBtext`	Equivalent to -1FBtext`.
.skip 1
.indent -10
.index ^^I123b#::S    Compare string
::Stext`	Compare command.
The ::S command is not a true search. If the characters in
the buffer immediately following the current pointer position match
the search string, the pointer is moved to the end of the string and
the command returns a value of -1; i.e., the next command is executed
with an argument of -1. If the characters in the buffer do not match
the string, the pointer is not moved and the command returns a value
of 0.
Identical to ".,.:FBtext`".

.skip 2
.left margin 5
.skip 1
The search and replace commands listed below perform equivalent
functions to the search commands listed next to them, but then
delete "text1" and replace it with "text2".
.skip 2
.center
TABLE 5-7C: SEARCH AND REPLACE COMMANDS
.left margin 15
.ts 45
.skip 1
Search _& Replace	Search Command
.skip 1
FStext1`text2`	Stext1`
.skip 1
.index ^^I106s#nFS    Local string replace
nFStext1`text2`	nStext1`
.skip 1
FNtext1`text2`	Ntext1`
.skip 1
.index ^^I106n#nFN    Global string replace
nFNtext1`text2`	nNtext1`
.skip 1
.index ^^I106__#nF__    Destructive search and replace
F__text1`text2`	__text1`
.break
[not in TECO-10]
.skip 1
nF__text1`text2`	n__text1`
.break
[Not in TECO-10]
.skip 1
FCtext1`text2`	FBtext1`
.skip 1
.index ^^I106c#nFC    Search and replace over n lines
nFCtext1`text2`	nFBtext1`
.skip 1
.index ^^I106c#m,nFC  Search and replace between m and n
m,nFCtext1`text2`	m,nFBtext1`
.skip 1
.left margin 5
.skip 1
.test page 30
In addition, the four following commands can be used on TECO-10:
.left margin 15
.ts 15
.indent -10
.skip 1
FDtext`	Identical to the "FStext``" command.
.break
[TECO-10 only]
.skip 1
.indent -10
.index ^^I106d#nFD    Search and delete string
nFDtext`	Identical to the "nFStext``" command.
.break
[TECO-10 only]
.skip 1
.indent -10
.index ^^I106k#nFK    Search and delete intervening text
nFKtext`	Searches for the nth following occurrence of "text"
and then deletes all characters in the text buffer between the pointer
positions before and after the search.
.break
[TECO-10 only]
.skip 1
.indent -10
FKtext`	Equivalent to 1FKtext`
.break
[TECO-10 only]

.left margin 5
.skip 1
The FS, F__, and FN commands above can also be reverse searches
(n_<0) or bounded searches (m,n argument).
A reverse F__ or FN acts like a reverse S; that is the search terminates
when the beginning of the text buffer is encountered.
.skip
(In TECO-11 on VAX/VMS, -nFN searches backwards through each text buffer
and through the file being edited.
It terminates upon the correct search string match and/or
beginning of file.
A colon modified reverse search returns 0 at beginning of file.)
.skip 1
If a search command is entered without a text argument, TECO will
execute the search command as though it had been entered with the
same character string argument as the last search command entered.
For example, suppose the command "STHE#END`" results in an
error message, indicating that character string "THE#END"
was not found on the current page. Entering the command "N`" causes
TECO to execute an N search for the same character string.
Although the text argument may be omitted, the command terminator
_<DELIM_> must always be entered.
.skip 1
Search commands can make use of the colon modifier described in
Chapter 3.
The following examples illustrate use of the colon modifier:
.left margin 20
.skip 1
.ts 20
.indent -15
COMMANDS:	n:Stext`
.nofill
m,n:Stext`
n:Ntext`
n:__text`
n:FStext1`text2`
m,n:FStext1`text2`
n:FNtext1`text2`
###etc.
.fill
.skip 1
.indent -15
FUNCTION:	In each case, execute the search command. If
the search is successful, execute the next sequential command with an
argument of -1. If the search fails, execute the next command
with an argument of zero.  If the next command does not
require a numeric argument, execute it as it stands.
.skip 2
.lm5
.skip 1
All search commands may also use the @ modifier to use alternate delimiters,
to allow _<ESCAPE_> characters in search strings or to avoid the use of
_<ESCAPE_> characters in command strings. Such search commands take the
following forms:
.nf.s1.lm20.i-15
COMMANDS:	@S/text/
m,n@FB/text/
n@FS/text1/text2/
@:N/text/
###etc.
.f.lm5

.page
.left margin 5
.subtitle #####Search Arguments
.index ^^O508##        5.8      SEARCH ARGUMENTS
5.8 SEARCH ARGUMENTS
.skip 1
TECO builds the search string by loading its search string
buffer from the supplied search command argument.
To help you enter special characters or frequently used
character sequences, the argument may contain special string building
characters. Table 5-8A lists the string building characters and
their functions.
.skip 1
TECO-8 does not support the extended String Build functions or
Match Control Constructs that begin with _<CTRL/E_>.
This is a general property and will not be repeated
in the following tables.
.skip 1
Note that, as explained in Chapter 3, a caret (up-arrow) may be used
to indicate that the character following it is to be treated as a
control character.  Any of the commands below may be entered using the caret.
This function of the caret can be disabled by using the
ED flag (see 5.16 and appendices).
.skip 2
.center
TABLE 5-8A:  STRING BUILDING CHARACTERS
.left margin 20
.skip 1
.indent -15
CHARACTER	#####FUNCTION
.skip 1
.indent -15
.index ^^I021s#_^Qx    (String char) Use x literally
_<CTRL/Q_>	A _<CTRL/Q_> character in a search command
argument indicates that the character following the
_<CTRL/Q_> is to be used literally rather than as a
match control character.
.skip 1
.indent -15
.index ^^I022s#_^Rx    (String char) Use x literally
_<CTRL/R_>	Same as _<CTRL/Q_>.
.skip 1
.indent -15
.index ^^I026s#_^Vx    (String char) Force x to lower case
_<CTRL/V_>	A _<CTRL/V_> character in a search command argument
indicates that the character following the _<CTRL/V_> is to be
used as the equivalent character in the lower case ASCII
range (i.e., octal 100 to 137 is treated as octal 140 to 177).
.skip 1
.indent -15
_<CTRL/V_>_<CTRL/V_>
.break
Two successive _<CTRL/V_> characters in a string argument indicate to TECO
that all following alphabetic characters in this string are to be converted to
lower case unless an explicit _^W is given to override this state.
This state continues until the end of the string or until a _^W_^W construct
is encountered.
.br
[TECO-10 only]
.skip 1
.indent -15
.index ^^I027s#_^Wx    (String char) Force x to upper case
_<CTRL/W_>	A _<CTRL/W_> character in a search command argument
indicates that the character following the _<CTRL/W_> is to be
used as the equivalent character in the upper case ASCII
range (i.e., octal 140 to 177 is treated as octal 100 to 137).
.skip 1
.indent -15
_<CTRL/W_>_<CTRL/W_>
.break
Two successive _<CTRL/W_> characters indicates to TECO that
all following alphabetic characters in this string are to be converted to
upper case unless an explicit _^V is encountered to override this state.
This state continues until the end of the string or until a _^V_^V construct
is encountered.
.br
[TECO-10 only]

.skip 1
.indent -15
.index ^^I005q#_^EQq   (String char) Use contents of Q-reg q
_<CTRL/E_>Qq	_<CTRL/E_>Qq indicates that the string stored
in Q-register q is to be used in the position occupied by
the _^EQq in the search string.
Q registers are discussed in sections 3.3.2 and 5.9.
.break
[Not in TECO-10]
.skip 1
.indent -15
.index ^^I005u#_^EUq   (String char) Use ASCII code in Q-reg q
_<CTRL/E_>Uq	_<CTRL/E_>Uq indicates that the character whose ASCII code
is specified by the numeric storage area of Q-register q
is to be used in the position
occupied by the _^EUq in the search string.
.BREAK
[TECO-11 only]
.skip
.LEFT MARGIN 5
.skip 1
String build characters are also permitted inside the string
arguments of the O, EB, ER, EW, and EG commands.
.skip 1
TECO executes a search command by attempting to match the
search command argument character-by-character with some
portion of the input file.
There are several special control characters that may be used
in search command arguments to alter the usual matching process.
Table 5-8B lists these  match control characters and
their functions.
.skip 2
.center
TABLE 5-8B:  MATCH CONTROL CHARACTERS
.left margin 20
.skip 1
.indent -15
CHARACTER	#####FUNCTION
.skip 1
.indent -15
.index ^^I030s#_^X     (Match char) Match any character
_<CTRL/X_>	A _<CTRL/X_> character indicates
that this position in the character string may be any character.  TECO
accepts any character as a match for _<CTRL/X_>.
.skip 1
.indent -15
.index ^^I023s#_^S     (Match char) Match separator char
_<CTRL/S_>	A _<CTRL/S_> character indicates that any
separator character is acceptable in this position. TECO
accepts any character that is not a letter (upper or lower case A
to Z) or a digit (0 to 9) as a match for _<CTRL/S_>.
.skip 1
.indent -15
.index ^^I016s#_^Nx    (Match char) Match all but x
_<CTRL/N_>x	TECO accepts any character as a match for
the _<CTRL/N_>x combination EXCEPT the character
which follows the _<CTRL/N_>.
_<CTRL/N_> can be combined with other special characters. For
example, the combination _<CTRL/N_>_<CTRL/E_>D means match
anything except a digit in this position.

.skip 1
.indent -15
.index ^^I005a#_^EA    (Match char) Match alphabetics
_<CTRL/E_>A	_<CTRL/E_>A indicates that any alphabetic character
(upper or lower case A to Z) is acceptable in this position.
.skip 1
.indent -15
.index ^^I005b#_^EB    (Match char) Match separator char
_<CTRL/E_>B	Same as _<CTRL/S_>.
.skip 1
.indent -15
.index ^^I005c#_^EC    (Match char) Match Symbol Constituent
_<CTRL/E_>C	_<CTRL/E_>C indicates that any
character that is legal as part of a
symbol constituent is acceptable in this position.
TECO accepts any letter (upper or lower case A to Z), any
digit (0 to 9), a dot (.), or a dollar sign ($) as a match for
_<CTRL/E_>C.  Additional characters may be matched depending upon the
operating system; consult the appropriate appendix.
.skip 1
.indent -15
.index ^^I005d#_^ED    (Match char) Match numerics
_<CTRL/E_>D	_<CTRL/E_>D indicates that any digit (0 to 9) is acceptable
in this position.
.skip 1
.indent -15
.index ^^I005g#_^EGq   (Match char) Match contents of Q-reg q
_<CTRL/E_>Gq	_<CTRL/E_>Gq indicates that any character
contained in Q-register q is acceptable
in this position.
For example, if Q-register A contains "A*:" then TECO accepts either
A, *, or : as a match for _<CTRL/E_>GA.
.break
[Not in TECO-10]
.skip 1
.indent -15
.index ^^I005l#_^EL    (Match char) Match line terminators
_<CTRL/E_>L	_<CTRL/E_>L indicates that any line terminator (line feed,
vertical tab, or form feed)
is acceptable in the position occupied by _<CTRL/E_>L in the search string.
.skip 1
.indent -15
.index ^^I005m#_^EMx   (Match char) Match any number of x
_<CTRL/E_>M	_<CTRL/E_>M indicates that any non-zero
number of occurrences of the
immediately following character or match control construct is acceptable
at this position.
.br
[TECO-10 only]
.skip 1
.indent -15
.index ^^I005r#_^ER    (Match char) Match alphanumerics
_<CTRL/E_>R	_<CTRL/E_>R indicates that any alphanumeric
character (letter or digit as defined above) is acceptable in this position.
.skip 1
.indent -15
.index ^^I005s#_^ES    (Match char) Match non-null space/tab
_<CTRL/E_>S	_<CTRL/E_>S indicates that any non-null string of spaces
and/or tabs is acceptable in the position occupied by _<CTRL/E_>S.
.skip 1
.indent -15
.index ^^I005v#_^EV    (Match char) Match lower case alphabetic
_<CTRL/E_>V	_<CTRL/E_>V indicates that any lower case alphabetic
character is acceptable in this position.
.skip 1
.indent -15
.index ^^I005w#_^EW    (Match char) Match upper case alphabetic
_<CTRL/E_>W	_<CTRL/E_>W indicates that any upper case alphabetic
character is acceptable in this position.
.skip 1
.indent -15
.index ^^I005x#_^EX    (Match char) Match any character
_<CTRL/E_>X	Equivalent to _<CTRL/X_>.
.skip 1
.indent -15
.index ^^I005_<#_^E_<n_>  (Match char) Match ASCII code n
_<CTRL/E_>_<nnn_>	_<CTRL/E_>_<nnn_> indicates that the character whose ASCII
octal code is nnn is acceptable in this position.
.BREAK
[TECO-10 only]
.skip 1
.indent -15
.index ^^I005[#_^E[]   (Match char) Match one of list
_<CTRL/E_>[a,b,c,...]
.break
_<CTRL/E_>[a,b,c,...] indicates that any one of the
specified characters is acceptable in this position.  One or more characters
or other match control constructs are permitted.
.break
[TECO-10 only]
.left margin 5
.skip 1
TECO-8 uses special symbols to represent certain match control characters
when they are displayed by an error message.  These display symbols are:
.skip 1
.nofill
.ts10,25
	Character	Display
.skip 1
	_^N	_<NOT_>
	_^S	_<SEP_>
	_^X	_<ANY_>
.break
.lm5
.fill

.page
.subtitle #####Q-registers
.index ^^O509##        5.9      Q-REGISTER MANIPULATION
5.9 Q-REGISTER MANIPULATION
.skip 1
TECO provides data storage registers, called Q-registers,
each of which may be used to store an integral numeric value
and, simultaneously, an ASCII character string.
Q-registers are described in section 3.3.2;
this section describes the commands used to load values
into and retrieve values from Q-registers.
.skip
An important kind of character string which may be stored in the
text portion of a Q-register is a TECO command string.
Such a command is known as a macro, and is available for
execution via the Mq command, described in Table 5-9C below.
(See also section 4.4, Immediate ESCape-sequence commands,
for a keypad method of macro invocation, and section 4.2,
for the *q command, which saves the last-typed command
for possible editing or re-execution.)
.skip 1
TECO-10 allows additional Q-registers other than those
described in section 3.3.2.
Consult Appendix I for further details.
.skip 1
Table 5-9A lists the commands which permit characters to
be loaded into the Q-registers.
.skip 2
.center
TABLE 5-9A:  Q-REGISTER LOADING COMMANDS
.left margin 15
.ts15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
.index ^^I125##nUq    Put number n into Q-register q
nUq	Put n in the numeric storage area of Q-register q.
.skip 1
.indent -10
m,nUq	Equivalent to the nUqm command.  That is, this command puts
the number n into the numeric storage area of Q-register q
and then returns the number m as a value.  The command UAUB is
useful at the beginning of a macro to save the two arguments
specified on the macro call. (See the m,nMq command below.)
.skip 1
.indent -10
.index ^^I045##n%q    Add n to Q-register q and return result
n%q	Add n to the contents of the number storage area of Q-register q.
The updated contents of Q-register q are also returned
as a value to be passed to the next command.
.skip
If your intent is only to update the Q-register,
good programming practice suggests following the n%q command
with a _<DELIM_> or _^[ to prevent the returned value
from unintentionally affecting the following command.
.skip 1
.indent -10
n%q`	Same as n%q but discards the value returned.
.skip 1
.indent -10
%q	Equivalent to 1%q.
.skip 1
.indent -10
.index ^^I025##_^Uq    Put string into Q-register q
_^Uqstring`
.br
This command
inserts character string "string" into the text storage area
of Q-register q.
When entering a command string from the terminal, you must specify
_^U using the caret/U format,
since the _<CTRL/U_> character is the line erase immediate action command.
.skip 1
.indent -10
.index ^^I025a#:_^Uq   Append string to Q-register q
:_^Uqstring`
.br
This command
appends character string "string" to the text storage area
of Q-register "q".
.break
[not in TECO-8]
.skip 1
.indent -10
.index ^^I025n#n_^Uq   Put ASCII char "n" into Q-register q
n_^Uq`	This form of the _^Uq` command
inserts the single character whose ASCII code is n
into the text storage area of Q-register "q".
(n is taken modulo 256 in TECO-11, modulo 128 in other TECOs.)
.break
[not in TECO-8]
.skip 1
.indent -10
.index ^^I025o#n:_^Uq  Append ASCII char "n" to Q-register q
n:_^Uq`	This form of the :_^Uq` command
appends the single character whose ASCII code is n
to the text storage area of Q-register "q".
(n is taken modulo 256 in TECO-11, modulo 128 in other TECOs.)
.break
[not in TECO-8]
.test page 6
.skip 1
.indent -10
@_^Uq/string/
.indent -10
@:_^Uq/string/
.indent -10
n@_^Uq//
.indent -10
n@:_^Uq//	Equivalent, respectively, to the _^Uqstring`, :_^Uqstring`,
n_^Uq`, and n:_^Uq` commands, except that alternate delimiters are used
and no _<DELIM_> characters are necessary.
.skip 1
.indent -10
.index ^^I130##nXq    Put n lines into Q-register q
nXq	Clear Q-register q and move n lines into it,
where n is a signed integer.
If n is positive, the
n lines following the current pointer position are copied
into the text storage area of Q-register q. If n is negative,
the n lines preceding the pointer are copied. If n is zero,
the contents of the buffer from the beginning of the line on
which the pointer is located up to the pointer is copied.
The pointer is not moved.
The text is not deleted.
.skip 1
.indent -10
Xq	Equivalent to 1Xq.
.skip 1
.indent -10
-Xq	Equivalent to -1Xq.
.skip 1
.indent -10
.index ^^I130a#m,nXq  Put characters m to n into Q-register q
m,nXq	Copy the contents of the buffer from the m+1th
character through and including the nth character into the
text storage area of Q-register q. M and n must be positive,
and m should be less than n.
.skip 1
.indent -10
 .,.+nXq	Copy the n characters immediately following the buffer
pointer into the text storage area of Q-register q. N should be greater
than zero.
.skip 1
.indent -10
 .-n,.Xq	Copy the n characters immediately preceeding the buffer
pointer into the text storage area of Q-register q. N should be greater
than zero.
.skip 1
.indent -10
.index ^^I130b#n:Xq   Append n lines to Q-register q
n:Xq	Append n lines to Q-register q, where n is a
signed integer with the same functions as n in the nXq command above.
The pointer is not moved.
.break
[not in TECO-8]
.skip 1
.index ^^I130c#m,n:Xq Append characters m to n into Q-register q
The colon construct for appending to a Q-register can be used
with all forms of the X command.
.skip 1
.indent -10
.index ^^I135##]q     Q-register pop
]q	Pop from the Q-register push-down list into Q-register q.
Any previous contents of Q-register q are destroyed.
Both the numeric and text parts of the Q-register are loaded by this command.
The Q-register push-down list is a last-in first-out (LIFO) storage area.
(See section 3.3.3 for a description of the push-down list.)
This command does not use or affect numeric values.
Numeric values are passed through this command transparently.
This allows macros to restore Q-registers and still return numeric values.
.break
[Not in TECO-8]
.skip 1
.indent -10
:]q	Execute the ]q command and
return a numeric value. A -1 indicates that there was
another item on the Q-register push-down list to be popped. A 0
indicates that the Q-register push-down list was empty, so Q-register
q was not modified.
.break
[Not in TECO-8]
.skip 1
.indent -10
*q	Save last-typed command string.
See section 4.2.

.page
.left margin 5
Table 5-9B lists the commands which permit data
to be retrieved from the Q-registers.
.skip 2
.center
TABLE 5-9B:  Q-REGISTER RETRIEVAL COMMANDS
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
.index ^^I121##Qq     Number in Q-register q
Qq	Use the integer stored in the number storage area
of Q-register q as the argument of the next command.
.skip 1
.indent -10
nQq	Return the ASCII value of the (n+1)th character in
Q-register q.  The argument n must be between 0 and the Q-register's
size minus 1.  If n is out of range, a value of -1 is returned.
Characters within a Q-register
are numbered the same way that characters in the text buffer are numbered.
The initial character is at character position 0, the next character is at
character position 1, etc.
Therefore, if Q-register A
contains "xyz", then 0QA will return the ASCII code for "x" and
1QA will return the ASCII code for "y".
.skip 1
.indent -10
.index ^^I121a#:Qq    Size of text in Q-register q
:Qq	Use the number of characters stored in the text storage area
of Q-register q as the argument of the next command.
.skip 1
.indent -10
.index ^^I107##Gq     Get string from Q-register q into buffer
Gq	Copy the contents of the text storage area
of Q-register q into the buffer at the current position of the
buffer pointer, leaving the pointer positioned after the last
character copied.
.skip 1
.indent -10
.index ^^I107a#:Gq    Type Q-register q on terminal
:Gq	Print the contents of the text storage area
of Q-register q on the terminal.
Neither the text buffer nor the buffer pointer
is changed by this command.
.skip 1
.indent -10
.index ^^I133##[q     Q-register push
[q	Copy the contents of the numeric and text storage
areas of Q-register q into the Q-register push-down list.
This command does not alter either the numeric
or text storage areas of Q-register q.
It does not use or affect numeric values.
Numeric values are passed through this command transparently,
allowing macros to save temporary Q-registers and still accept numeric values.
(Note, however, macros written to use local Q-registers, available in TECO-11,
may be able to avoid saving and restoring Q-registers
via the the pushdown list.)
The command sequence [A#]B replicates the text string and numeric
value from Q-register A into Q-register B.
.break
[Not in TECO-8]
.lm 5

.page
.left margin 5
Table 5-9C lists the commands which cause macros
(strings stored in Q-registers) to be executed.
.skip
Macro invocations can be nested recursively;
the limit is set by the amount of pushdown storage TECO has available.
.skip
In this table only, a distinction is made between a global Q-register
name (indicated below by "q") and a local Q-register name
(indicated below by ".q").
Elsewhere in this manual, "q" indicates either a global or
local Q-register name.
.skip 2
.center
TABLE 5-9C:  MACRO INVOCATION COMMANDS
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.index ^^I115##Mq     Execute string in Q-register q
.skip 1
.indent -10
Mq	Execute the contents of the text storage area
of global Q-register q as a command string.
In TECO-11, a new set of local Q-registers is created
before the macro is invoked.
.skip 1
.indent -10
nMq	Execute the Mq command as above, using n as a numeric argument
for the first command contained in global Q-register q.
In TECO-11, a new set of local Q-registers is created.
.skip 1
.indent -10
m,nMq	Execute the Mq command as above, using m,n as numeric arguments
for the first command contained in global Q-register q.
In TECO-11, a new set of local Q-registers is created.
.skip 1
.indent -10
:Mq	Execute the contents of the text storage area
of global Q-register q as a command string.
In TECO-11, the current set of local Q-registers remains
available to the invoked macro; no new set is created.
.skip 1
.indent -10
n:Mq	Execute the :Mq command as above, using n as a numeric argument
for the first command contained in global Q-register q.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
m,n:Mq	Execute the :Mq command as above, using m,n as numeric arguments
for the first command contained in global Q-register q.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
M.q	Execute the contents of the text storage area
of local Q-register .q as a command string.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
nM.q	Execute the M.q command as above, using n as a numeric argument
for the first command contained in local Q-register .q.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
m,nM.q	Execute the M.q command as above, using m,n as numeric arguments
for the first command contained in local Q-register .q.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
:M.q	Execute the contents of the text storage area
of local Q-register .q as a command string.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
n:M.q	Execute the :M.q command as above, using n as a numeric argument
for the first command contained in local Q-register .q.
In TECO-11, no new set of local Q-registers is created.
.skip 1
.indent -10
m,n:M.q	Execute the :M.q command as above, using m,n as numeric arguments
for the first command contained in local Q-register .q.
In TECO-11, no new set of local Q-registers is created.
.lm 5

.page
.subtitle #####Arithmetic and Expressions
.index ^^O510##        5.10     ARITHMETIC AND EXPRESSIONS
5.10  ARITHMETIC AND EXPRESSIONS
.skip 1
The numeric argument of a TECO command may consist of
a single integer, any of the characters listed in Table 5-11,
the numeric contents of any Q-register,
or an arithmetic combination of these elements.
If an arithmetic expression is
supplied as a numeric argument, TECO will evaluate the
expression. All arithmetic expressions are evaluated from left
.index ^^I054##,      Argument separator
.index ^^I050##(      Expression grouping
.index ^^I051##)      Expression grouping
to right without any
operator precedence. Parentheses may be used to override
the normal order of evaluation of an expression. If parentheses
are used, all operations within the parentheses are performed,
left to right, before operations outside
the parentheses. Parentheses may be nested, in which case
the innermost expression contained by parentheses will be
evaluated first. Table 5-10A lists all of the arithmetic
operators that may be used in arithmetic expressions.
.skip 2
.center
TABLE 5-10A:  ARITHMETIC OPERATORS
.left margin 25
.skip 1
.ts 15,25
.indent -20
OPERATOR	EXAMPLE	#####FUNCTION
.skip 1
.indent -20
+	+2=2	Ignored if used before the first term in
an expression.
.skip 1
.indent -20
.index ^^I053##+      Addition
+	5+6=11	Addition, if used between terms.
.skip 1
.indent -20
-	-2=-2	Negation, if used before the first
term in an expression.
.skip 1
.indent -20
.index ^^I055##-      Subtraction or negation
-	8-2=6	Subtraction, if used between terms
.skip 1
.indent -20
.index ^^I052##*      Multiplication
*	8*2=16	Multiplication. Used between terms.
.skip 1
.indent -20
.index ^^I057##/      Division
/	8/3=2	Integer division with loss of the remainder.
Used between terms.
.skip 1
.indent -20
.index ^^I046##_&      Logical AND
_&	12_&10=8	Bitwise logical AND of the
binary representation of the two terms. Used between the terms.
.skip 1
.indent -20
.index ^^I043##_#      Logical OR
_#	12_#10=14	Bitwise logical OR of the binary
of the two terms. Used between the terms.
.skip 1
.indent -20
.index ^^I037##_^__     Ones complement (logical NOT)
_^__	5_^__=-6	Unary one's complement. Used after an
expression.
This is a TECO command that complements its argument.
Strictly speaking, it is not a
unary operator.
.left margin 5
.skip 2
.test page 30
.center
TABLE 5-10B:  CONVERSION AND RADIX CONTROL COMMANDS
.left margin 15
.skip 1
.ts 15
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
.index ^^I075##=      Type in decimal
n=	This command causes the value of n to
be output at the terminal in decimal followed by a carriage
return and line feed.
Decimal numeric conversion is signed. For example, the unsigned
number 65535 will output as -1 on TECO-11.
TECO's radix is unaltered.
.skip 1
.indent -10
.index ^^I075a#==     Type in octal
n==	This command causes the value of n to
be output at the terminal in octal (base 8) followed by a carriage
return and line feed.
Octal numeric conversion is unsigned. For example, the unsigned
number 8191 (decimal) will output as 17777 on TECO-8.
TECO's radix is unaltered.
.skip 1
.indent -10
.index ^^I075b#===    Type in hexadecimal
n===	This command causes the value of n to be output at the terminal
in hexadecimal (base 16) followed by a carriage return and line feed.
Hexadecimal output is unsigned.  TECO's radix is unaltered.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I075m#:=     Type in decimal, no carriage return
n:=
.break
.index ^^I075n#:==    Type in octal, no carriage return
.indent -10
n:==
.break
.index ^^I075o#:===   Type in hexadecimal, no carriage return
.indent -10
n:===	These commands are equivalent to n=, n==, and n===, except that
they leave the carriage positioned at the end of the output.
.skip 1
.indent -10
.index ^^I017##_^O     Set radix to octal
_^O	_<CTRL/O_> (caret/O) causes all subsequent numeric
input to be accepted as octal numbers.
Numeric conversions using the _\ or n_\ commands will also be octal.
The digits 8 and 9 become illegal as numeric characters.
The octal radix will continue to be used until the next _^D
command is executed or until
TECO's radix is changed by an n_^R command.
.break
NOTE: On TECO-10, this command only affects the immediately following digit
string.
.skip 1
.indent -10
.index ^^I004##_^D     Set radix to decimal
_^D	_<CTRL/D_> (caret/D) causes all subsequent numeric
input to be accepted as decimal numbers. This is the
initial setting.
.br
[Not in TECO-10]
.skip 1
.indent -10
.index ^^I022##_^R     Value of current radix
_^R	This command returns the binary value of TECO's
current radix.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I022a#n_^R    Set radix to n
n_^R	This command sets TECO's radix to the value of n.  It
is currently implemented only in TECO-11, where n
may only be one of the values 8, 10, or 16 (representing octal mode,
decimal mode, or hexadecimal mode).  If n is not one of these values,
TECO's radix remains unchanged and the ?IRA error message is produced.
.skip 1
.indent -10
.index ^^I134##_\      Value of digit string in buffer
_\	A backslash character which is not preceded by a
numeric argument causes TECO to evaluate the digit
string (if any) beginning with the character immediately following
the buffer pointer and ending at the next character that is not
valid for the current radix.
The value becomes the numeric argument of the next command.
The first character may be a digit or + or -.
As the backslash command is evaluated, TECO
moves the buffer pointer to a position immediately following
the digit string. If there is no digit string following the pointer,
the result is zero and the pointer position
remains unchanged.
Except on TECO-8, the digits 8 and 9 will stop the evaluation
if TECO's current radix is octal.
.skip 1
.indent -10
.index ^^I134n#n_\     Convert n to digits in buffer
n_\	The backslash
command preceded by an argument inserts the value of n
into the text buffer at the current position of the pointer, leaving
the pointer positioned after the last digit of the insertion.
The insertion is either signed decimal (decimal radix), unsigned
octal (octal radix), or unsigned hexadecimal (hexadecimal radix).
Note that _\ is a "bidirectional" command. n_\ inserts a string
into text while _\ (no argument) returns a numeric result.
.left margin 5

.page
.subtitle #####Special Numeric Values
.index ^^O511##        5.11     SPECIAL NUMERIC VALUES
5.11  SPECIAL NUMERIC VALUES
.skip 1
TECO maintains several internal variables which record conditions
within TECO. The variable name is
equivalent to the current contents of the
variable and may be entered as a numeric
argument to TECO commands. When the command
is executed, the current value of the designated variable
becomes the numeric
argument of the command.
.skip 1
Some of the characters which stand for specific values
associated with the text buffer have been introduced earlier in
this manual. For example, the dot character
(.), which represents the
current pointer position, may be used in the argument of
a T command. The command ".,.+5T" causes the 5 characters
following the buffer pointer to be typed out.
When this command is executed, the number of
characters preceding the buffer pointer is substituted
in each case for the "dot". The addition is then carried out, and
the command is executed as though it were of the form "m,nT".
.skip 1
Table 5-11 lists all of the characters which have special
numeric values. Any of these characters may be used as
numeric argument in place of the value it represents.
.skip 2
.center
TABLE 5-11:  CHARACTERS ASSOCIATED WITH NUMERIC QUANTITIES
.left margin 15
.skip 1
.ts 15,26
.indent -10
CHARACTER	#####FUNCTION
.skip 1
.indent -10
.index ^^I102##B      0 - beginning of buffer
B	Always equivalent to zero. Thus, B represents the
position preceding the first character in the buffer.
.skip 1
.indent -10
.index ^^I132##Z      End of buffer value
Z	Equivalent to the number of characters currently
contained in the buffer. Thus, Z represents the position
following the last character in the buffer.
.skip 1
.indent -10
.index ^^I056##_.      Current pointer position
 .	Equivalent to the number of characters between the
beginning of the buffer and the current position of the pointer. Thus
"." represents the current position of the pointer.
.skip 1
.indent -10
.index ^^I110##H      Equivalent to "B,Z"
H	Equivalent to the numeric pair "B,Z", or "from the
beginning of the buffer up to the end of the buffer." Thus, H
represents the whole buffer.
.skip 1
.indent -10
.index ^^I101n#nA     ASCII value of char in buffer
nA	Equivalent to the
ASCII code for the .+n+1th character  in the buffer (that is, the
character to the right of buffer pointer position .+n).
The expression -1A is equivalent to the ASCII code
of the character immediately preceding the pointer and
0A is equivalent to the ASCII code of the character immediately
following the pointer (the current character).
If the character position
referenced lies outside the bounds of the text buffer, this command
returns a -1.
.skip 1
.indent -10
.index ^^I115##Mq     Execute string in Q-register q
Mq	The Mq command (execute the contents of the text
storage area of Q-register "q" as a command string) may return
a numeric value if the last command in the string returns a
numeric value and is not followed by a _<ESC_>.
.skip 1
.indent -10
.index ^^I121##Qq     Number in Q-register q
Qq	Equivalent to the value stored in the number storage
area of Q-register q.
.skip 1
.indent -10
.index ^^I121a#:Qq    Size of text in Q-register q
:Qq	Equivalent to the number of characters
in the text storage area of Q-register q.
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I134##_\      Value of digit string in buffer
_\	Backslash is equivalent to the numeric value of the digit string in
the text buffer at the current pointer position, interpreted in the
current radix. The pointer is moved to the end of the digit string.
.skip 1
.indent -10
.index ^^I002##_^B     Current date
_^B	_<CTRL/B_> (caret/B) is equivalent to the
current date via the following equations:
.skip 1
OS/8:	_^B = (((month*32)+day)*8)+((year-1970)_&7)+k
.br
	#####where k = 4096 if year_>1977
.br
	#####and k=0 otherwise
.br
RT-11:	_^B = (((month*32)+day)*32)+year-1972
.br
RSTS/E:	_^B = ((year-1970)*1000)+day within year
.br
RSX-11:	_^B = ((year-1900)*16+month)*32+day
.br
VAX/VMS:	_^B = ((year-1900)*16+month)*32+day
.br
TOPS-10:	_^B = (((year-1964)*12+month-1)*31+day-1)
.skip
.indent -10
.index ^^I005##_^E     Form Feed flag
_^E	_<CTRL/E_> (caret/E) determines whether or not the P command
(and related operations) append a form feed to the contents of
the buffer on output.
If _^E is -1, a form feed is appended;
if _^E is 0, no form feed is appended.
.skip 1
Each time text is read into the text buffer TECO sets the _^E flag.
If the text read terminated due to a form feed
(i.e., if the text buffer was loaded with a "complete page"),
_^E is set to -1.
If the text read terminated because the buffer was filled to
capacity before a form feed was encountered or because there was no form feed
(i.e., the text buffer was not loaded with a "complete page"),
_^E is set to 0.
.skip 1
In TECO-11, you can set the _^E flag's value directly,
overriding the value set by the most recent buffer read.
Be sure to use only values of 0 or -1;
other values may cause unpredictable results.
.skip 1
.indent -10
.index ^^I006##_^F     Contents of console switch register
_^F	_<CTRL/F_> (caret/F) is equivalent to the
current value of the console switch register.
.skip 1
.indent -10
.index ^^I006a#n_^F    Return terminal number of job n
n_^F	n_<CTRL/F_> is the terminal number plus 200000 (octal) for job n's
terminal.  -1_^F is the terminal number plus 200000 (octal) for your
job's terminal.  The result is 0 if the specified job is detached or if there
is no such job.
.break
[TECO-10 only]
.skip 1
.indent -10
.index ^^I010##_^H     Current time of day
_^H	_<CTRL/H_> (caret/H) is equivalent to the
current time of day via the following equations:
.skip 1
OS/8:	_^H = 0
.br
RT-11:	_^H = (seconds since midnight)/2
.br
RSTS/E:	_^H = minutes until midnight
.br
RSX-11:	_^H = (seconds since midnight)/2
.br
VAX/VMS:	_^H = (seconds since midnight)/2
.br
TOPS-10:	_^H = 60ths of a second since midnight
.break
(or 50ths of a second where 50 Hz power is used)
.skip 1
.indent -10
.index ^^I016##_^N     End of file flag
_^N	_<CTRL/N_> (caret/N) is the end of file flag.
It is equivalent to -1 if the file open on the
currently selected input stream is at end of file,
and zero otherwise.
.skip 1
.indent -10
.index ^^I023##_^S     -(length) of last referenced string
_^S	_<CTRL/S_> (caret/S) is equivalent to the negative of the length
of the last insert, string found, or string inserted with a "G" command,
whichever occurred last.
To back up the pointer to the start of the last insert, string found,
etc., type "_^SC".
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I024##_^T     ASCII value of next character typed
_^T	_<CTRL/T_> (caret/T) is equivalent to the ASCII
code for the next character typed at the terminal.
Every _^T command executed causes
TECO to pause and accept one character typed at the terminal.
See the ET flag description (section 5.16) for variations.
.skip 1
.indent -10
.index ^^I024d#_^T     Read and decode next keystroke typed
:_^T	Reads and decodes the next keystroke typed at the terminal.
The decoded keystroke is returned in a manner similar
to that used for immediate ESCape sequence commands (see section 4.4),
i.e., via _<type_> and _<value_> codes, as follows:
.nofill
     _<type_> 0   Normal character,
                  _<value_> is ASCII value

     _<type_> 1   Control character
                  (except ESCape or CSI);
                  _<value_> is ASCII value of
                  control char.
                  A typed _<CR_> yields
                  _<type_> 1 _<value_> 13,
                  and subsequent _^T or :_^T
                  does not return a _<LF_>.

     _<type_> 2   Same as immed ESC seq _<type_> 0
     _<type_> 3   Same as immed ESC seq _<type_> 1
     _<type_> 4   Same as immed ESC seq _<type_> 2
     _<type_> 5   Same as immed ESC seq _<type_> 3
.fill
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I031##_^Y     Equivalent to ".+_^S,."
_^Y	_<CTRL/Y_> (caret/Y) is equivalent to ".+_^S,.",
the n,m numeric argument spanning the text just searched
for or inserted.
This value may be used to recover from inserting a string
in the wrong place. Type "_^YXSFR`" to store the string
in Q-register S and remove it from the buffer. You can then position
the pointer to the right place and type "GS" to insert the string.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I032##_^Z     Size of text in all Q-registers
_^Z	_<CTRL/Z_> (caret/Z) is equivalent to the total space occupied by
text in the Q-registers (including the command line currently being
executed).
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I036##_^_^x    ASCII value of x
_^_^x	The combination of the Control-caret (double caret or double
up-arrow) followed by any character is equivalent to the value of the
ASCII code for that character. The "x" in this example may be
any character that can be typed in to TECO.

.page
.center
MODE CONTROL FLAGS
.skip 1
.indent -10
The following mode control flags return numeric values.
The use of these flags is described below in section 5.16.
.skip 1
.ts 15
.indent -10
ED	Equivalent to the current value of the edit
level flag.
.skip 1
.indent -10
EH	Equivalent to the current value of the help
level flag.
.skip 1
.indent -10
.index ^^I105o#EO     Version of TECO
EO	Equivalent to the
version number of the version of TECO
which is currently being run. This manual describes TECO-11
.index ^^Ref###TECO-11 Version 40
.index ^^Ref###TECO-8 Version 7
.index ^^Ref###TECO-10 Version 3
Version 40, TECO-8 Version 7, and TECO-10 Version 3.
.skip 1
.indent -10
ES	Equivalent to the current value of the search
verification flag.
.break
[Not in TECO-8]
.skip 1
.indent -10
ET	Equivalent to the current value of the type out
control flag.
.skip 1
.indent -10
EU	Equivalent to the current value of the upper/lower case flag.
.skip 1
.indent -10
EV	Equivalent to the current value of the edit
verify flag.
.break
[TECO-11 only]
.skip 1
.indent -10
_^X	_<CTRL/X_> (caret/X) is equivalent to the current
value of the search mode flag.
.break
[Not in TECO-8]
.skip 1
.left margin 5

.page
.subtitle #####Command Loops
.index ^^O512##        5.12     COMMAND LOOPS
5.12 COMMAND LOOPS
.skip 1
You can cause a command string to be executed any number
of times by placing the command string within angle brackets
and preceding the brackets with a numeric argument designating
the number of iterations. Iterated command strings are called
command loops. Loops may be nested so
that one command loop contains another command loop, which, in turn,
contains other command loops, and so on.
The maximum depth to which command loops may be nested is determined
by the size of TECO's push-down list (system dependent), but
is always greater than 10.
.skip 1
The general form of the command loop is:
.skip 1
.index ^^I074##n_<     Iterate n times
.index ^^I076##_>      End iteration
.center
n_<command string_>
.skip 1
where "command string" is the sequence of commands to be iterated
and n is the number of iterations.
If n is not supplied then no limit is placed on the number of
iterations. If n is 0 or less than 0 then the iteration is not
executed at all; command control skips to the closing angle bracket.
If n is greater than 0, then the iteration is performed
n times.
.skip 1
Search commands inside command loops are treated specially.
If a search command which is not preceded by a colon modifier
is executed within a command loop and the search fails,
a warning message is printed [on TECO-11], the command loop
is exited immediately and the command following the right angle
bracket of the loop is the next command to be executed.  If
an unmodified search command in a command loop is immediately
followed by a semicolon, it is treated as if it were
a colon-modified search (see section 5.13).

.page
.subtitle #####Branching Commands
.index ^^O513##        5.13     BRANCHING COMMANDS
5.13  BRANCHING COMMANDS
.skip 1
TECO provides an unconditional branch command and a set of
conditional execution commands.
To branch within a command string,  you must be able to name
locations inside the string. TECO permits
location tags of the form:
.skip 1
.index ^^I041##!      Define label
.center
!tag!
.skip 1
to be placed between any two commands in a command string.
The name "tag" will be associated with this location when the
command string is executed. Tags may contain any number of
ASCII characters and any character except
an exclamation mark. (When using the @ form of this command,
any character except the delimiter is legal.)
Since tags are
ignored by TECO except when a branch command references the
tagged location, they may also be used as comments within
complicated command strings.
.skip 1
The unconditional branch command is the O command which has
the form:
.skip 1
.index ^^I117##O      Go to label
.center
Otag`
.skip 1
where "tag" is a location named elsewhere in the command string
and "`" signifies a _<DELIM_>. When an O command is
executed, the next command to be executed will be the one that follows
the tag referenced by the O command. Command execution
continues normally from this point.
.skip 1
Use of the O command is subject to two restrictions.
First, if an O command is stored in a Q-register as part of a command
string which is to be executed by an M command, the tag referenced
by the O command must reside in the same Q-register.
.skip 1
Second, an O command
which is inside a command loop may not branch to a tagged location
preceding the command loop. However, it is always possible to
branch out of a command loop to a location which follows the command
loop and then branch to the desired tag.
.skip 1
The string argument in the O command has the same format as the string
arguments in the search and E commands.  String build characters such
as _^EQq can be embedded within the string in TECO-11.
Also, in TECO-11 and TECO-10, the O command may
be @-sign modified.  In that case, the syntax of the command would
be @O/tag/ where / represents any delimiting character that does not
appear within the tag.
.skip 1
Branching into a conditional poses no problems, but branching into
a command loop will causes unpredictable results.
.skip 1
Although tags may contain any sequence of ASCII characters, good programming
practice dictates that tags should not contain unusual characters (such as
space, comma, ESCAPE, etc.) and that they should be mnemonic for the
piece of code to which they refer.
.skip 1
There are many other branching commands.  Most of these are considerably
faster than the O command and should be used wherever convenient.
They are all described in the table below.
.skip 1

.test page 30
.center
TABLE 5-13: BRANCHING COMMANDS
.skip 1
.left margin 15
.ts 15
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
Otag`	This command causes TECO to branch to the first occurrence of the
specified label (tag) in the current macro level.  In TECO-8 and TECO-11,
branching to the left of the start of the current iteration is not permitted,
and this command will only look for an occurrence of the specified tag
following the _< of the current iteration, if you are in an iteration.
In any case, branching out of an iteration is poor programming practice.
Command execution resumes at the first character after the delimiter
terminating the specified tag.
Using this syntax, any character except _<ESC_> is permitted in the tag
specification.
The usual string build characters are permitted when specifying the tag.
.skip 1
.indent -10
@O/tag/	Equivalent to Otag` except that a delimiter (shown here as /) is used
before and after the specified tag.  Any character other than that delimiter
is permitted inside the tag.
The usual string build characters are permitted when specifying the tag.
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I117a#nO     Computed goto
nOtag0,tag1,tag2,...`
.break
This command causes TECO to branch to the tag specified
by the nth tag in the accompanying list.  The string argument to this command
consists of a sequence of tags separated by commas.  The tags may contain
any characters other than comma or _<ESC_>; however, good programming practice
suggests that the tags should consist only of letters and digits.  There must
be no intervening spaces since these would be considered part of the tag.
If n is out of range, or if n selects a null tag,
then command execution continues with the first command
following the _<DELIM_> that delimits this command.
(A null tag would be signified in the list by two adjacent commas.)
.break
[TECO-11 only]
.skip 1
.indent -10
n@O/tag0,tag1,tag2,.../
.break
Same as the preceding command except that the list
of tags is bracketed by a delimiter shown here as "/".  The delimiter
can be any character that does not appear within the list of tags.
In particular, using comma for the delimiter would not be very useful.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I073##_;      Exit iteration on search failure
;	This command causes TECO to branch out of the current iteration,
if the immediately preceding search (or search and replace) command
failed.  In that case, control resumes at the character following the
matching _> at the end of the current iteration.  On the other hand,
if the preceding search succeeded, command execution continues with the
character following the ;.  If this command is encountered from outside
of an iteration (in the current macro level), then the ?SNI error message
is issued.

.skip 1
.indent -10
.index ^^I073a#n_;     Exit iteration if n is positive
n;	This command causes TECO to branch out of the current iteration
if the value of n is greater than or equal to 0.  In that case, command
execution resumes at the character following the matching _> at the end
of the current iteration.  On the other hand, if n is less than 0,
command execution continues with the character following the ;.  If this
command is encountered from outside of an iteration
(in the current macro level),
then the ?SNI error message is issued.
.skip 1
.indent -10
.index ^^I073c#:_;     Exit iteration on search success
:;	This command causes TECO to branch out of the current iteration
if the immediately preceding search (or search and replace) command
succeeded.  In that case, control resumes at the character following the
matching _> at the end of the current iteration.  On the other hand,
if the preceding search failed, command execution continues with the
character following the ;.  If this command is encountered from outside
of an iteration (in the current macro level), then the ?SNI error message
is issued.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I073d#n:_;    Exit iteration if n is negative
n:;	This command causes TECO to branch out of the current iteration
if the value of n is less than 0.  In that case, command
execution resumes at the character following the matching _> at the end
of the current iteration.  On the other hand, if n is
greater than or equal to 0,
command execution continues with the character following the ;.  If this
command is encountered from outside of an iteration
(in the current macro level),
then the ?SNI error message is issued.
.break
[TECO-11 only]
.skip 1
.indent -10
'	This "command" is actually part of the syntax of TECO conditionals.
It has no affect if "executed" other than to signify termination of the
current conditional level.  If an argument is specified to this command,
the result is not defined.  (Arguments pass through this command on TECO-11.)
Conditionals are described in section 5.14.
.skip 1
.indent -10
|	This "command" is actually part of the syntax of TECO conditionals.
If executed, it causes control to branch to the end of the conditional.
Command execution resumes with the character following the ' that ends the
current conditional with the ELSE clause being skipped.
.skip 1
.indent -10
_>	This "command" is actually part of the syntax of TECO iterations.
If executed, it causes TECO to bump the current iteration count by 1 and
test to see if the resulting count is equal to the maximum count permitted
for the iteration (specified as an argument before the matching _<).
If the iteration count has not expired, then control returns to the command
following the _< at the beginning of the current iteration.  If the
iteration has expired, then command execution continues with the character
following this _>.  If this command is encountered outside of an iteration
(within the current macro level), then the ?BNI error message (or its
equivalent) is issued.
.skip 1
.indent -10
.index ^^I106a#F_>     Flow to end of iteration
F_>	This command causes TECO to branch (flow) to the end of the
current iteration.  TECO effectively resumes execution at the matching _>.
The iteration count is tested as usual.
If it has not expired, control returns back to the start of
the iteration with the count having been incremented by 1.
If the count was up, the iteration is exited and control continues
with the first command after the _>.
If this command is encountered outside of an iteration, it has the
same effect as the _<DELIM_>_<DELIM_> command.
.break
[TECO-11 only]

.skip 1
.indent -10
.index ^^I106a#F_<     Flow to start of iteration
F_<	This command causes TECO to branch (flow) to the start of the
current iteration.  TECO effectively resumes execution at the first command
following the _< at the beginning of the current iteration.  The iteration
count is not affected.  If this command is issued outside of an iteration,
it causes TECO to branch back to the start of the current command string
(in the current macro level).
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I106a#F'     Flow to end of conditional
F'	This command causes TECO to branch (flow) to the end of the
current conditional.  TECO effectively resumes execution at the first command
following the ' at the end of the current conditional.  Numeric arguments
are eaten up by this command.  If this command is issued while not in a
conditional,
the ?MAP error (or its equivalent) is issued.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I106a#F|     Flow to ELSE part of conditional
F|	This command causes TECO to branch (flow) to the else clause of the
current conditional.  TECO effectively resumes execution at the first
command following the | at the end of the current THEN clause.  If the
current conditional has no ELSE clause, or if an unmatched ' is encountered
before an unmatched |, then control resumes at the command following the ' .
Numeric arguments are eaten up by this command.  If this command is issued
while not in a conditional, the ?MAP error (or its equivalent) is issued.
Well-structured programs should not need to use this command.
.break
[TECO-11 only]
.skip 1
.indent -10
.index ^^I033##ESC    String and command terminator
$$	The _<ESC_>_<ESC_> command causes TECO to exit from the current macro
level.  If this command is issued from top level (not from within a macro),
then the command string execution is terminated and
TECO returns to prompt level.
Note that the second _<ESC_> must be a true ESCape and may not be a _^[.
Also, note that both ESCapes must be true TECO commands and not part of the
syntax of some previous command.  That is, the first _<ESC_> does not count
if it is the delimiting ESCape of a string.
Finally, note that these must be real ESCape characters,
and not the user-designated _<DELIM_> character (which TECO understands
as an ESCape only when typed at the console).
.skip 1
.indent -10
n$$	This command causes TECO to exit from the current macro level,
returning the number n as a value.
This value will be used as the numeric argument to
the first command following the macro call.
.skip 1
.indent -10
m,n$$	This command causes TECO to exit from the current macro level,
returning the pair of values m and n as arguments to the first command
following the macro call.  Good programming practice dictates that all
ways of exiting a macro return the same number of arguments.
.skip 1
.indent -10
.index ^^I003##_^C     Stop execution
_^C	The _<CTRL/C_> (Caret-C) command when executed as a TECO command,
causes command execution to stop and control return to TECO's prompt.
No clean-up of push-down lists, flag settings, etc. is done.  This command
lets a macro abort TECO's command execution.
.break
[On TECO-8 and TECO-10, this command causes control to return to the operating
system.]
.break
[On TECO-11, this command returns to the operating system if executed from the
top level.]
.break
Consult the appendices for specific details concerning your operating system.
.skip 1
.indent -10
_^C_<CTRL/C_>
.break
This command causes TECO to unconditionally abort and control
exits from TECO.  Control returns to the operating system.
The second _<CTRL/C_> must be a true _<CTRL/C_> and may not be a Caret-C.
.lm5

.page
.left margin 5
.subtitle #####Conditional Execution Commands
.index ^^O514##        5.14     CONDITIONAL EXECUTION COMMANDS
5.14  CONDITIONAL EXECUTION COMMANDS
.skip 1
All conditonal execution commands are of the form:
.skip 1
.index ^^I042##"      Start conditional
.index ^^I047##'      End conditional
.center
n"X command-string '
.break
###or
.index ^^I174##|      Start ELSE part of conditional
.center
n"X then-command-string | else-command-string '
.skip 1
In the first form of the command,
"n" is a numeric argument on which the decision is based,
"X" is any of the conditional execution commands listed in
table 5-14, and "command string" is the command string which will
be executed if the condition is satisfied.
The numeric argument is separated
from the conditional execution command by a double quote (")
and the command string is terminated with an apostrophe (').
If the condition is not satisfied, the command string
will not be executed;
execution will continue with the first command after the apostrophe.
.skip 1
In the second form of the command, two command strings are specified.
The first one is executed if the condition is satisfied and the second
is executed if the condition is not satisfied.  Only one of the
command strings will be executed.
After execution of the appropriate command string,
control will continue with the first command
after the apostrophe (unless
the command string caused a branch out of the conditional to occur), since
execution of the vertical
bar command (|) causes TECO to scan to the next matching apostrophe.
.skip 1
Conditional commands are similar to the IF-THEN-ELSE constructs that
you find in other structured programming languages, although none
can match the brevity and elegance of TECO's implementation.
Nonetheless, you must use these facilities wisely.
Good programming practice dictates that a branch into the range of
a conditional (from outside that range) should not occur.
.skip 1
Conditional execution commands may be nested in the same manner
as iteration commands. That is, the command string which is to be
executed if the condition on n is met may contain conditional
execution commands, which may, in turn, contain further
conditional execution commands.

.skip 2
.center
TABLE 5-14:  CONDITIONAL EXECUTION COMMANDS
.left margin 15
.skip 1
.ts 15
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
.index ^^I042a#n"A    Test for alphabetic
n"A	Execute the following command string  if n equals the ASCII code for
an alphabetic character
(upper or lower case A to Z).
.skip 1
.indent -10
.index ^^I042c#n"C    Test for symbol constituent
n"C	Execute the following command string  if n is the ASCII code of any
character that is a symbol constituent.
This is usually one of the upper or lower case letters A to Z,
one of the digits 0 to 9, or period, or dollar sign, but may include
additional characters on some operating systems.
Consult the appropriate appendix.
.skip 1
.indent -10
.index ^^I042d#n"D    Test for numeric
n"D	Execute the following command string
if n equals the ASCII code for a digit
(0 to 9).
.skip 1
.indent -10
.index ^^I042e#n"E    Test for equal to zero
n"E	Execute the following command string  if n is equal to zero.
.skip 1
.indent -10
.index ^^I042f#n"F    Test for false
n"F	Execute the following command string  if n is FALSE. Equivalent to n"E.
.skip 1
.indent -10
.index ^^I042g#n"G    Test for greater than zero
n"G	Execute the following command string  if n is greater than zero.
.skip 1
.indent -10
.index ^^I042l#n"L    Test for less than zero
n"L	Execute the following command string  if n is less than zero.
.skip 1
.indent -10
.index ^^I042n#n"N    Test for not equal to zero
n"N	Execute the following command string  if n is not equal to zero.
.skip 1
.indent -10
.index ^^I042r#n"R    Test for alphanumeric
n"R	Execute the following command string
if n equals the ASCII code for an alphanumeric
(upper or lower case A to Z or 0 to 9).
.skip 1
.indent -10
.index ^^I042s#n"S    Test for successful
n"S	Execute the following command string
if n is SUCCESSFUL. Equivalent to n"L.
.skip 1
.indent -10
.index ^^I042t#n"T    Test for true
n"T	Execute the following command string
if n is TRUE. Equivalent to n"L.
.skip 1
.indent -10
.index ^^I042u#n"U    Test for unsuccessful
n"U	Execute the following command string
if n is UNSUCCESSFUL. Equivalent to n"E.
.skip 1
.indent -10
.index ^^I042v#n"V    Test for lower case
n"V	Execute the following command string  if n equals the ASCII code for
a lower case alphabetic character
(lower case A to Z).
.break
[Not in TECO-8]
.skip 1
.indent -10
.index ^^I042w#n"W    Test for upper case
n"W	Execute the following command string  if n equals the ASCII code for
an upper case alphabetic character
(upper case A to Z).
.break
[Not in TECO-8]
.skip
.indent -10
.index ^^I042_<#n"_<    Test for less than zero
n"_<	Identical to n"L
.skip 1
.indent -10
.index ^^I042_>#n"_>    Test for greater than zero
n"_>	Identical to n"G
.skip 1
.indent -10
.index ^^I042=#n"=    Test for equal to zero
n"=	Identical to n"E
.left margin 5

.page
.subtitle #####Retrieving Environment Characteristics
.index ^^O515##        5.15     RETRIEVING ENVIRONMENT CHARACTERISTICS
5.15 RETRIEVING ENVIRONMENT CHARACTERISTICS
.skip 1
The following TECO commands return values of interest to users who want
information about their current job, the operating system,
their terminal, etc.
.skip 1
All negative EJ commands return an operating system dependent value.
Consult the appendices for operating system unique commands.
.skip 2
.center
TABLE 5-15A: RETREIVING ENVIRONMENT CHARACTERISTICS
.skip 1
COMMAND	#####FUNCTION
.skip 1
.ts 15
.left margin 15
.indent -10
.index ^^I105j#nEJ    Return environment characteristics
-1EJ	Return a number representing the computer and operating
system upon which TECO is currently running.  This value has the
form 256m+n where m is a number representing the computer in use
and n is a number representing the operating system that is running.
Current values of m and n are:
.skip 1
.left margin 25
.ts 35,45,50
.nofill
Computer (m)	Operating System (n)
.skip 1
0	PDP-11	0	RSX-11D
.break
		1	RSX-11M
.break
		2	RSX-11S
.break
		3	IAS
.break
		4	RSTS/E
.break
		5	VAX/VMS
.break
			(compatibility mode)
.break
		6	RSX-11M+
.break
		7	RT-11
.break
1	PDP-8	0	OS/8
.break
2	DEC-10	0	TOPS-10
.break
3	DEC-20	0	TOPS-20
.break
4	VAX-11	0	VAX/VMS
.break
			(native mode)
.skip
.ts 15
.left margin 15
.fill
.indent -10
0EJ	Returns a value equal to your job number.  On single-user
systems, this is always a 0.
.skip 1
.indent -10
1EJ	Returns a value equal to your console keyboard number
(the keyboard you detached from if you are running detached).
On single-terminal systems, this is always a 0.
.skip 1
.indent -10
2EJ	Returns a value equal to your operating system's user identification
number.  This may be called your UIC, PPN, Group, etc. under
various operating systems.  Consult the appendices for more
information.
.skip 2
.test page 20
.center
TABLE 5-15B: SETTING ENVIRONMENT INFORMATION
.skip
.indent -10
.index ^^I105j#m,nEJ  Set environment characteristics
n,1EJ	Set the terminal number to receive output.
This will not affect terminal input.
Your job will remain attached to, or detached from,  your terminal,
whichever it was before.
Output will only occur if the specified terminal is ASSIGNed with a
monitor ASSIGN command (you may _^C, issue that command and continue) and
if your job has POKE privileges.
This command also sets the terminal to be reattached
if the set detach flag (64_&ET) is cleared.
The reattaching operation requires [1,2] or JACCT privileges.
.break
[TECO-10 only]
.skip
.indent -10
n,2EJ	Sets your [p,pn] to n where n has the same format as the number
returned by the 2EJ command.  Issuance of this command requires the
appropriate privileges.
.break
[TECO-10 only]
.left margin 5

.page
.subtitle #####Mode Control Flags
.index ^^O516##        5.16     MODE CONTROL FLAGS
5.16 MODE CONTROL FLAGS
.skip 1
TECO has flags which control various aspects of its operation.
You can find a flag's current setting
by executing its command name without an argument;
the current setting of the flag is returned as a value. A flag may be
set to a specific value by executing its command name preceded by a
numerical argument; the flag is set to the value of the argument.
.skip
The following table describes the commands that set and clear flags;
_<flag_> represents any of the flags listed below.
.skip 2
.center
TABLE 5-16A: FLAG MANIPULATION COMMANDS
.skip
.left margin 20
.ts 20
.i -15
_<flag_>	Return value of flag.
.skip
.i -15
n_<flag_>	Set value of flag to n.
.skip
.i -15
m,n_<flag_>	In the flag, turn off those bits specified by m and
turn on those bits specified by n.
.skip
.i -15
0,n_<flag_>	Turn on the bits in the flag specified by n.
.skip
.i -15
m,0_<flag_>	Turn off the bits in the flag specified by m.
.skip 2
.lm 5
The flags have the following functions:
.skip 2
.center
TABLE 5-16B:  MODE CONTROL FLAGS
.skip 1
COMMAND	#####FUNCTION
.skip 1
.left margin 15
.ts 15
.indent -10
.index ^^I105d#ED     Edit mode flag
ED	The edit level flag,
a bit-encoded word that controls TECO's behavior in various
respects.
Any combination of the individual bits may be
set as the user sees fit.
The bits have the following functions:
.left margin 25
.skip 1
.ts 15,25
.indent -10
ED_&1	Allow caret (_^) in search strings.
If this bit is clear, a caret (_^) in a search string
modifies the immediately following character to become a control
character. When this bit is set, a caret in a search string
is simply the literal character caret.
If you are editing a file that contains many caret characters
(e.g., a RUNOFF file with case control), you will want to set this bit.
(For control of upper/lower case matching in search strings,
see the _^X flag.)
.skip 1
.indent -10
ED_&2	Allow all Y and __ commands.
If this bit is set, the Y (Yank) command and __ (underscore or backarrow)
command work unconditionally as described earlier in the manual.
If clear, the behavior of the Y and __ commands are
modified as follows:  If an output file is open and text exists in
the text buffer, the Y or __ command will produce an error message
and the command will be aborted leaving the text buffer unchanged.
Note that if no output file is open the Y and __ commands act
normally.  Furthermore, if the text buffer is empty the Y
command can be used to bring in a page of text whether or not
an output file is open (HKY will always work).  The
__ command will succeed in bringing one page of text into an empty text buffer
but will fail to bring in successive pages if an output file is open.
.skip
.indent -10
ED_&4	When this bit is clear,
TECO will try to expand memory as much as it can in order to try to fit
entire pages into memory when requested to do so.
If this bit is set, arbitrary memory expansion will
not occur.  In that case, TECO will expand memory only on the A
command and not on the Y, P, or N commands.
This bit is always set
in TECO-10 and has no significance in TECO-8 or in TECO-11 on RT-11.
.skip
.indent -10
ED_&8	Reserved for future use by TECO-8.
.skip
.i -10
ED_&16	Allow failing searches to preserve dot.  If this bit is set, then
whenever a search fails, the original location of the text buffer pointer
will be preserved.  If this bit is clear, then failing searches (other than
bounded searches) leave the text buffer pointer at pointer position 0 after
they fail.
.break
[not in TECO-8]
.skip
.i -10
ED_&32	Enable immediate ESCape-sequence commands.
If this bit is set, TECO will recognize an ESCape-sequence key
pressed immediately after the prompting asterisk as an immediate
command.
See section 4.4 for a description of immediate ESCape-sequence commands.
.skip
If this bit is clear (the default case),
TECO will treat an ESCape coming in immediately
after the asterisk prompt as a _<DELIM_>
That is, TECO will hear a discrete _<ESC_> character:
an ESCape sequence will therefore be treated not as a unified command,
but as a sequence of characters.
.break
[TECO-11 only]
.skip
.i -10
ED_&64	Only move dot by one on multiple occurrence searches.
If this bit is clear, TECO treats nStext` exactly as n_<1Stext`_>.
That is, skip over the whole matched search string when proceeding
to the nth search match.  For example, if the text buffer contains
only A's, the command 5SAA` will complete with dot equal to ten (10).
If this bit is set, TECO increments dot by one each search match.
In the above example, dot would become five (5).
.break
[TECO-11 only]
.skip 1
.indent -10
ED_&128	Automatic refresh inhibit.
If scroll mode is enabled (that is, if 7:W is non-zero),
TECO normally refreshes the text buffer display just before
printing its * prompt.
Setting the 128 bit in ED inhibits this automatic refresh.
(Inhibiting the automatic refresh may be useful when running
over a slow terminal line;  see also the _^W immediate command.)
.break
[TECO-11 only]
.skip 1
.left margin 15
The initial value of ED_&1
is system dependent (See appendices).
The initial value of the other bits in the ED flag is 0.
.skip 1
.index ^^I105e#EE     ESCape surrogate character
.indent -10
EE	This flag is initially zero,
and (unless the 8192 ET bit is set) TECO recognizes
only the ESCape as its _<DELIM_> character from the console.
If it is desired to use another character as an
ESCape surrogate (as when working from a terminal lacking
.index ^^I104m#DELIM  Character typed as surrogate for ESCape
an ESCape key), the ASCII value of that other character
may be set in the EE flag.
Note that when an ESCape surrogate is set, the designated character
(when typed at the console) is received by TECO as an ESCape --
that character is no longer directly available at the keyboard.
When an ESCape surrogate is active, an ESCape received by TECO
.index ^^I140a#`      ESCape surrogate typeout
echos as accent grave;  when none is active, an ESCape received by TECO
echos as dollar sign.
This feature is provided for the benefit of newer
terminals which lack an ESCape key.
(8192ET and 96EE both set ` as ESCape surrogate.
EE, however, can be used to designate a character other than accent grave.)
.break
[RSTS/E only]
.skip 1
.index ^^I105h#EH     Help level flag
.indent -10
EH	The help level flag,
which controls the printing of error messages and failed commands.
(See also the / command.)
.skip 1
.lm 25
.indent -10
EH_&3	The low two bits of EH (value range 0 through 3) control
the printing of TECO error messages as follows
(assuming the low two bits have value m):
.skip 1
If m is
equal to 1, error messages are output in abbreviated form ("?XXX").
If m is equal to 2, error messages are output in normal form
("?XXX	Message").
If m is equal to 3,
error messages are output in long or "War and Peace" form, that is,
a paragraph of informative material is typed following the
normal form of the error message.
In TECO-11, m=3 is implemented only on VAX/VMS.
(See section G.13 for a description of HELP facilities available on VAX/VMS.)
In other TECO-11's, case m=3 is equivalent to m=2.
.skip 1
.i -10
EH_&4	If this bit of EH is set,
the failing command is also output up to and
including the failing character in the command followed by a question
mark. (Just like TECO's response to the typing of a question
mark immediately after an error.)
This bit is not supported by TECO-10.
.skip 1
.lm15
The initial value of the EH flag is 0 which is
equivalent to a value of 2.
.skip 1
.index ^^I105o#nEO    Set TECO to function as version n
.indent -10
EO	Setting  the value of the EO flag to n
allows features that were peculiar to that version of TECO to work.
.br
[TECO-10 only]

.skip 1
.index ^^I105s#ES     Search verification flag
.indent -10
ES	The search verification flag,
which controls the text typed out after searches.
.skip 1
If n is equal to 0, nothing is typed out after searches.
If n is -1, the current line is typed out
when a successful search at top level is
completed (i.e., a V command is done automatically).
If n is between 1 and 31, the current line is typed out with
a line feed immediately following the position of the pointer to
identify its position.
If n is between 32 and 126, the current line is typed
out with the ASCII character corresponding to the value of n
immediately following the position of the pointer to identify its
position.
If you want to see more than one line of type out, use the form
m*256+n. The n is the same as above. The m is the
number of lines of view. For example, 3*256+_^_^_! would give two
lines on either side of the found line, and the found line with
the character "!" at the pointer's position.
The ES flag
does not apply to searches executed inside iterations or macros; lines found
inside iterations or macros are never typed out.
.break
[Not in TECO-8]
.skip 1
The initial value of ES is 0.
.skip 1
.index ^^I105t#ET     Type out control flag
.indent -10
ET	The ET flag is a bit-encoded word controlling TECO's treatment
of the console terminal. Any combination of the individual bits may be set.
The bits provide the following functions, when set:
.left margin 25
.skip 1
.indent -10
ET_&1	Type out in image mode. Setting this bit
inhibits all of TECO's type out conversions. All characters are
output to the terminal exactly as they appear in the buffer or _^A
command.
For example, the changing of control characters
into the "caret/character" form,
and the conversion of _<ESCAPE_> to ` (accent grave)
or to $ (dollar sign) are suppressed.
This mode is useful for driving
displays. It should be used with caution, especially if you
are talking to TECO over a dial-up line.
.skip 1
.indent -10
ET_&2	Process DELETEs and _<CTRL/U_>s in "scope" mode.
Scope mode processing uses the cursor control features of
CRT type terminals to handle character deletion by actually
erasing characters from the screen.
.skip 1
.indent -10
ET_&4	Read lower case. TECO normally converts all lower case alphabetics
to upper case on input. Setting this bit causes lower case alphabetics
to be input as lower case. TECO commands and file specifiers may be
typed in either upper or lower case. For the purpose of searches,
however, upper and lower case may be treated as different characters.
(See _^X flag).
.skip 1
.indent -10
ET_&8	Read without echo for _^T commands.
This allows data to be read by the
_^T command without having the characters echo at the terminal.
Normal command input to TECO will echo.
.skip 1
.indent -10
ET_&16	Cancel _<CTRL/O_> on type out.
Setting this bit will cancel any outstanding _<CTRL/O_>
when the next type out occurs. After TECO has canceled the
_<CTRL/O_>, it will automatically clear the bit.
.skip 1
.indent -10
ET_&32	Read with no wait.  This enables the
_^T command to test if a character is available at
the user terminal.  If a character has been typed, _^T returns
the value of the character as always.  If no character has been
typed, _^T immediately returns a value of -1 and execution
continues without waiting for a character.
.skip 1
.indent -10
ET_&64	Detach flag (See appendices).
.skip 1
.indent -10
ET_&128	"Abort-on-error" bit.
Initially set, when TECO starts up;
cleared each time TECO issues its asterisk prompt.
When this bit is set:
1)#all informational messages are supressed, 2)#any _<CTRL/C_>
causes the immediate termination of TECO, and 3)#any error
causes the termination of TECO after the error message is printed.
.skip 1
.indent -10
ET_&256	If this bit is set, all lines output to the
terminal are truncated to the terminal's width if needed.
(RSTS/E, RSX-11, and VAX/VMS only.
On VAX/VMS, this bit reflects and can change the state of
the terminal characteristic WRAP/NOWRAP;
TECO restores the terminal characteristic to its
original state upon exit.)
.skip 1
.indent -10
ET_&512	If this bit is set, the scope "WATCH"
feature of TECO is present and your terminal is a scope
type terminal. This bit is a read-only bit; its state cannot
be altered.
(See Section 5.17.)
.skip 1
.indent -10
ET_&1024	If this bit is set, the refresh scope "WATCH"
feature of TECO is present and a refresh scope is available.
This bit is a read-only bit; its state cannot be altered.
(See Section 5.17.)
.skip 1
.indent -10
ET_&4096	This bit reflects and can change the state of
the terminal characteristic (maintained by the operating system)
recording whether the terminal is capable of handling eight-bit
character codes.
Upon entry to TECO, this bit reflects the characteristic
as recorded with the operating system at that time.
If you change this bit, the operating system is directed
to change its recording of the characteristic to match.
.skip
Because the data manipulated (edited) by TECO can consist
of all 256 possible byte codes, the way data characters
are displayed (typed out) at the console varies depending
upon the setting of the 4096 ET bit.
.skip
If the bit is clear (meaning that TECO understands your terminal
to be 7-bit), valid DEC multi-national codes are typed out as
_<xy_> (where xy is the corresponding LK201 keyboard compose sequence).
.skip
If the bit is set (meaning that TECO understands your terminal
to be 8-bit), valid DEC multi-national codes are typed out as
themselves.
.skip
In either case, unprintable or illegal codes in the 128 to 255 range
are typed out as [ab] (where ab is the corresponding hexadecimal code).
The scope watch feature (screen buffer display, controlled by
the W commands) always uses the _<xy_> and [ab] notations.
.skip 1
.indent -10
ET_&8192	Accent grave as ESCape surrogate.
.break
[TECO-11 only]
.skip
If this bit is set, TECO recognizes the `
.index ^^I104m#DELIM  Character typed as surrogate for ESCape
(accent grave) character as an ESCAPE surrogate.
That is, an ` character typed at the console will be
recognized as a command _<DELIM_> character, and passed to
TECO as an ESCape.
(This interpretation applies only to _<DELIM_>s typed at
the console; ESCape characters must still be used in
macros and indirect files.)
When an ESCape surrogate is set, an ESCape received by TECO
.index ^^I140a#`      ESCape surrogate typeout
echos as accent grave;  when none is set, an ESCape received by TECO
echos as dollar sign.
This feature is provided for the benefit of certain newer
terminals which lack an ESCape key.
(See also the Introduction, and the EE flag.)
.skip 1
.indent -10
ET_&32768	If this bit is set and a _<CTRL/C_> is typed,
the bit is turned off,
but execution of the current command string is allowed to continue.
This allows a TECO macro to detect
typed _<CTRL/C_>s.
.break
In TECO-8, this bit is the 2048's bit rather than the 32768's bit.
.skip 1
.left margin 15
.ts 15
The initial setting of ET is operating system dependent (See
appendices). In addition, some of the ET bits are automatically
turned off by certain error conditions.
.skip 1
.i -10
.index ^^I105u#EU     Case flagging flag
EU	The upper/lower case flag.
.skip 1
If n is -1, no case flagging of any type is performed on
type out, lower case characters are output as lower case
characters.  If n is 0, lower case characters are flagged by outputting
a ' (quote) before the lower case character and the lower case
character is output in upper case; upper case characters are unchanged.
If n is +1, upper case characters are flagged by outputting a ' (quote)
before each one and then the upper case character is output; lower case
characters are output as their upper case equivalents.
.skip 1
The initial
value of the EU flag is -1 if TECO can tell from the operating
system that the user's terminal supports display of lower case
characters; otherwise te initial value is 0.
Consult the appendices for more details.
.skip 1
.ts 15
.indent -10
.index ^^I105v#EV     Edit verify flag
EV	The edit verify flag
is decoded just like the ES flag.
Just before TECO prints its prompting *, the EV flag is checked.
If it is non-zero the lines to be viewed are printed on the terminal.
.skip 1
The initial value of the EV flag is 0.
.br
[TECO-11 only]
.indent -10
.index ^^I030##_^X     Search mode flag
.skip 1
_^X	The search mode flag.
.break
[Not in TECO-8]
.skip 1
If _^X is 0, the text argument
in a search command will match text in the text buffer independent of
case in either the search argument or the text buffer.
The lower case alphabetics match the upper case alphabetics,
and "_`", "_{", "_|", "_}", "_~"
match "@", "[", "_\", "]", "_^" respectively.
In addition, DEC multinational characters having diacritical
marks are regarded as matching the corresponding characters
without diacritical marks.
.skip
If _^X is -1,
the search will succeed only if the text argument is identical
to text in the text buffer.
(This means that lower case does NOT match upper case,
nor does a character having a diacritical mark match one without).
.skip 1
The initial value of the _^X flag is 0.
(For control of caret or uparrow treatment in search strings,
see the ED_&1 bit above.)
.left margin 5

.page
.subtitle #####Scope Commands
.index ^^O517##        5.17     SCOPE COMMANDS
5.17 SCOPE COMMANDS
.skip 1
.index ^^I127##W      Scope "WATCH"
The W command (scope "WATCH") is present in most
implementations of TECO.
There are two different variations of the W command.
Neither, one, or both may be present. ET flag Bits 9 and 10
indicate which variation(s) are configured and can be used.
.skip 2
.subtitle #####Video Terminal Scope Commands
.index ^^O5171#        5.17.1      Video Terminal Scope Commands
5.17.1 Video Terminal Scope Commands
.skip 1
If the VT support is present and your terminal is
a video terminal (such as a VT05, VT52, or VT100),
ET flag Bit 9 (value 512) will be on.
.s2
.tp 10
.center
TABLE 5-17A: VIDEO TERMINAL WATCH COMMANDS
.tab stops 15
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
-1W	Refresh the terminal's screen to show the contents of the
text buffer.
.skip 1
.indent -10
-nW	Tell the video terminal screen refresher that the top n-1 lines
of the screen have been altered. The screen refresher will completely
redraw the top n-1 lines of the screen upon the next -1W command.
.skip 1
.indent -10
nW	Place the default cursor line at line n of the
screen. The initial default cursor line is line 16.
This command makes the window support forget the screen image and
any special associated modes (SEEALL, MARK, HOLD).
.skip 1
.indent -10
0W	Equivalent to "16W".
.skip 1
.indent -10
W	Forget screen image and special scope modes.
.skip 1
.indent -10
-1000W	Forget that output was done.  Normally, if the user outputs to the
terminal with a command such as T, n_^T, or _^A, TECO will believe that
the window needs updating, and upon the next -1W command, TECO will
refresh the entire window display.  Issuing the -1000W command informs
TECO that the output command did not destroy the window.
.break
[TECO-11 only]
.left margin 5

.page
The :W commands are used to interrogate and set (see m,n:W below)
video terminal status information,
as well as implement some of the more advanced features of
the video terminal "WATCH" functions.
.s2
.tp 10
.center
TABLE 5-17B: VIDEO TERMINAL STATUS COMMANDS
.lm15.ts15,25
.s1.i-10
COMMAND	#####FUNCTION
.s1
.indent -10
.index ^^I127a#n:W    Return scope characteristics
0:W	Return a number representing the type of scope in use
as the editing terminal.  Current values are:
.break
.skip 1
0	VT52
.break
1	VT61 [TECO-10 only]
.break
2	VT100 in VT52 mode
.break
4	VT100 in ANSI mode
.break
6	VT05
.break
8	VT102 in ANSI mode
.break
10	VK100 (GIGI)
.skip 1
.indent -10
:W	Equivalent to 0:W
.skip 1
.indent -10
1:W	Return or set the horizontal size of the user's editing scope.
This number represents the number of character positions available
horizontally along the face of the scope.
.skip
If this value is changed (see m,n:W below),
the operating system is automatically informed of the
terminal's new width setting,
and the appropriate control sequence is issued
to physically change the terminal's screen mode
(80 versus 132 column mode) if needed.
.skip 1
.indent -10
2:W	Return or set the vertical size of the user's editing scope.
This number represents the number of lines of text that can
appear on the screen of the terminal.
This number is affected by use of the m,7:W command
(set scrolling region).
.skip 1
.indent -10
3:W	Return or set SEEALL mode.
0 represents off and -1 represents on.
In SEEALL mode, a visible indication is shown in the window for every
character, including characters that normally don't print.
.skip 1
.indent -10
4:W	Return or set "mark" status of window support.
0 means that no mark has been set.
A value of n means that a mark has been set at buffer ("dot") position n-1.
This status is used by software that uses the window support
and by the support itself in the case of scopes that support reverse video.
.skip 1
.indent -10
5:W	Return or set the hold mode indicator.
0 means off, -1 means hold whole screen,
and a positive value, n, means hold all but top and bottom n lines.
If hold mode is on, then scrolling is inhibited until the cursor is
about to run off either end of the screen.
This makes the window display more palatable on terminals on a slow line.
If hold mode is on, the window support will scroll the window as necessary
in an attempt to keep the cursor centered.
.skip 1
.indent -10
6:W	Returns buffer pointer position of character that was in the
upper left hand corner of the window as of the last -1W command.
.skip 1
.indent -10
7:W	Return or set the number of lines in the scrolling
(command dialogue) portion of the screen.
If n is zero, then split screen scrolling is disabled.
When split screen scrolling is enabled, n lines (as specified)
are reserved at the bottom of the screen to scroll the terminal interaction.
The remainder of the screen is used as a display window into the text buffer,
and is automatically updated by TECO immediately before each command prompt.
This feature functions only on terminals capable of split screen scrolling,
such as members of the VT100 and VT200 families.
.skip
The value of n must be greater than 1,
and scope height minus n must be greater than 9.
.skip
Whenever the scrolling region's size is modified
(that is, whenever an m,7:W command is executed),
TECO alters the scope's height (2:W) accordingly.
For example, if 2:W is currently returning a value of 24,
then after a 5,7:W command 2:W will return a value of 19.
Executing a 0,7:W will restore 2:W to 24.
.skip 1
.indent -10
.index ^^I127b#m,n:W  Set scope characteristics
m,n:W	Sets the entity represented by n:W to m and returns a value.
If the new setting has been accepted, the returned value is m.
Elsewise, the returned value is either the old value associated with n:W
or whatever new setting was actually set.  In all cases, the returned
value reflects the new current setting.
Specific operating systems may put restrictions on the valid values for m.
.s
Note that each m,n:W command returns a value,
even if your only intent is to set something.
Good programming practice suggests following any command
which returns a value with _<DELIM_> or _^[ if you don't intend
that value to be passed to the following command.
.skip 2
.lm5
.subtitle #####Refresh Scope Commands
.index ^^O5172#        5.17.2      Refresh Scope Commands
5.17.2 Refresh Scope Commands
.skip 1
If refresh scope support is present and a refresh scope is
available (such as a VS60 or a VR12),
bit value 1024 of the ET flag will be on.
.s2
.tp 10
.center
TABLE 5-17C: REFRESH SCOPE WATCH COMMANDS
.tab stops 15
.left margin 15
.skip 1
.indent -10
COMMAND	#####FUNCTION
.skip 1
.indent -10
W	Update the refresh scope screen to reflect the contents
of the text buffer surrounding the text pointer ("dot").
.skip 1
.indent -10
0W	Turn off the refresh scope display.
.skip 1
.indent -10
nW	Set the number of lines to be displayed around the
text pointer to n.
.left margin 5

.page
.subtitle #####Programming Aids
.index ^^O518##        5.18     PROGRAMMING AIDS
5.18 PROGRAMMING AIDS
.skip 1
In addition to the command string editing capabilities described in
Chapter 4, TECO includes various features to facilitate programming.
These are described in the following sections.
.skip 2
.index ^^O5181#        5.18.1      Text Formatting
5.18.1  Text Formatting
.skip 1
.index ^^I012##LF     Line terminator_; Ignored in commands
.index ^^I015##CR     End input line_; Ignored in commands
.index ^^I040##SP     Ignored in commands
The characters carriage return, line feed, and space
are ignored in command strings, except when they appear as part of
a text argument. Numeric
values are not affected.  (Inserting a space between digits within a digit
string may cause unpredictable results).
These characters may be inserted between any two
TECO commands to lend clarity to a long command string. The
carriage return/line feed combination is particularly useful
for typing command strings which are too long
to fit on a single line.
.skip 1
If the character form feed is encountered in a command string and
it is not part of a text argument, a form feed is output to the
terminal. This can be used to format terminal output.
On TECO-10, execution of the form feed command will clear the
screen if TECO is in scope command string editing mode (2_&ET on).
.skip 2
.index ^^O5182#        5.18.2      Comments
5.18.2   Comments
.skip 1
One of the most powerful features of TECO is its ability to
store very long command strings so that a given sequence
of commands may be executed whenever needed. Long command strings
may be thought of as editing programs and, like any other type of
program, they should be documented by means of comments.
.skip 1
Comments may be inserted between any two commands
by using a tag construction of the form:
.skip 1
.indent 23
!THIS IS A COMMENT!
.skip 1
Comments may contain any number of characters and any characters
except the special characters.
Thus a long TECO macro might look like:
.skip 1
.left margin 15
.nofill
 TECO commands	!This comment describes line 1!
 TECO commands	!This comment describes line 2!
 more commands
 more commands	!end of comment string!
.fill
.left margin 5
.skip 1
Do not use _<TAB_> characters to
format long command strings! Only _<space_>, _<CR_>, and
_<LF_> can be used to format command strings since _<TAB_>
is an insertion command.
.skip 1
Good TECO code is well structured and adequately commented.
Unfortunately, massive comments in a TECO macro tend to slow execution,
especially if they appear within text scanned by
GOTOs or unsatisfied conditionals.  Unless speed is not a
goal, it is common practice in larger TECO programs
to strip out comments before loading up TECO macros.
Thus the TECO program can be adequately commented, yet
still run efficiently.
.skip 1
A large TECO program can start
by placing a comment stripper in a Q-register, say Q-register C.
Then it can successively put subroutines (macro text) into
the text buffer, do an MC, and load the appropriate Q-register
with the resulting text buffer, until all the subroutines have been
loaded. Finally, Q-register C can be zeroed and the program started.
.skip 1
In order for you to strip the comments without losing essential
tags, you must make a convention for the format of
your comments so that your comment stripper can distinguish them from
tags.  There are two common conventions. In one, the
first character in every comment after the initial ! is some
distinctive character, such as *.  In the other, all tags start in the
left margin and all comments are embedded within the text.
Any large comment that wants to be on a line by itself starts with
a _<space_> before the !.  Both methods allow for readable code
and easy comment stripping.

.skip 2
.index ^^O5183#        5.18.3      Messages
5.18.3   Messages
.skip 1
The _<CTRL/A_> command may be used to print out a statement at
any point during the execution of a command string. The _<CTRL/A_>
command has the general form:
.skip 1
.center
_^Atext_<CTRL/A_>
.s 1
.center
or
.s 1
.center
@_^A/text/
.skip 1
The first _^A is the actual command, which may be entered
by striking the control key and the A key simultaneously or by
typing a caret (uparrow) followed by an A character.
The second _<CTRL/A_> character of the first form shown
is the command terminator, which
must be entered by typing the control key and the A key
simultaneously.
In the second form, the second occurrence of the delimiting
character (shown as slash in the example) terminates the message.
Upon execution, this command causes TECO
to print the specified message at the terminal.
.skip 1
The _^Amessage_<CTRL/A_> command is particularly useful when it precedes
a command whose numeric argument contains _^T or _^F characters.
The message may contain instructions notifying the user
as to what sort of input is required.
.skip 2
.index ^^O5184#        5.18.4      Tracing
5.18.4   Tracing
.skip 1
.index ^^I077##?      Toggle trace mode
A question mark entered betweeen any two commands in a command
string causes TECO to print all subsequent commands at the
terminal as they are executed. Commands will be printed as they
are executed until another question mark character is encountered
or the command string terminates.

.skip 2
.test page 30
.index ^^O5185#        5.18.5      Convenience Characters
5.18.5   Convenience Characters
.skip 1
In addition to the characters mentioned in Section 5.18.1, there are
several characters which have no special meaning to TECO but which may be used
to help format your TECO programs and command strings.
Judicious use of these commands will make your program easier
to read and maintain.
These characters are described in the table below:
.skip 2
.center
TABLE 5-18A: CONVENIENCE CHARACTERS
.skip 1
.lm 25
.TS 25
.indent -20
CHARACTER	MEANING
.skip 1
.indent -20
.index ^^I000##NULL   Discarded on input_; Ignored in commands
_<NULL_>	A null (ASCII 0) encountered as a TECO command will be ignored.
Numeric values are not affected.  A null read in from an input file will
be discarded (except under RSX-11 and VAX/VMS).
A null typed in from a terminal will be ignored.
.skip
.indent -20
.index ^^I033a#ESC    String and command terminator
_<ESCAPE_>	An ESCape that is executed as a TECO command (as distinct from
an immediate action command or an ESCape that is part of the syntax of some
other TECO command) is ignored by TECO.
However, any pending numeric values are discarded.
This command is useful for discarding the value returned
from a command (such as n%q or m,n:W) when you don't want that
value to affect execution of the following command.
.skip
.indent -20
.index ^^I033b#_^[     String and command terminator
_^[	Same as _<ESCAPE_>. Like any other TECO command that is a
control character, ESCape may be entered in up-arrow mode.
Sometimes easier to type, _^[ is also useful on systems whose line-printer
spoolers do not visibly print the ESCape character.
.skip
Any pending numeric values are discarded.
This command is useful for discarding the value returned
from a command (such as n%q or m,n:W) when you don't want that
value to affect execution of the following command.
.skip
.indent -20
_<ALTMODE_>	Some older terminals may have no ESCape key, but instead
a key labelled ALTMODE or PREFIX which sends TECO a character
whose ASCII value is 175 or 176.  In such a case, TECO will treat these
characters as if they were typed in as an ESCape (octal 33), provided
lower to upper case conversion is enabled.
.skip
.index ^^I044##$      Separate TECO commands
.indent -20
$ (dollar sign)	Same as _<ESCAPE_>, but as a command only,
not as a string terminator.
.break
[TECO-10 only]
.skip
.lm5
Note that _<TAB_> and _<FORM FEED_> are valid TECO commands and must not
be used as aids to formatting TECO programs.

.skip 2
.index ^^O5186#        5.18.6      Memory Expansion
5.18.6   Memory Expansion
.skip 1
The nEC command can be used to make TECO reclaim lost space after
it had expanded memory usage.  nEC tells TECO to expand or contract until
it uses nK words of memory.  If this is not possible, then TECO's memory
usage does not change.  The 0EC command tells TECO to shrink back to
its original size (use the least amount of memory possible).
.break
[TECO-10 only]
.skip 2
.test page 30
.index ^^O5187#        5.18.7      Case Control
5.18.7   Case Control
.skip 1
The _<CTRL/V_> and _<CTRL/W_> TECO commands are used to specify automatic
case control for alphabetic characters typed into strings.
.skip 2
.center
TABLE 5-18B: CASE CONTROL CHARACTERS
.skip
.lm 15
.ts 15
.indent -10
CHARACTER	#####MEANING
.skip
.indent -10
.index ^^I026##_^V     Enable lower case conversion
_^V	_<CTRL/V_> puts TECO into lower case conversion mode.
In this mode, all alphabetic characters
in string arguments are automatically changed to lower case.
This mode can be overridden by explicit case control within the search string.
This command makes all strings behave as if they began with a _^V_^V.
.break
[TECO-10 only]
.skip
.indent -10
.index ^^I027##_^W     Enable upper case conversion
_^W	_<CTRL/W_> puts TECO into upper case conversion mode.
In this mode, all alphabetic characters in string arguments
are automatically changed to upper case.
This mode can be overriden by explicit case control within the search string.
This command makes all strings behave as if they began with _^W_^W.
.break
[TECO-10 only]
.skip
.indent -10
0_^V	Returns TECO to its original mode.
No special case conversion occurs within
strings except those case conversions that are explicitly specified by
_^V and _^W string build constructs located within the string.
.break
[TECO-10 only]
.skip
.indent -10
0_^W	Same as _^V.
.break
[TECO-10 only]
.lm 5

.page
.subtitle #####Manipulating Large Pages
.index ^^O519##        5.19     MANIPULATING LARGE PAGES
5.19  MANIPULATING LARGE PAGES
.skip 1
TECO is designed to operate most efficiently when editing
files that contain no more than several thousand characters per page.
(TECO storage includes Q-register storage and buffer space.
The size of the text storage area is dynamic and depends
on the amount of available memory.)
If any page of an input file is too large to fit in the text area,
the TECO input commands will terminate reading that page
into memory when the first line feed is
encountered after a point that the buffer is 3/4 full.
(See appendices for details.)
You can make room
by positioning the pointer past a section of text at the beginning
of the buffer and moving that section out of the buffer with the commands:
.skip 1
	0,.PW0,.K
.skip 1
It is sometimes advantageous to restrict the amount of the file that is
present in the buffer. For example, each insert and delete command must
move the entire text that is beyond the point of insertion or deletion.
An operation that does many small inserts or deletes may therefore run
extremely slowly if the text buffer is large. Such an operation can be
sped up substantially by reading the input file with n:A commands and
explicitly writing the processed text.

.page
.subtitle #####Techniques
.index ^^O520##        5.20     TECHNIQUES AND EXAMPLES
5.20 TECHNIQUES AND EXAMPLES
.skip 1
The most elementary TECO application, described in Chapter 1 of this manual,
is creating and editing ASCII files
on-line. The user enters short command strings, often consisting
of a single command, and proceeds from task to task until the
file is completely edited.
.skip 1
Since every editing job is simply a long sequence of TECO
commands, you may accomplish an entire job with one long command
string made up of all the short command strings placed
end to end with the intervening double _<DELIM_> characters removed.
A long command string
that performs a certain editing task can be considered a TECO "editing
program". Editing programs may
be written (using TECO) and stored in the same manner
as any other ASCII file. Whenever the program is needed, it
may be read into the buffer as text, stored in a Q-register,
and executed by an Mq command.
.skip 1
For more complex editing jobs, you may want to write and maintain a
collection of specialized
"editing subroutines." TECO subroutines can perform
such elementary functions as replacing every occurrence of two
or more consecutive spaces with a tabulation character, for
example, or ensuring that words are not hyphenated across
a page boundary. When an editing problem arises, you can load the
right combination of subroutines into various
Q-registers, augment them with additional commands if necessary, and
call them by a "mainline" command string.
.skip 1
Editing subroutines are essentially
macros; that is, sequences of commands which perform
commonly required editing functions.  The
most powerful application of TECO is the creation and
use of a macro library. As you perform an editing job,
look for sequences of operations which might be
required in future editing assignments. Load  all of the TECO
commands required to perform such an operation
into a Q-register.
When the job is finished, write the contents of the Q-register
onto an output
file (via the buffer) and save it in the macro library.
The nMq and m,nMq  commands, which were designed to facilitate use
of macros, permit run-time numeric arguments to be passed to a macro.

.test page 12
.skip 1
TECO macros can preserve the user's radix, flag values, etc.
By using the Q-register push-down list, the macro can save and
then restore values and/or text.
For example:
.skip 1
.ts 7,20
.nofill
	[0 [1 [2	! Save contents of Q-registers 0, 1 and 2 !
	+0U0	! Put any calling argument into Q-register 0 !
	10U1	! Put a 10 (if radix is decimal) or 8 (if radix is
		  octal) into Q-register 1 !
	_^D	! Ensure that the current radix is now decimal !
	EUU2	! Save the case flagging flag !
	-1EU	! Ensure no case flagging !
	Q0"E 3U0 '	! Default calling argument to 3 !
	...
	Q2EU	! Restore the case flagging flag !
	10-Q1"N _^O '	! Restore radix as octal if needed !
	]2 ]1 ]0	! Restore contents of Q-registers 2, 1, and 0 !
.fill
.skip 1
The EI command is particularly useful for executing macros
from a library, since with it they may be read without disturbing
the current input file. This makes it unnecessary to plan in advance
which macros might be needed; it also saves Q-register storage space.
You can retrieve two kinds of TECO command files with an EI command:
a file containing a TECO command
that loads the macro into a Q-register for later use, or a file containing
just the macro (which must
be retrieved with EI each time it is used).
.skip 1
The following examples are intended to illustrate some of the
techniques discussed above. It would not be practical
to include examples of the use of every TECO command, since
most of the commands apply to many diverse situations.
Instead, you are encouraged to experiment with the
individual commands on scratch files.

.test page 10
.skip 2
EXAMPLE 1:  SPLITTING, MERGING, AND REARRANGING FILES
.skip 1
Assume that there is a file named PROG.DAT on the
system disk and that this file contains data in the following
form:
.skip 1
AB#_<FF_>#CD#_<FF_>#EF#_<FF_>#GH#_<FF_>#IJ#_<FF_>#KL#_<FF_>#MN#_<FF_>#OP
.skip 1
where each of the letters A, B, C etc., represents 20 lines
of text and _<FF_> represents a form feed character. The user
intends to rearrange the file so that it appears in the following
format:
.skip 1
AOB#_<FF_>#D#_<FF_>#MN#_<FF_>#EF#_<FF_>#ICJ#_<FF_>#KL#_<FF_>#P#_<FF_>#GH
.skip 1
The following sequence of commands will achieve this rearrangement.
(Search command arguments are not listed explicitly.)
.left margin 25
.skip 2
.test page 5
Start TECO.
.ts 25
.indent -20
*2ED``	Allow all Y commands.
.indent -20
*EBPROG.DAT`Y``	Specify input file and get first page.
.indent -20
*NC``	Search for a character string in C,
writing A and B on the output file.
.indent -20
*J20X1``	Save all of C in Q-register 1.
.indent -20
*20K``	Delete C from the buffer.
.indent -20
*NG``	Search for a character string in G,
writing D, E, and F on the output file.
.indent -20
*HX2``	Save G and H in Q-register 2.
.indent -20
*Y``	Delete GH from the buffer and read IJ.
.indent -20
*20L``	Move the pointer to the beginning of J.
.indent -20
*G1``	Insert C, which was stored in Q-register 1.
.indent -20
*NM``	Search for a character string in M,
writing ICJ and KL on the output file.
.indent -20
*HX1``	Save MN in Q-register 1 (the previous contents
is overwritten).
.indent -20
*Y``	Delete MN and read OP
.indent -20
*J20X3``	Save all of O in Q-register 3.
.indent -20
*20K``	Delete O from the buffer.
.indent -20
*PWHK``	Write P onto the output file, appending a form feed,
and clear the text buffer.
.indent -20
*G2``	Bring GH into the buffer from Q-register 2.
.indent -20
*HPEF``	Write GH on the output file and close it.
.indent -20
*EBPROG.DAT`Y``	Open the partially revised file.
.indent -20
*20L``	Move the pointer to the beginning of B.
.indent -20
*G3``	Insert all of O from Q-register 3.
.indent -20
*ND``	Search for a character string in D writing
AOB on the output file.
.indent -20
*PWHK``	Write D on the output file and clear buffer.
.indent -20
*G1``	Bring all of MN from Q-register 1
into the buffer.
.indent -20
*EX``	Write MN onto the output file, then
close the file and exit.
.left margin 5
.skip 1
At this point the file has been rearranged in the desired format.
Of course, this rearrangement could have been accomplished in fewer
steps if the commands listed above had been combined into longer
command strings. Note that the asterisks shown at the left margin
in this example are generated by TECO, and not typed by the
user.

.skip 1
Assume, now, that the same input file, containing
data in the form:
.skip 1
AB#_<FF_>#CD#_<FF_>#EF#_<FF_>#...#_<FF_>#OP
.skip 1
is to be split into two separate files, with the first file
containing AB#_<FF_>#CD and the second file containing
KL#_<FF_>#M, while the rest of the data is to be discarded.
The following commands could be used to achieve this
rearrangement:
.skip 2
.left margin 25
.test page 5
Start TECO.
.indent -20
*2ED``	Allow all Y commands.
.indent -20
*ERFILE`EWFILE1``###Open the input file and the first
output file.
.indent -20
*Y``	Read AB into the buffer.
.indent -20
*P``	Write AB _<FF_> onto the output file
and read CD into the buffer.
.indent -20
*HPEF``	Write CD onto the output file (without
appending a form feed), and close the first output file.
.indent -20
*__K``	Search for a character string in K. After
this command has been executed, the buffer will contain KL.
No output is generated.
.indent -20
*EWFILE2`P``	Open the second output file and write
KL onto it. Read MN into the buffer.
.indent -20
*20L0,.P``	Move the pointer to the end of M, then
write M onto the output file.
.indent -20
*EF``	Close the output file.
.indent -20
*HKEX``	Clear the buffer and exit.
.left margin 5
.skip 1
As a final example of file manipulation techniques, assume
that there are two files. One file is MATH.ONE, which
contains information in the form:
.skip 1
AB#_<FF_>#CD#_<FF_>#EF#_<FF_>#GH#_<FF_>#IJ#_<FF_>#KL
.skip 1
and the other is MATH.TWO, which contains:
.skip 1
MN#_<FF_>#OP#_<FF_>#QR
.skip 1
If both of these files are stored on DK1, the following
sequence of commands may be used to merge the two files into a
single file, MATH.NEW, which contains all of MATH.TWO
followed by the latter half of file MATH.ONE in the following
format:
.skip 1
MN#_<FF_>#OP#_<FF_>#QR#_<FF_>#GH#_<FF_>#IJ#_<FF_>#KL
.skip 2
.left margin 25
.test page 5
Start TECO.
.indent -20
*2ED``	Allow all Y commands.
.indent -20
*ERDK1:MATH.TWO``###Open the first input file.
.indent -20
*EWMATH.NEW``	Open the output file on the default device.
.indent -20
*Y``	Read MN into the text buffer.
.indent -20
*NR``	Search for a character string in R, writing
MN and OP onto the output file.
.indent -20
*PW``	Write QR onto the output file, appending
a form feed.
.indent -20
*ERDK1:MATH.ONE``###Open the second input file.
.indent -20
*HKY``	Read AB into the buffer. QR is over-written.
.indent -20
*__G``	Search for a character string in G, deleting
AB, CD, and EF, leaving GH in the buffer.
.indent -20
*NK``	Search for a character string in K, writing
GH and IJ on the output file, leaving KL in the buffer.
.indent -20
*HPEFHKEX``	Write KL onto the output file (without
appending a form feed) and close the file, then exit.
.left margin 5

.test page 10
.skip 2
EXAMPLE 2: ALPHABETIZING BY INTERCHANGE SORT
.skip 1
Assume that TECO is running and that the buffer contains
many short lines of text beginning with an alphabetic character
at the left margin (i.e., immediately following a line feed). The lines
might consist of names in a roster, for example, or entries in an
index. The following command string will
rearrange the lines into rough alphabetical order,
grouping all lines which begin with the character "A" at the
beginning of the page, followed by all lines with "B", and so on.
Note that the algorithm could be extended to place the
entries in strict alphabetical order by having it loop back to
perform the same sorting operation on successive
characters in each line.
.skip 2
.left margin 35
.ts 35
.indent -30
!START!#J#0AUA	!Load first character of first line
into Q-register A !
.indent -30
!CONT!##L#0AUB	!Load first character of next
line into Q-register B !
.indent -30
QA-QB"G#XA#K#-L#GA#1UZ#'	!If A_>B, switch the lines and
set a flag (Q-register Z) !
.indent -30
QBUA	!Load B into A !
.indent -30
L#Z-."G#-L#@O/CONT/#'	!Loop back if there is another
line in the buffer !
.indent -30
QZ"G#0UZ#@O/START/#'	!Repeat if a switch was made on the
last pass !
.skip
.left margin 5
.skip 1
The same algorithm can be coded in a more structured way as follows:
.skip 2
.left margin 35
.indent -30
0UZ	!clear repeat flag!
.indent -30
_<J 0AUA L	!Load first character of first line into Q-register A !
.indent -30
_<0AUB	!Load first character of next line into Q-register B !
.indent -30
QA-QB"G XA K -L GA -1UZ '	!If A_>B, switch the lines and set a flag !
.indent -30
QBUA	!Load B into A !
.indent -30
L .-Z;_>	!Loop back if there is another line in the buffer !
.indent -30
QZ;_>	!Repeat if a switch was made on the last pass !
.left margin 5
.skip
This example is a bit shorter and does not use any GOTOs.
It will also run somewhat faster.

.page
.subtitle #####Appendix A
.index ^^OA####APPENDIX A       ASCII CHARACTER SET
.center
APPENDIX A
.skip 2
.center
Octal _& Decimal ASCII Character Set
.skip
(GL characters, on one page)
.SKIP 4
.tab stops 11 15 21 26 30 36 41 45 51 56 60
.NOFILL
Char	Oct	Dec	Char	Oct	Dec	Char	Oct	Dec	Char	Oct	Dec
.skip 2
 NUL	000	000	 SP	040	032	  @	100	064	  `	140	096
 _^A	001	001	 !	041	033	  A	101	065	  a	141	097
 _^B	002	002	 "	042	034	  B	102	066	  b	142	098
 _^C	003	003	 _#	043	035	  C	103	067	  c	144	099
 _^D	004	004	 $	044	036	  D	104	068	  d	144	100
 _^E	005	005	 %	045	037	  E	105	069	  e	145	101
 _^F	006	006	 _&	046	038	  F	106	070	  f	146	102
 _^G	007	007	 '	047	039	  G	107	071	  g	147	103

 BS	010	008	 (	050	040	  H	110	072	  h	150	104
 TAB	011	009	 )	051	041	  I	111	073	  i	151	105
 LF	012	010	 *	052	042	  J	112	074	  j	152	106
 VT	013	011	 +	053	043	  K	113	075	  k	153	107
 FF	014	012	 ,	054	044	  L	114	076	  l	154	108
 CR	015	013	 -	055	045	  M	115	077	  m	155	109
 _^N	016	014	 .	056	046	  N	116	078	  n	156	110
 _^O	017	015	 /	057	047	  O	117	079	  o	157	111

 _^P	020	016	 0	060	048	  P	120	080	  p	160	112
 _^Q	021	017	 1	061	049	  Q	121	081	  q	161	113
 _^R	022	018	 2	062	050	  R	122	082	  r	162	114
 _^S	023	019	 3	063	051	  S	123	083	  s	163	115
 _^T	024	020	 4	064	052	  T	124	084	  t	164	116
 _^U	025	021	 5	065	053	  U	125	085	  u	165	117
 _^V	026	022	 6	066	054	  V	126	086	  v	166	118
 _^W	027	023	 7	067	055	  W	127	087	  w	167	119

 _^X	030	024	 8	070	056	  X	130	088	  x	170	120
 _^Y	031	025	 9	071	057	  Y	131	089	  y	171	121
 _^Z	032	026	 :	072	058	  Z	132	090	  z	172	122
 ESC	033	027	 ;	073	059	  [	133	091	  {	173	123
 FS	034	028	 _<	074	060	  _\	134	092	  |	174	124
 GS	035	029	 =	075	061	  ]	135	093	  }	175	125
 RS	036	030	 _>	076	062	  _^	136	094	  ~	176	126
 US	037	031	 ?	077	063	  __	137	095	  DEL	177	127




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.TAB STOPS 14    20     26       32      40
.NOFILL
	Hex	Oct	Dec	Char	Description
.SKIP 1
	[00]	000	  0.	_<NUL_>
	[01]	001	  1.	_^A	Control-A
	[02]	002	  2.	_^B	Control-B
	[03]	003	  3.	_^C	Control-C
	[04]	004	  4.	_^D	Control-D
	[05]	005	  5.	_^E	Control-E
	[06]	006	  6.	_^F	Control-F
	[07]	007	  7.	_^G	Bell

	[08]	010	  8.	_<BS_>	Backspace
	[09]	011	  9.	_<TAB_>	Horizontal tab
	[0A]	012	 10.	_<LF_>	Line feed
	[0B]	013	 11.	_<VT_>	Vertical tab
	[0C]	014	 12.	_<FF_>	Form feed
	[0D]	015	 13.	_<CR_>	Carriage return
	[0E]	016	 14.	_<SO_>	Control-N
	[0F]	017	 15.	_<SI_>	Control-O

	[10]	020	 16.	_^P	Control-P
	[11]	021	 17.	_<XON_>	Control-Q
	[12]	022	 18.	_^R	Control-R
	[13]	023	 19.	_<XOFF_>	Control-S
	[14]	024	 20.	_^T	Control-T
	[15]	025	 21.	_^U	Control-U
	[16]	026	 22.	_^V	Control-V
	[17]	027	 23.	_^W	Control-W

	[18]	030	 24.	_^X	Control-X
	[19]	031	 25.	_^Y	Control-Y
	[1A]	032	 26.	_^Z	Control-Z
	[1B]	033	 27.	_<ESC_>	ESCape, control-[
	[1C]	034	 28.	_<FS_>	Control-_\
	[1D]	035	 29.	_<GS_>	Control-]
	[1E]	036	 30.	_<RS_>	Control-_^
	[1F]	037	 31.	_<US_>	Control-__




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	Char	Description
.SKIP 1
	[20]	040	 32.		Space
	[21]	041	 33.	!	Explanation point
	[22]	042	 34.	"	Double quotation mark
	[23]	043	 35.	_#	Number sign
	[24]	044	 36.	$	Dollar sign
	[25]	045	 37.	%	Percent sign
	[26]	046	 38.	_&	Ampersand
	[27]	047	 39.	'	Single quote,  apostrophe

	[28]	050	 40.	(	Left parenthesis
	[29]	051	 41.	)	Right parenthesis
	[2A]	052	 42.	*	Asterisk
	[2B]	053	 43.	+	Plus
	[2C]	054	 44.	,	Comma
	[2D]	055	 45.	-	Hyphen, minus
	[2E]	056	 46.	.	Period, decimal point
	[2F]	057	 47.	/	Slash, slant, solidus

	[30]	060	 48.	0	Digit 0
	[31]	061	 49.	1	Digit 1
	[32]	062	 50.	2	Digit 2
	[33]	063	 51.	3	Digit 3
	[34]	064	 52.	4	Digit 4
	[35]	065	 53.	5	Digit 5
	[36]	066	 54.	6	Digit 6
	[37]	067	 55.	7	Digit 7

	[38]	070	 56.	8	Digit 8
	[39]	071	 57.	9	Digit 9
	[3A]	072	 58.	:	Colon
	[3B]	073	 59.	;	Semicolon
	[3C]	074	 60.	__<	Left angle, less than
	[3D]	075	 61.	=	Equals
	[3E]	076	 62.	__>	Right angle, greater than
	[3F]	077	 63.	?	Question mark




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	Char	Description
.SKIP 1
	[40]	100	 64.	@	Commercial at
	[41]	101	 65.	A	Upper case A
	[42]	102	 66.	B	Upper case B
	[43]	103	 67.	C	Upper case C
	[44]	104	 68.	D	Upper case D
	[45]	105	 69.	E	Upper case E
	[46]	106	 70.	F	Upper case F
	[47]	107	 71.	G	Upper case G

	[48]	110	 72.	H	Upper case H
	[49]	111	 73.	I	Upper case I
	[4A]	112	 74.	J	Upper case J
	[4B]	113	 75.	K	Upper case K
	[4C]	114	 76.	L	Upper case L
	[4D]	115	 77.	M	Upper case M
	[4E]	116	 78.	N	Upper case N
	[4F]	117	 79.	O	Upper case O

	[50]	120	 80.	P	Upper case P
	[51]	121	 81.	Q	Upper case Q
	[52]	122	 82.	R	Upper case R
	[53]	123	 83.	S	Upper case S
	[54]	124	 84.	T	Upper case T
	[55]	125	 85.	U	Upper case U
	[56]	126	 86.	V	Upper case V
	[57]	127	 87.	W	Upper case W

	[58]	130	 88.	X	Upper case X
	[59]	131	 89.	Y	Upper case Y
	[5A]	132	 90.	Z	Upper case Z
	[5B]	133	 91.	[	Opening bracket
	[5C]	134	 92.	_\	Backslash, reverse slant
	[5D]	135	 93.	]	Closing bracket
	[5E]	136	 94.	_^	Circumflex, caret, uparrow
	[5F]	137	 95.	__	Underline, underscore




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	Char	Description
.SKIP 1
	[60]	140	 96.	`	Accent grave
	[61]	141	 97.	a	Lower case a
	[62]	142	 98.	b	Lower case b
	[63]	143	 99.	c	Lower case c
	[64]	144	100.	d	Lower case d
	[65]	145	101.	e	Lower case e
	[66]	146	102.	f	Lower case f
	[67]	147	103.	g	Lower case g

	[68]	150	104.	h	Lower case h
	[69]	151	105.	i	Lower case i
	[6A]	152	106.	j	Lower case j
	[6B]	153	107.	k	Lower case k
	[6C]	154	108.	l	Lower case l
	[6D]	155	109.	m	Lower case m
	[6E]	156	110.	n	Lower case n
	[6F]	157	111.	o	Lower case o

	[70]	160	112.	p	Lower case p
	[71]	161	113.	q	Lower case q
	[72]	162	114.	r	Lower case r
	[73]	163	115.	s	Lower case s
	[74]	164	116.	t	Lower case t
	[75]	165	117.	u	Lower case u
	[76]	166	118.	v	Lower case v
	[77]	167	119.	w	Lower case w

	[78]	170	120.	x	Lower case x
	[79]	171	121.	y	Lower case y
	[7A]	172	122.	z	Lower case z
	[7B]	173	123.	{	Opening brace
	[7C]	174	124.	|	Vertical line
	[7D]	175	125.	}	Closing brace
	[7E]	176	126.	~	Tilde, overline, high line
	[7F]	177	127.	_<DEL_>	Delete, rubout




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	Char	Description
.SKIP 1
	[80]	200	128.
	[81]	201	129.
	[82]	202	130.
	[83]	203	131.
	[84]	204	132.	_<IND_>
	[85]	205	133.	_<NEL_>
	[86]	206	134.	_<SSA_>
	[87]	207	135.	_<ESA_>

	[88]	210	136.	_<HTS_>
	[89]	211	137.	_<HTJ_>
	[8A]	212	138.	_<VTS_>
	[8B]	213	139.	_<PLD_>
	[8C]	214	140.	_<PLU_>
	[8D]	215	141.	_<RI_>
	[8E]	216	142.	_<SS2_>
	[8F]	217	143.	_<SS3_>

	[90]	220	144.	_<DCS_>
	[91]	221	145.	_<PU1_>
	[92]	222	146.	_<PU2_>
	[93]	223	147.	_<STS_>
	[94]	224	148.	_<CCH_>
	[95]	225	149.	_<MW_>
	[96]	226	150.	_<SPA_>
	[97]	227	151.	_<EPA_>

	[98]	230	152.
	[99]	231	153.
	[9A]	232	154.
	[9B]	233	155.	_<CSI_>
	[9C]	234	156.	_<ST_>
	[9D]	235	157.	_<OSC_>
	[9E]	236	158.	_<PM_>
	[9F]	237	159.	_<APC_>




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	--	Description
.SKIP 1
	[A0]	240	160.		-
	[A1]	241	161.		Inverted exclamation mark
	[A2]	242	162.		Cent sign
	[A3]	243	163.		Pound sterling sign#
	[A4]	244	164.		reserved for future
	[A5]	245	165.		Yen
	[A6]	246	166.		reserved for future
	[A7]	247	167.		Section sign

	[A8]	250	168.		General currency sign
	[A9]	251	169.		Copyright sign
	[AA]	252	170.		Feminine ordinal indicator
	[AB]	253	171.		Angle quotation mark left
	[AC]	254	172.		reserved for future
	[AD]	255	173.		reserved for future
	[AE]	256	174.		reserved for future
	[AF]	257	175.		reserved for future

	[B0]	260	176.		Degree sign
	[B1]	261	177.		Plus/minus sign
	[B2]	262	178.		Superscript 2
	[B3]	263	179.		Superscript 3
	[B4]	264	180.		reserved for future
	[B5]	265	181.		Micro sign, Greek mu
	[B6]	266	182.		Paragraph sign, pilcrow
	[B7]	267	183.		Middle dot

	[B8]	270	184.		reserved for future
	[B9]	271	185.		Superscript 1
	[BA]	272	186.		Masculine ordinal indicator
	[BB]	273	187.		Angle quotation mark right
	[BC]	274	188.		Fraction one quarter
	[BD]	275	189.		Fraction one half
	[BE]	276	190.		reserved for future
	[BF]	277	191.		Inverted question mark




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	--	Description
.SKIP 1
	[C0]	300	192.		A with accent grave
	[C1]	301	193.		A with accent aigu (acute)
	[C2]	302	194.		A with circumflex
	[C3]	303	195.		A with tilde
	[C4]	304	196.		A with umlaut (diaeresis)
	[C5]	305	197.		A with ring
	[C6]	306	198.		AE ligature
	[C7]	307	199.		C with cedilla

	[C8]	310	200.		E with accent grave
	[C9]	311	201.		E with accent aigu (acute)
	[CA]	312	202.		E with circumflex
	[CB]	313	203.		E with umlaut (diaeresis)
	[CC]	314	204.		I with accent grave
	[CD]	315	205.		I with accent aigu (acute)
	[CE]	316	206.		I with circumflex
	[CF]	317	207.		I with umlaut (diaeresis)

	[D0]	320	208.		reserved for future
	[D1]	321	209.		N with tilde
	[D2]	322	210.		O with accent grave
	[D3]	323	211.		O with accent aigu (acute)
	[D4]	324	212.		O with circumflex
	[D5]	325	213.		O with tilde
	[D6]	326	214.		O with umlaut (diaeresis)
	[D7]	327	215.		OE ligature

	[D8]	330	216.		O (letter) with slash
	[D9]	331	217.		U with accent grave
	[DA]	332	218.		U with accent aigu (acute)
	[DB]	333	219.		U with circumflex
	[DC]	334	220.		U with umlaut (diaeresis)
	[DD]	335	221.		Y with umlaut (diaeresis)
	[DE]	336	222.		reserved for future
	[DD]	337	223.		German sharp s




Continued...
.fill
.page
.center
APPENDIX A, Continued
.skip 2
.center
Octal, Hexadecimal, _& Decimal ASCII Character Set (Complete)
.SKIP 4
.NOFILL
	Hex	Oct	Dec	--	Description
.SKIP 1
	[E0]	340	224.		a with accent grave
	[E1]	341	225.		a with accent aigu (acute)
	[E2]	342	226.		a with circumflex
	[E3]	343	227.		a with tilde
	[E4]	344	228.		a with umlaut (diaeresis)
	[E5]	345	229.		a with ring
	[E6]	346	230.		ae ligature
	[E7]	347	231.		c with cedilla

	[E8]	350	232.		e with accent grave
	[E9]	351	233.		e with accent aigu (acute)
	[EA]	352	234.		e with circumflex
	[EB]	353	235.		e with umlaut (diaeresis)
	[EC]	354	236.		e with umlaut (diaeresis)
	[ED]	355	237.		i with accent aigu (acute)
	[EE]	356	238.		i with circumflex
	[EF]	357	239.		i with umlaut (diaeresis)

	[F0]	360	240.		reserved for future
	[F1]	361	241.		n with tilde
	[F2]	362	242.		o with accent grave
	[F3]	363	243.		o with accent aigu (acute)
	[F4]	364	244.		o with circumflex
	[F5]	365	245.		o with tilde
	[F6]	366	246.		o with umlaut (diaeresis)
	[F7]	367	247.		oe ligature

	[F8]	370	248.		o (letter) with slash
	[F9]	371	249.		u with accent grave
	[FA]	372	250.		u with accent aigu (acute)
	[FB]	373	251.		u with circumflex
	[FC]	374	252.		u with umlaut (diaeresis)
	[FD]	375	253.		y with umlaut (diaeresis)
	[FE]	376	254.		reserved for future
	[FF]	377	255.		-
.fill

.page
.subtitle #####Appendix B
.index ^^OB####APPENDIX B       ERROR MESSAGES
.center
APPENDIX B
.s 2
.center
ERROR MESSAGES
.skip 1
TECO error messages consist of a three letter message preceded
by a question mark (?) or preceeded by ?TEC.
A short description of the error optionally
follows (dependent on the current value of the EH flag).  Typing
? (question mark) immediately after an error message printout causes the
command string to be printed up to and including the character which
causes the error message.
Typing *q (asterisk, Q-register name) immediately after an error
message printout saves the entire command string in the
specified Q-register.  This is especially useful for recovering
mistyped insert commands.  Both the ? and *q
facilities may be used when an error occurs.
.skip 1
TECO-11 also produces two warning messages.  These messages do
not abort the command and execution continues.
.s 2
.left margin 19
.tab stops 19 55
.i -14
%Superseding existing file
.br
Indicates that the file to be created as the result of an
EW command already exists.  If the
output file is closed the old copy of the file will be deleted.
The EK command may be used to "take back"
the EW command.
.s 1;.i -14
%Search#fail#in#iter
.br
Indicates that a search command has
failed inside iteration brackets.  A ; (semi-colon)
command immediately following the search command can typically
be used to suppress this message.
After printing the message, the iteration is terminated, i.e.,
TECO simulates a 0; command.
.s 4
.lm5
.skip 1
These error messages are listed alphabetically by their three-letter code.
In general,
these three-letter codes have the same meaning on all implementations,
although not all error messages are produced by each implementation.
The one-line error message given here is a paraphrasing of the message given,
which may differ slightly from system to system.

.page
.left margin 19
.tab stops 13 19 55
.test page 4
.indent -14
?ARG	Improper Arguments
.br
Three arguments are given (a,b,c or H,c).
.test page 4
.s 1;.i -14
?BNI	_>#not#in#iteration
.br
There is a close angle
bracket not matched by an open angle bracket somewhere
to its left.  (Note: an iteration in a macro stored in a
Q-register must be complete within the Q-register.)
.test page 4
.s 1;.i -14
?CCL	CCL.SV not found or EG argument too long
.br
The EGcommand` command on OS/8 was unable to locate SYS:CCL.SV
or the specified command has more than 46 characters.
.test page 4
.s 1;.i -14
?CON	Confused use of conditionals
.break
Conditionals, parenthesized arguments, and iterations must be properly
nested.  The user probably used some construct like: N"E...(...' where
an iteration or parenthesized argument is begun in a conditional
but not terminated in the same conditional.
.test page 4
.s 1;.i -14
?CPQ	Can't#pop#into#Q-register
.br
A ] command has been executed and there is nothing
saved on the Q-register push down list.
.test page 4
.s 1;.i -14
?DEV	Invalid#device
.br
A file specification string in an E
command contains an unknown device name.
.test page 4
.s 1;.i -14
?DTB	Delete#too#big
.br
An nD command has been attempted
which is not contained within the current page.
.test page 4
.s 1;.i -14
?ERR	RSTS/E error message####(RSTS/E only)
.br
Some RSTS/E monitor call failed. The error message
text explains the error.
.test page 4
.s 1;.i -14
?FER	File Error
.br
The file specified in an ER, EW or EB command was
not found.
.test page 4
.s 1;.i -14
?FNF	File not found "filespec"
.br
The requested input file could not be located.  If this
occurred within a macro the colon modified ER or EB
command may be necessary.
.test page 4
.s 1;.i -14
?FUL	Output Command would have overflowed output device
.break
The page
of text currently in the text buffer will not fit in the
open output file.  Until enough free space can be obtained on the
output device the file may have to be split. An EF
command to close the current output file, followed by a new
EW command to a temporary file may be used.  The files should
be concatenated when the space problem is alleviated.
.test page 4
.s 1;.i -14
?ICE	Illegal _^E Command in Search Argument
.break
A search argument contains a _^E command that is either not defined
or incomplete. The only valid _^E commands in search arguments are:
_^EA, _^ED, _^EV, _^EW, _^EL, _^ES, _^E<NNN>, and _^E[A,B,C,...].
.test page 4
.s 1;.i -14
?IEC	Illegal character "x" after E
.br
An invalid E command has been executed.  The E character must be
followed by an alphabetic to form a legal E command (i.e., ER or
EX).
.test page 4
.s 1;.i -14
?IFC	Illegal character "x" after F
.br
An invalid F command has been executed.
.test page 4
.s 1;.i -14
?IFN	Illegal character "x" in filename
.br
.br
The filespec as an argument to one of the E commands is unacceptable
to the system.  The file specification must be appropriate to the system
in use.
.test page 4
.s 1;.i -14
?IIA	Illegal insert arg
.br
A command of the form "nItext`" was attempted.
Combining character (nI`) and text (Itext`) insertions is illegal.
.test page 4
.s 1;.i -14
?ILL	Illegal command "x"
.br
An attempt has been made to execute an invalid TECO command.
.test page 4
.s 1;.i -14
?ILN	Illegal number
.br
An 8 or 9 has been entered when the radix of TECO is set to octal.
.test page 4
.s 1;.i -14
?INP	Input error
.br
The system has reported an error attempting to read the current input
file.  The text buffer may be corrupt.  This operation may be
retried, but if the error persists, you may have to return to
a backup file.
.test page 4
.s 1;.i -14
?IPA	Negative or 0 argument to P
.br
The argument preceding a P or PW command is negative or 0.
.test page 4
.s 1;.i -14
?IQC	Illegal#"#character
.br
One of the valid " commands did not follow the#".  Refer to
Section 5.14 (conditional execution commands) for the legal set
of commands.
.test page 4
.s 1;.i -14
?IQN	Illegal Q-register name "x"
.br
An illegal Q-register name was specified in one of the Q-register commands.
.test page 4
.s 1;.i -14
?IRA	Illegal radix argument to _^R
.br
The argument to a _^R radix command must be 8, 10, or 16.
.test page 4
.s 1;.i -14
?ISA	Illegal search arg
.br
The argument preceding a search command is 0.  This argument must
not be 0.
.test page 4
.s 1;.i -14
?ISS	Illegal search string
.br
One of the search string special characters (_^Q, _^V, _^W, etc.)
would have modified the search string delimiter (usually ESCAPE).
.test page 4
.s 1;.i -14
?IUC	Illegal character "x" following _^
.br
The character following an _^ must have ASCII value between 100 and 137
inclusive or between 141 and 172 inclusive.
.test page 4
.s 1;.i -14
?MAP	Missing '
.break
Every conditional (opened with the " command) must be closed
with the ' command.
.test page 4
.s 1;.i -14
?MEM	Memory overflow
.br
Insufficient memory available to complete the current command.  Make
sure the Q-register area does not contain much unnecessary text.
Breaking up the text area into multiple pages might be useful.
(See section 5.19.)
.test page 4
.s 1;.i -14
?MLA	Missing Left Angle Bracket
.break
There is a right angle bracket that has no
matching left angle bracket.  An iteration must
be complete within the macro or command.
.test page 4
.s 1;.i -14
?MLP	Missing (
.break
There is a right parenthesis that is not matched
by a corresponding left parenthesis.
.test page 4
.s 1;.i -14
?MRA	Missing Right Angle Bracket
.break
There is a left angle bracket that has no
matching right angle bracket.  An iteration must
be complete within the macro or command.
.test page 4
.s 1;.i -14
?MRP	Missing )
.break
There is a right parenthesis that is not matched
by a corresponding left parenthesis.
.test page 4
.s 1;.i -14
?MSC	Missing Start of Conditional
.break
A ' command (end of conditional) was encountered.  Every '
command must be matched by a preceding " (start of conditional)
command.
.test page 4
.s 1;.i -14
?NAB	No arg before _^__
.br
The _^__ command must be preceded by either a specific numeric argument
or a command that returns a numeric value.
.test page 4
.s 1;.i -14
?NAC	No arg before ,
.br
A command has been executed in which a , is not preceded by a numeric
argument.
.test page 4
.s 1;.i -14
?NAE	No arg before =
.br
The =, ==, or === command must be preceded by either a specific numeric
argument or a command that returns a numeric value.
.test page 4
.s 1;.i -14
?NAP	No arg before )
.br
A ) parenthesis has been encountered and is not properly preceded
by a specific numeric argument or a command that returns a numeric value.
.test page 4
.s 1;.i -14
?NAQ	No arg before "
.br
The " commands must be preceded by a single numeric argument on which the
decision to execute the following commands or skip to the matching '
is based.
.test page 4
.s 1;.i -14
?NAS	No arg before ;
.br
The ; command must be preceded by a single numeric argument on which
the decision to execute the following commands or skip to the
matching _> is based.
.test page 4
.s 1;.i -14
?NAU	No arg before U
.br
The U command must be preceded by either a specific
numeric argument or a command that returns a numeric value.
.test page 4
.s 1;.i -14
?NCA	Negative argument to ,
.br
A comma was preceded by a negative number.
.test page 4
.s 1;.i -14

?NYA	Numeric argument with Y
.br
The Y command must not be preceded by either a
numeric argument or a command that returns a numeric value.
.test page 4
.s 1;.i -14
?NYI	Not yet implemented
.br
A command was issued which tries to invoke a feature
not available on this implementation of TECO.
.test page 4
.s 1;.i -14
?NFI	No file for input
.br
Before issuing an input command, such as Y, it is necessary to open
an input file by use of a command such as ER or EB.
.test page 4
.s 1;.i -14
?NFO	No file for output
.br
Before issuing an output command such as N search or P it is
necessary to open an output file by use of a command such as
EW or EB.
.test page 4
.s 1;.i -14
?NPA	Negative or 0 argument to P
.br
A P command was preceded by a negative or 0 argument.
.test page 4
.s 1;.i -14
?NRO	No room for output
.br
The output device is too full to accept the requested output file.
.test page 4
.s 1;.i -14
?NYI	Not Yet Implemented
.br
A command was issued that is not yet implemented in this
version of TECO.
.test page 4
.s 1;.i -14
?OFO	Output file already open
.br
A command has been executed which tried to create an output file, but
an output file currently is open.  It is typically appropriate to use
the EC or EK command as the situation calls for to close the
output file.
.test page 4
.s 1;.i -14
?OUT	Output error
.br
The system has reported an error attempting to do output to the
output file.  Make
sure that output device did not become write locked.  Use of the EF
command (or EK if necessary) and another EW can be
considered until the condition is fixed.
.test page 4
.s 1;.i -14
?PES	Attempt to Pop  Empty Stack
.break
A ] command (pop off q-register stack into a q-register) was
encountered when there was nothing on the q-register stack.
.test page 4
.s 1;.i -14
?PDO	Push-down list overflow
.br
The command string has become too complex.  Simplify it.
.test page 4
.s 1;.i -14
?POP	Attempt to move Pointer Off Page with "x"
.br
A J, C or R command has been executed which attempted to move
the pointer off the page.  The result of executing one of these
commands must leave the pointer between 0 and Z, inclusive.
The characters referenced by a D or m,nX command must also
be within the buffer boundary.
.test page 4
.s 1;.i -14
?SNI	;#not in iteration
.br
A ; command has been executed outside of an open iteration bracket.
This command may only be executed within iteration brackets.
.test page 4
.s 1;.i -14
?SRH	Search failure "text"
.br
A search command not preceded by a colon modifier and not within an
iteration has failed to find the specified "text".  After an S
search fails the pointer is left at the beginning of the buffer.  After
an N or __ search fails the last page of the input file has been input
and, in the case of N, output, and the buffer is cleared.  In the case
of an N search it is usually necessary to close the output file
and reopen it for continued editing.
.test page 4
.s 1;.i -14
?STL	String too long
.br
A search or file name string is too long.  This is most
likely the result of a missing _<DELIM_> after the string.
.test page 4
.s 1;.i -14
?TAG	Missing Tag !tag!
.break
The tag !tag! specified by an O command cannot be found.
This tag must be in the same macro level as the O command
referencing it.
.test page 4
.s 1;.i -14
?UTC	Unterminated command "x"
.br
This is a general error which is usually caused by an
unterminated insert, search, or filespec argument,
an unterminated _^A message, an unterminated tag or comment (i.e.,
unterminated ! construct),
or a missing ' character
which closes a conditional execution command.
.test page 4
.s 1;.i -14
?UTM	Unterminated macro
.br
This error is the same as the ?UTC error except that
the unterminated command was executing from a Q-register (i.e.,
it was a macro).
(Note: An entire command sequence stored in a
Q-register must be complete within the Q-register.)
.test page 4
.s 1;.i -14
?XAB	Execution aborted
.br
Execution of TECO was aborted. This is usually due
to the typing of _<CTRL/C_>.
.test page 4
.s 1;.i -14
?WLO	System Device Write-Locked
.br
TECO-8 needs to write on the system device when it is running
in less than 16K (less than 20K if VT52 is present)
so that it can later swap in overlays.
.test page 4
.s 1;.i -14
?YCA	Y command aborted
.br
An attempt has been made to execute an Y or __ search
command with an output file open, that would cause text in the
text buffer to be erased without  outputting it to the output file.
The ED command (section 5.16) controls this check.
.test page 4
.s 1;.i -14
?nnn	I/O Error or Directive Error	(RSX-11 only)
.br
All errors from the executive and file system are reported
in this format, where nnn is the decimal I/O or directive error
status. The accompanying message is the corresponding message
from the QIOSYM message file. A complete list of I/O and
directive errors appears in appendices to the various
Executive reference manuals and in the IAS/RSX-11 I/O
Operations Reference Manual.
.left margin 5

.page
.subtitle #####Appendix C
.comment       APPENDIX C       INCOMPATIBLE, OBSOLETE, AND SYSTEM-SPECIFIC
.index ^^OC####                 COMMANDS
.center
APPENDIX C
.s 2
.center
Incompatible, Obsolete, and System-Specific Commands
.skip 1
This appendix describes commands that are peculiar to specific
operating systems.  These commands fall into many categories.
Some are obsolete, and are kept around only as a convenience to the
user.  Others are so system specific or so obscure that it was
felt best not to include them in the main body of the manual.
Some are incompatible across operating systems.
Some are new commands that have not become firmly established and
may change in the future.  In general, use these commands at your
own risk and with the understanding that in future releases of TECO,
these commands may change or go away completely.  Implementors of
TECO on other operating systems should contact the
TECO SIG before implementing any of these features.
.skip 2
.index ^^OC01##        C.1      SPECIFIC FEATURES OF TECO-11
C.1 SPECIFIC FEATURES OF TECO-11
.skip
.left margin 20
.ts 20
.skip 1
.indent -15
.index ^^OC011#        C.1.1       TECO Commands
C.1.1 TECO Commands
.skip
.indent -15
Command	Description
.skip
.indent -15
.index ^^I123a#m,nS   Search for nth occurrence within m chars
m,nStext`	Performs the same function as the nS
command, but m serves a bound limit for the search.
If the search string can be found without moving the pointer
more than ABS(m)-1 places, the search succeeds and the pointer
is repositioned to immediately after the last character of the string.
Otherwise, the pointer is left unchanged.
The _^Q operator, described below, is useful in conjunction with this command.
.break
.skip 1
Note that m,Stext` is identical to m,1Stext` and m,-Stext`
is identical to m,-1Stext`.
.break
.skip 1
.indent -15
m,-nStext`	Performs the same function as the m,nS command,
but searches in the reverse direction.
.break
.skip 1
.indent -15
0,nStext`	Performs the same function as the nS
command, except that the pointer position will remain unchanged on search
string failure. (Essentially an unbounded search with no pointer
movement on failure.)
.break
.skip 1
.indent -15
.index ^^I107*#G*     Get last filespec string into buffer
G*	Get most recent filespec string.  The asterisk
represents TECO's filespec string area, which
contains the fully expanded filespec
of the last E command (see appendices).
Copy the contents of the filespec string area into the buffer at the
current position of the buffer pointer, leaving the pointer
positioned after the last character copied.
.skip 1
.indent -15
:G*	Print the contents of the filespec buffer on the terminal.
.skip 1
.indent -15
.index ^^I107__#G__     Get last search string into buffer
G__	Get most recent search string.  The underscore
(backarrow) represents TECO's
search string area.  Copy the contents of the search string area into
the buffer at the current position of the buffer pointer, leaving the
pointer positioned after the last character copied.
.skip 1
.indent -15
:G__	Print the contents of the search string buffer on the
terminal.
.skip 1
.indent -15
.index ^^I021o#_^Q     Convert line arg into character arg
n_^Q	n_^QC is identical to nL.
The n_^Q command returns
the number of characters between
the buffer pointer and the nth line separator (both positive
and negative).
This command converts line oriented command
argument values into character oriented argument values.
Used after an expression.
.skip
.indent -15
.index ^^I127a#n:W    Return scope characteristics
m,-256+n:W	Inserts characters at "dot" until...
Characters are read (echo off) from the terminal and inserted
at "dot" until and according to the microcoded bits in n.
The terminating character is not inserted.
.skip 1
.lm +9
.break
.i -9
##128#=_>#Return immediately if no typed characters
.break
.i -9
###64#=_>#Terminate on any character
.break
.i -9
###32#=_>#Don't keep screen updated (i.e., no -1W)
.break
.i -9
####8#=_>#Treat m as terminating character(s)
.break
.i -9
####4#=_>#Convert any alphabetic inserts to upper case
.break
.i -9
####2#=_>#Terminate on _<TAB_>
.break
.i -9
####1#=_>#Screen is initially O.K.
.break
.lm -9
.skip 1
Control characters (octal 0 through 37 and 177 except _<TAB_>) are always
terminating characters.
The returned value has the terminating character code in low byte (octal 0
through 177 or 377 for returned immediately).  The sign bit
is set if one or more inserts were done.
The return value may be a character code that normally would have been
inserted, but could not be for some reason (e.g., convert alphabetic
inserts to upper case requested, but not supported in this implementation).
.skip 1
The m of m,-256+n:W is always optional.
If bit value 8 of n is set, m contains up to two additional termination
character codes, one in the low 8 bits (low byte)
and another in the high 8 bits (high byte).  If only one extra termination
character is desired, it is placed simply placed in m thus setting the
high 8 bits to zero (which is already a termination character).
If bit value 8 of n is not set, passing the m argument is undefined...
.skip 2
.indent -15
.index ^^OC012#        C.1.2       String Build Constructs
C.1.2 String Build Constructs
.SKIP
.indent -15
Construct	Description
.skip
.indent -15
_<CTRL/E_>Q*	_<CTRL/E_>Q* indicates that the string stored
in the filespec buffer is to be used in the position occupied by
the _^EQ* in the search string.
.skip 1
.indent -15
_<CTRL/E_>Q__	_<CTRL/E_>Q__ indicates that the string stored
in the search string buffer is to be used in the position occupied by
the _^EQ__ in the search string.
.lm 5

.page
.skip 2
.index ^^OC02##        C.2      SPECIFIC FEATURES OF RT-11
C.2 SPECIFIC FEATURES OF RT-11
.skip 1
[For "RT-11 Operating Characteristics", refer to Appendix D.]
.skip 2
.index ^^OC03##        C.3      SPECIFIC FEATURES OF RSTS/E
C.3 SPECIFIC FEATURES OF RSTS/E
.skip
[For "RSTS/E Operating Characteristics", refer to Appendix E.]
.left margin 20
.ts 20
.SKIP
.indent 8
TECO COMMANDS
.skip
.i -15
Command	Description
.skip
.indent -15
.index ^^I105h#:EG    Execute operating system function
:EGRTS`	Switch to private default run-time-system.
.skip
.indent -15
:EGRTS foo`	Switch to RTS "foo".
.skip
.indent -15
:EGFSS string`	File string scan "string".
.skip
.indent -15
:EGCCL cmd`	Try "cmd" as a CCL command.
.skip
.indent -15
:EGRUN file`	Try to run "file".
.skip
.indent -15
:EGRUN file=xx`
.br
Try to run "file" with "xx" placed in core common.
.skip
.indent -15
:EGEMT`	Issue a monitor directive. The FIRQB is loaded from
Q-registers A through P and the XRB is loaded from Q-registers
Q through W.  The low byte of the value in Q-register A
is the monitor EMT code to issue.  If the high byte
of the value in Q-register A is _>0 then the text part of
Q-register A is put into the XRB for a 'write' (XRLEN=
size of A, XRBC=size of A, XRLOC-_>A); if Q-register A high
byte is _<0 then the text part of Q-register A is put into
the XRB for a 'read' (XRLEN=size of A, XRBC=0,
XRLOC-_>A).
.break
Returned value is -1 for success, 0 for unrecognized command, or
_>0 for the RSTS/E error code.
The FIRQB is placed in the numeric part of Q-regs
A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P.
The XRB is placed in the numeric part of Q-regs
Q, R, S, T, U, V, W.
.skip
.lm 5
See also section 5.1.2, File Specification Switches.

.page
.comment               C.4      SPECIFIC FEATURES OF RSX-11M, RSX-11/D,
.index ^^OC04##                 and IAS
C.4 SPECIFIC FEATURES OF RSX-11/M, RSX-11/D, and IAS
.skip
[For "RSX-11 Operating Characteristics", refer to Appendix F.]
.left margin 20
.ts 20
.skip
.i -15
Command	Description
.SKIP
.indent -15
_<CTRL/Z_>_<CTRL/Z_>_<CTRL/Z_>
.break
Returns control to the operating system immediately.
Equivalent to typing _<CTRL/C_>_<CTRL/C_>.
.skip
.lm 5
See also section 5.1.2, File Specification Switches.
.skip 2

.index ^^OC05##        C.5      SPECIFIC FEATURES OF VAX/VMS
C.5 SPECIFIC FEATURES OF VAX/VMS
.skip
[For "VAX/VMS Operating Characteristics", refer to Appendix G.]
.left margin 20
.ts 20
.skip
.i -15
Command	Description
.SKIP
.indent -15
_<CTRL/Z_>_<CTRL/Z_>_<CTRL/Z_>
.break
Returns control to VAX/VMS immediately.
Equivalent to typing _<CTRL/C_>_<CTRL/C_>.
.skip
.indent -15
EG`	Exit with special status
.break
TECO's normal exit status code (as reflected by the DCL symbols $STATUS
and $SEVERITY) is 1 (success).
If the exit was due to an EG` command,
the exit status code is 9 (also success).
.skip
.indent -15
.index ^^I105h#:EG    Execute operating system function
:EGSYM symbol__name symbol__value`
.break
Defines the DCL local symbol "symbol__name" with a value string of
"symbol__value".  Useful for creating symbols that will be used
by a command procedure upon TECO's exit.
.skip
.lm 5
See also section 5.1.2, File Specification Switches.

.skip 2
.index ^^OC06##        C.6      SPECIFIC FEATURES OF OS/8
C.6 SPECIFIC FEATURES OF OS/8
.skip
[For "OS/8 Operating Characteristics", refer to Appendix H.]
.left margin 20
.ts 20
.skip
.indent -15
Command	Description
.skip
.indent -15
.index ^^I023i#_^S     Save last command string
_<CTRL/S_>	If used as the first keystroke after TECO's prompt,
this command is the same as *Z, that is, it saves the last command string
in Q-register Z.  This command echoes as *Z and does not have to be followed
by a _<DELIM_>.
.skip
.lm 5
See also section 5.1.2, File Specification Switches.

.skip 2
.index ^^OC07##        C.7      SPECIFIC FEATURES OF TOPS-10
C.7 SPECIFIC FEATURES OF TOPS-10
.skip
[For "TOPS-10 Operating Characteristics", refer to Appendix I.]
.skip
.lm 20
.ts 20
.I -15
Command	Description
.skip
.indent -15
.index ^^I105m#nEM    Position magtape
nEM	Positions a magtape.  You must open the magtape for input
with an appropriate ER command before it can be positioned.
Exact positioning depends on the value of n, as described below.
You must reopen the magtape for output before you can output to it.
.break
[TECO-10 only]
.skip
.lm 30
.ts 30
.i -8
Value	Action
.skip
.indent -8
1EM	Rewind the currently-selected input magtape to load point.
EM is identical to 1EM.
.skip
.indent -8
3EM	Write an end-of-file record.
.skip
.indent -8
6EM	Skip ahead one record.
.skip
.indent -8
7EM	Back up one record.
.skip
.indent -8
8EM	Skip ahead to logical end of tape (defined by two successive
end-of-file marks).  Leave the magtape positioned between
the two end-of-file marks so that successive output correctly overwrites
the second EOF.
.skip
.indent -8
9EM	Rewind and unload.
.skip
.indent -8
11EM	Write 3 inches of blank tape.
.skip
.indent -8
14EM	Advance tape one file.  This leaves the tape positioned so that the next
item read will be the first record of the next file (or the second end-of-file
mark at the logical end-of-tape).
.skip
.indent -8
15EM	Backspace tape one file.
This leaves the tape positioned so that the next item
read will be the end-of-file mark preceding the file backspaced over
(unless the file is the first file on the tape).
.index ^^I021o#_^Q     Convert line arg into character arg
.skip
.lm 20
.ts 20
.indent -15
n_^Q	n_^QC is identical to nL.
This command returns
the number of characters between
the buffer pointer and the nth line separator (both positive
and negative).
This command converts line oriented command
argument values into character oriented argument values.
Used after an expression.
.skip
.indent -15
F0	Pointer position of start of window.  Same as 6:W.
.skip
.indent -15
FZ	Pointer position of end of window.
.skip
.indent -15
FH	Same as F0,FZ.
.skip
.indent -15
FX	Software maintained horizontal coordinate of location of cursor on screen
(0-origin).  Updated by TECO on terminal output.  If TECO cannot determine
the updated location of the cursor, this value is set to -1.
.skip
.indent -15
nFX	Set value of FX register to n.
.skip
.indent -15
FY	Software maintained vertical coordinate of location of cursor on screen
(0-origin).  Updated by TECO on terminal output.  If TECO cannot determine
the updated location of the cursor, this value is set to -1.
.skip
.indent -15
nFY	Set value of FY register to n.
.skip
.indent -15
FP	Equivalent to FY,FX.
.skip
.indent -15
m,nFP	Equivalent to mFYnFX.
.skip
.indent -15
m,nFF	Updates FY and FX registers as if the m,nT command were executed.
.skip
.indent -15
nFF	Assumes that the scope cursor is pointing at the character that is
just to the right of the text buffer pointer (the current character).  Then
this command advances n screen lines and goes to the end of that line
and returns that pointer position.
.skip
.indent -15
nFQq	Compares characters beginning at dot with characters beginning at
the nth character in Q-register q (0-origin).  When a match fails or the
match ends, this command moves the pointer to after the last character
that matched and returns the index into the Q-register.
.skip 1
.indent -15
E=filespec`	Renames the input file.
.skip
.i -15
E_&filespec`	Run the specified program when TECO exits.  Can take a numeric
argument which is the run-offset.  0 is the default.
.skip
.indent -15
m,nE*	Does an arbitrary TRMOP to your terminal.
.break
[Not available on TOPS-20.]
.skip 1
.i -15
::Gq	Same as :Gq but types literally.
.skip
.i -15
::ER	Same as ER but no defaults are used.
.skip
.i -15
_^Z	Closes output file and exits from TECO.
.skip
.i -15
_^P	Returns current page number.
.skip
.i -15
n_^P	Executes P commands until page n has been reached.
.skip
.i -15
n_^Y	Executes Y commands until page n has been reached.
.skip
.i -15
n,m=	Same as m=n_^T.
.skip
.i -15
m,n:_^T	Does an arbitrary TTCALL.
.skip
.i -15
.skip
.lm 5
See also section 5.1.2, File Specification Switches.

.page
.subtitle #####Appendix D
.index ^^OD####APPENDIX D       RT-11 OPERATING CHARACTERISTICS
.center
APPENDIX D
.skip 2
.center
RT-11 OPERATING CHARACERISTICS
.skip 2
.test page 4
D.1 STARTUP
.skip 1
TECO is started with the
.s 1;.i 10
_.R TECO
.s 1
command.  TECO is now immediately ready to accept commands.
The text buffer and Q-register areas are empty.
.skip 1
The EDIT command
.s 1;.i 10
_.EDIT/TECO filespec
.s 1
is used to edit an already existing file. It is equivalent to
.s 1;.i 10
_.R TECO
.i 10
*EBfilespec`Y``
.skip 1
For those RT-11 users that will use TECO as the primary
editor, a monitor SET command is provided:
.s 1;.i 10
_.SET EDITOR TECO
.s 1
Once this command is issued, the /TECO option on the EDIT
command is no longer necessary since the default editor is now TECO.
Since this SET command only has affect between system bootstraps,
it is recommended that the command be placed in the appropriate
startup file (e.g., STARTS.COM).
.skip 1
Now, assuming the SET command has been issued, the command
.s 1;.i 10
_.EDIT filespec
.s 1
can be used to edit an already existing file.
.skip 1
The standard RT-11 EDIT command options are all available
with TECO.
.s 1;.i 10
_.EDIT/CREATE filespec
.i 10
_.EDIT/INSPECT filespec
.i 10
_.EDIT/OUTPUT:filespec filespec
.skip 1
Another option, /EXECUTE, is also available:
.s 1;.i 10
_.EDIT/EXECUTE[:string] filespec
.s 1
The /EXECUTE option causes TECO to process the filespec
(assumed .TEC filetype) as a set of TECO commands. If "string"
is used, the string is placed into TECO's text buffer.
If "string" contains only alphanumeric characters, it does not have
to be enclosed in quotes. If it is to contain blanks, it must be
quoted with single quotes. The equivalent TECO commands
would be
.s 1;.i 10
_.R TECO
.i 10
*ERfilespec`YHXZHKIstring`MZ``
.s 1
Note the input file remains open and can provide more input to the
macro.
.s 2
.test page 4
D.2 FILE SPECIFICATION
.skip 1
The file access commands ER, EB, EI, and EW accept a file
specification in the standard RT-11 format:
.s 1;.i 10
dev:filename.type
.s 1
in which dev: is a physical device name or a user assigned logical
name; if dev: is not specified, the default DK: is assumed.
The filename field must be specified in the commands ER, EB, EI, and
EW and be a legal RT-11 filename.  The type field is a file
extension and must be explicitly given if used (there is no
default).  The EB and EW commands also accept the extended
notation for an output file size
.s 1;.i 10
dev:filename.type[n]
.s 1
The optional [n] specifies the output file size where n is the number
of blocks to be allocated.
.s 2
.test page 4
D.3 BACKUP FILES
.skip 1
The EB command maintains one level of file backup on RT-11.
The pre-edited input file name is changed to
.s 1
.i 10
filename.BAK
.s 1
before the new output file is closed with the original name.
Only normal file closing commands (EC, EF, EG, and EX)
cause this renaming to happen.  If TECO is aborted or
the output file is purged by the EK command, the input filename
remains unchanged.  Note only one .BAK file for
a given name is kept; earlier .BAK backup files are deleted each
time a new backup file is created.
.skip 1
A good policy to follow when editing is to close the edited
file frequently enough so that an unexpected incident would not cause
a substantial loss of work.  Files should be backed up regularly.
TECO has the power to let an unsuspecting user alter
a good file into a completely useless state.  The SRCCOM
program can be used to verify an editing session.
.s 2
.test page 4
D.4 EXIT AND GO
.skip 1
If TECO is exited via the EGstring` command, the string
is passed to the system as the next command to execute.
This string may be any valid command or an indirect command file
specification.
.s 2
.test page 4
D.5 REENTER AND CLOSE
.skip 1
The RT-11 REENTER command may always be used to continue
TECO.  Its primary differences from running TECO is
that when REENTER is used, the text buffer and Q-register areas
are unmodified, as opposed to when TECO is run the text buffer and
Q-register areas are cleared.  The input and output file are always
lost upon reentering TECO.  If an output file was open before
reentering TECO, the file will have to be recreated with the
appropriate E-command.  (Note that the monitor commands
GT#ON, GT#OFF, LOAD, and UNLOAD disallow
a REENTER.)
.skip 1
The output file is not closed if TECO is aborted.
The RT-11 CLOSE command can be used to make the output
file permanent, but be aware that the output file will not
be complete because of internal buffers that TECO keeps.
TECO may be reentered after a CLOSE command.
.s 2
.test page 4
D.6 FILE RECOVERY
.skip 1
TECO can be a useful tool in recovering ASCII files lost on a
block replaceable device.  TECO allows block replaceable devices
to be opened in a non-file structured mode.  This gives the user
the capability to open a disk and access ASCII data
anywhere on it, independent of file boundaries.  The command
.s 1;.i 10
ERdev:`
.s 1
is used to open the device at which point __ (underscore or
backarrow) searches may be used to locate specific ASCII data
and transfer it to new output files.  Note that files tend to get
reproduced, in whole or part, many places on a block
replaceable device; be sure to verify that any given text is indeed
complete and the correct version.
.s 2
.test page 4
D.7 SYSTEM CRASH RECOVERY
.skip 1
TECO and RT-11 are highly reliable, but if during an important
 edit session a random system failure should
occur, the following procedure may help save some or all of the
editing.
.ls
.le;Bootstrap the system
.le;Immediately perform a SAVE command to save as much of memory as
possible into a file on SY:.  The address range form of the
SAVE command must be used.  The SAVE command will
not allow any part of the monitor to be saved, e.g., if you have
a 28K system and are running SJ you cannot save 28K but only 26.3K.
.le;Perform standard startup procedures, e.g., DATE.
.le;Use TECO on the SAVEd file to try and recover useful
parts of the edit.
.els
.s 1
.test page 4
D.8 VT11 GRAPHICS SUPPORT
.skip 1
If the monitor supports the VT11 graphics processor (GT#ON and
GT#OFF work) TECO will automatically start up in display mode,
adjusting to both the size of the display screen and to the
presence or absence of the scroller.
.skip 1
If the display fails to start with a working VT11, TECO has
decided that there is not enough free memory and will not allocate the
display file buffer or start the display.
.skip 1
See Section 5.17 for a description of the available
commands to interact with the display.
.skip 1
Various aspects of the display screen become immediately obvious
upon seeing them; the text pointer, its position and shape and its
position between lines; wrap around of more than 72 characters per
line; the scroller interaction and so on.  Experiment with a scratch
file for more familiarity.

.page
.subtitle #####Appendix E
.index ^^OE####APPENDIX E       RSTS/E OPERATING CHARACTERISTICS
.center
APPENDIX E
.skip 2
.center
RSTS/E OPERATING CHARACERISTICS
.skip 2
.left margin 5
.test page 4
E.1 STARTUP
.skip 1
RSTS supports all of the standard TECO invocation commands,
namely
.s1.nf.lm+10
TECO
TECO filespec
TECO filespec=filespec
MAKE filespec
MUNG filespec
MUNG filespec,text
.s1.f.lm-10
The CCL command switches /DETACH and /SIZE:n (or /SIZE:+n)
can be used with TECO.
If /DETACH is used and the user's detached-job quota has not yet been reached,
TECO will detach the job before any further processing.
If /SIZE:n is used, TECO will pre-expand the text and
Q-register storage area to nK.
If /SIZE:+n is used, TECO will set the text storage and Q-register
storage area to n+4K initially (TECO's default startup size is 4K).
.s 2
.test page 4
E.2 FILE SPECIFICATION
.skip 1
The file access commands ER, EB, EW, and EI accept a file
specification in the standard RSTS/E format:
.s 1;.i 10
dev:[p,pn]filename.ext
.s 1
in which dev: is a physical device name or a logical device
name; if dev: is not specified, the public structure is assumed.
If [p,pn] is not specified, the user's current logged in account
is assumed.
The filename field must be specified whenever the device name
references a file structured device.
The .ext field is a file extension and must be explicitly given if
used. There is no default extension except for EI commands
which default the .ext field to .TEC.
.skip 1
The file specification switches /n, /B+, /, and /B2
may be applied to the ER, EW, and EB commands.
These switches invoke special handling of program lines
containing _<LF_> or _& continuation characters.
See Appendix J for more information.
.skip 1
The file specification switch /B causes TECO to handle
the file as a stream of 8-bit binary characters;
normal ASCII format processing (such as removal of
null characters) is not done.
.skip 1
The file specification switches /RONLY, /MODE:n, and
/CLUSTERSIZE:n can be included in a file specification.
TECO automatically opens any disk input file in /RONLY mode.
The file size switches /FILESIZE:n and /SIZE:n might leave
an output file larger than the amount of data output by TECO.
These file size switches are therefore illegal and produce
an error if included in a file specification.
.skip 1
The EB and EW commands also accept the extended
notation for an output file protection code
.s 1;.i 10
dev:[p,pn]filename.ext_<prot_>
.s 1
The optional _<prot_> specifies the output file protection code.
.s 2
.test page 4
E.3 BACKUP FILES
.skip 1
The EB command maintains one level of file backup on RSTS/E.
The pre-edited input file name is changed to
.s 1
.i 10
filename.BAK
.s 1
before the new output file is closed with the original name.
Only normal file closing commands (EC, EF, EG, and EX)
cause this renaming to happen.  If TECO is aborted or
the output file is purged by the EK command, the input filename
remains unchanged.  Note only one .BAK file for
a given name is kept; earlier .BAK backup files are deleted each
time a new backup file is created.
.skip 1
A good policy to follow when editing is to close the edited
file frequently enough so that an unexpected incident would not cause
a substantial loss of work.  Files should be backed up regularly.
TECO has the power to let an unsuspecting user alter
a good file into a completely useless state.  The FILCOM
program can be used to verify an editing session.
.s 2
.test page 4
E.4 EXIT AND GO
.skip 1
If TECO is exited via the EGstring` command,
the "string" is executed as a RSTS/E CCL command after
the input and output file(s) are closed.
.s 2
.test page 4
E.5 ET FLAG HANDLING
.skip 1
Bit 6 (detach) is handled specially by TECO. Every time the
ET flag is read (used as a numeric value), TECO ensures that
Bit 6 is on if the job is attached or off if the job is detached.
This allows a TECO macro to check for "detachedness".
If an attempt is made to set Bit 6 and the user's detached-job
quota has been reached, the request is ignored
and Bit 6 will read back as a 0 (assuming the job is attached).
If Bit 6 is set and the user's detached-job quota has not yet been reached,
the job will become detached.
Further reading of Bit 6 will return a 1, indicating the detached condition.

.page
.subtitle #####Appendix F
.index ^^OF####APPENDIX F       RSX-11 OPERATING CHARACTERISTICS
.center
APPENDIX F
.skip 2
.center
RSX-11 OPERATING CHARACERISTICS
.skip 2
.left margin 5
.test page 4
F.1 STARTUP
.skip 1
RSX-11 systems support all of the standard TECO invocation commands,
namely
.s1.nf.lm+10
TECO
TECO filespec
TECO filespec=filespec
MAKE filespec
MUNG filespec
MUNG filespec,text
.s1.f.lm-10
If any of these commands are not recognized by the system, check with your
system manager to see that TECO is properly installed.
.skip 1
TECO macros may also be invoked
with the command
.s 1;.i 10
TECO @filespec
.s 1
It is exactly equivalent to
.s 1;.i 10
MUNG filespec
.skip 1
In systems supporting dynamic task expansion, TECO will expand its buffer
space as necessary.
Also, TECO'S buffer space may be explicitly allocated in the startup
command
.s1;.i 10
RUN $TEC/INC=n
.s 2
.test page 4
F.2 INITIALIZATION
.skip 1
TECO searches for the TECO.INI startup file in the current default device
and directory. TECO's memory, in which a plain TECO command edits the file
last edited with a TECO filespec or a MAKE filespec command, is implemented
with a file named TECF00.TMP, also stored in the current default
device and directory.
.skip 1
The initial value of the ED flag is always 1.
.skip 1
When TECO is initially invoked it will automatically
set the ET and EU flags according to the user's terminal characteristics.
If the terminal supports CRT style rubouts, then bit 1 of the ET flag
is set to do the same in TECO. If the terminal supports lower case type in,
then bit 2 of the ET flag is set and the EU flag is set to -1 to turn off
case flagging.
If the terminal is a CRT type terminal and the version of TECO includes
the screen support package, then bit 9 of the ET flag is set.
While the command line is being processed, bit 7 of the ET flag is also
set to cause TECO to exit should any errors occurr. ET bit 7 is cleared
every time TECO reaches prompt (*) level.
.s 2
.test page 4
F.3 FILE SPECIFICATION
.skip 1
The file access commands ER, EB, EW, and EI accept a file
specification in the standard RSX-11 format:
.s 1;.i 10
dev:[p,pn]filename.typ;version
.s 1
in which dev: is a physical device name or a logical device
name; if dev: is not specified, SY: is assumed.
If [p,pn] is not specified, the user's current default directory
is assumed.
The filename field must be specified whenever the device name
references a file structured device.
The typ field is a file type and must be explicitly given if
used. There is no default type except for EI commands
which default the .typ field to .TEC.
.skip 1
The /B2 file specification switch may be applied to the ER, EW, and EB
commands and invokes special handling of program lines containing _&
continuation characters.
See Appendix J for more information.
.skip 1
The switch /RW may be applied to any file specification in an ER,
EW, and EI command. If the file specification references a magtape, the tape
is rewound before the file is opened. Note that for output files, this has the
effect of zeroing the tape. The /RW switch is ignored for all other
device types.
.skip 1
The presence of version numbers in Files-11 causes file processing to
behave slightly differently under RSX-11 than under other operating systems.
For example, no .BAK files are used; each execution of an EB command
simply produces a new version of the file. Thus a user may retain any level
of backup he feels to be comfortable. It also means that one must occasionally
delete obsolete files to avoid cluttering the disk. Thus the command
.s1;.i 10
EBname.typ;version`
.s1
is equivalent to the commands
.s1;.i 10
ERname.typ;version`EWname.typ;0`
.skip 1
 The EW command also
creates a new version  (one higher than the current highest) if no version
number is given. If an explicit version number is given, then that number is
used, and if another file of the same name, type, and version previously
existed, it is superseded without warning. (See use of the EP and
EK commands below.)
.skip 1
In reading files, version numbers behave the same as in other RSX-11
utilities: the default is the highest version. This leads to a problem in
re-opening the input file while a file is being edited with EB. Since
the output file is already created and in the directory, the input file is
no longer the highest version. One may deduce the version number of the
input file by doing a :G* (typing the file string of the output file)
and subtracting one from that version number.
.skip 1
In symmetry with the EB command, the EK command functions by simply
deleting the current output file. Note, however, that a supersede
(EW of same name, type, and version) is not undone - the file is already
deleted!
.skip 1
The EP and EA commands, while simulating two channels each with an open
file for each of input and output, in fact only keep one file open for each
to conserve buffer space. This means that they are only useful for disk
files. Also, it means that if you open a file and then supersede it,
you should not switch the input channel away from it with an EP or ER`
command, since it will not be possible to open the file again.
.s 2
.test page 4
F.4 WILD CARD LOOKUP
.skip 1
The EN command will process wild card lookups on RSX-11.
To preset the wild card lookup file specification, use the
standard RSX-11 format
.s 1;.i 10
dev:[p,pn]filename.typ;version
.s 1
The device name must reference a file structured disk device or magtape.
All other fields of the file specification may be fully wild (*), including
either or both halves of the directory.
The version number may be explicit, wild,
or default. As with the other file specification commands, there is no
default file type.
.s 2
.test page 4
F.5 EXITING FROM TECO
.skip 1
The normal method of exiting from TECO is with the EX command.
This copies the remaining input file to the output file,
closes all files and exits.
.skip 1
The _<CTRL/C_> (or Caret-C) command is the "give up and get out" command.
Executed from main command level, it will cause TECO to exit regardless
of the state of the buffer. If there is an open output file, it is deleted.
The _<CTRL/C_> command is roughly equivalent to EKHKEX.
.s 2
.test page 4
F.6 _<CTRL/C_>
.skip 1
The action taken when the user types _<CTRL/C_> depends on what
TECO is doing.
.skip 1
If TECO is executing commands, or is awaiting type-in for the _^T command,
the ?XAB error occurs.
.skip 1
If TECO is at command level, typing _<CTRL/C_> cancels the command string
currently being typed and returns TECO to its prompt. Two consecutive
_<CTRL/C_> characters will cause an instant HKEKEX exit.
.skip 1
Sometimes it is desireable for a TECO macro to detect when a _<CTRL/C_>
was typed. By detecting the _<CTRL/C_>, the macro can exit cleanly back
to command level (pop saved Q-registers, restore any flag values, etc.).
To do this, the macro sets Bit 15 (Octal 100000, Decimal -32768)
of the ET flag. When a _<CTRL/C_> is typed, TECO will automatically
turn off Bit 15, but will continue execution of the macro. The macro
periodically checks Bit 15 and exits cleanly if it ever goes off.
For example:
.s 1
.center
[0 [1 -32768_#ETET _< ... ET;#_> 32767_&ETET ]1 ]0
.s1
Setting the _<CTRL/C_> intercept bit in the ET flag must be done with some
care; if the bit is set inside a command loop which does not check it, it
will be impossible for the user to abort the loop. The only remedy for this
situation is to abort TECO from another terminal.
.s 2
.test page 4
F.7 EXIT AND GO
.s1
If TECO is exited via the EGstring` command, TECO closes its files and
exits. It then causes "string" to be executed as an MCR command using
the spawn system directive. This feature works only on RSX-11M V3.2
and RSX-11M+ V1 or later.
.s 2
.test page 4
F.8 ET FLAG HANDLING
.skip 1
TECO will automatically turn off the following bits in the ET
flag on every error: Bit 0 (image output), Bit 3 (no echo on _^T),
Bit 4 (cancel _^O), Bit 5 (no stall on _^T), and Bit 15
(_^C trap).
.skip 1
In addition, TECO always turns off Bit 7 (exit on error, etc.)
every time is reaches prompt (*) level.
.skip 1
Bit 6 (the detach flag) controls TECO'S treatment of the terminal.
Normally, TECO keeps the terminal attached to gain control of _<CTRL/C_>
interrupts. Setting bit 6 of the ET flag causes TECO to run with the
terminal detached. All commands function normally, except that typing
_<CTRL/C_> causes the MCR to be activated, allowing other tasks to be
run from the same terminal concurrently with TECO. It is, of course, the
user's problem to sort out the confusion that will arise if both TECO
and another task request input from the terminal at the same time.
.s 2
.test page 4
F.9 FILE RECORD FORMAT
.skip 1
Files-11 files are record structured, while TECO'S text buffer is
ASCII stream. Thus TECO must make format conversions when reading and
writing files. The conversion depends on the record attributes of the file.
While reading a file, the records are packed into the buffer. If the file is
implied carriage control (the standard RSX-11 source format) or Fortran
carriage control, TECO inserts a carriage return and line feed after each
record to make each record appear as a line of text in the buffer,
unless the record ends with ESCAPE, carriage return, line feed,
vertical tab, or form feed.
A record ending in form feed is interpreted as an end of page mark;
it stops the read operation
and the form feed is not entered in the buffer.
If the file has print file carriage
control, TECO interprets the carriage control bytes and inserts the
resulting carriage return and line feed characters about the record.
If the input file has no carriage control
(also called internal carriage control), TECO simply packs the records
together in the text buffer.
.skip 1
On output, TECO scans the text buffer for carriage return, line feed,
vertical tab, and form feed characters. Each such character
delimits the end of an output
record. If the output file is implied or Fortran carriage control, and
the record ends with exactly carriage return / line feed, the
carriage return and line feed are not output with the record;
Otherwise, the record is output in its entirety.
The carriage return and line feed are also output with the record if the
record ends with ESCAPE / carriage return / line feed.
.skip 1
Switches may be applied to the input and output files to control their
carriage control attributes. The switch /CR forces implied carriage control;
/-CR forces no (internal) carriage control; /FT forces Fortran carriage
control. When a carriage control switch is applied to an input file, the file
is read as if it had that attribute; when the switch is applied to an output
file, the file is written with that attribute. Applying a switch to an
EB file specification causes the switch to apply to both input and output
files. When an output file is created, its carriage control attributes
are defaulted to those of the currently open input file as follows:
.test page 5
.nofill
.s1
.tab stops 10,30
	Input	Output
.s1
	implied	implied
	none	implied
	FORTRAN	FORTRAN
	print file	implied
.fill
.skip 1
Files read with the EI command have their record attributes interpreted in
the same manner. This leads to an unexpected side effect with EI files
containing an entire command. The last record of the file presumably contains
as its last characters the two alt modes which initiate execution of the
macro. If the file is implied carriage control, however, there are also
the final carriage return / line feed belonging to the last record, which
remain in the type in buffer while the macro executes. If the macro attempts
to receive input with the _<CTRL/T_> command, the carriage return /
line feed will be the first two characters read. Alternatively, if the macro
does no type in, the carriage return / line feed will be read by TECO as
the first two characters of the next command. Then no asterisk (*) will
appear as the prompt for the next command. The remedy for both cases is
for the macro to execute an EI` command early on. This causes the remainder
of the indirect file to be discarded and further input to be read from the
terminal.
.s 2
.test page 4
F.10 COMMAND LINE PROCESSING
.skip 1
The mechanism used to process the command line in RSX-11 TECO is designed
to allow sophisticated TECO users the greatest flexibility in customizing
TECO for their own use. It functions as follows:
.skip 1
The initialization routine places the original MCR command line (if any)
into the filename buffer. It copies into the text buffer the text of a
TECO macro that will be used to interpret the command line.
Then it starts up TECO with the command
.s1
.i 10
HXY HKG* HXZ HK :EITECO``
.s1
in the type in buffer.
This loads the command line into Q-register Z and the macro into
Q-register Y. It then executes the file named TECO.TEC located in the
user's default directory, if it exists.
After the user's TECO.TEC, and any files it might link to with EI,
have been executed, TECO executes the command MY``, thus executing the
macro to interpret the command line and open the files requested.
.skip 1
The TECO.TEC mechanism should not be used for simple initialization;
the standard TECO.INI facility should suffice for that. The alternate
TECO.TEC facility is provided for the sophisticated user who wants his
own command processing and thus wishes to usurp control from the normal
initialization.
.skip 1
If an EI` command (to close the indirect command file) is executed during
the processing of a user's TECO.TEC startup file, the final MY`` which causes
processing of the command line is not executed. This results from the fact
that the MY`` normally appears in TECO's type in after all command files have
been processed. Executing the EI` command causes all "type ahead" to be
discarded to allow a TECO command file to prompt and read input from the
terminal (and not read extraneous type ahead). It is assumed that a TECO
startup file that executes EI` and reads input from the terminal will want
to manage the rest of TECO's startup. If it still wants to process the
command line, it must issue the MY itself.

.page
.subtitle #####Appendix G
.index ^^OG####APPENDIX G       VAX/VMS OPERATING CHARACTERISTICS
.center
APPENDIX G
.skip 2
.center
VAX/VMS OPERATING CHARACERISTICS
.skip 2
.left margin 5
.skip 1
TECO is implemented in VAX/VMS as a half-native, half-compatibility
mode program. The command processor and editor proper is the same as
TECO-11 and runs in compatibility mode. Operating system interface and file
service logic run in native mode.
.s2
.test page 4
G.1 STARTUP
.skip 1
VAX/VMS supports all of the standard TECO invocation commands,
namely
.s1.nf.lm+10
TECO
TECO filespec
TECO filespec=filespec
MAKE filespec
MUNG filespec
MUNG filespec,text
.s1.f.lm-10
If any of these commands are not recognized by the system, see the
installation instructions (section G.13) in this appendix.
.skip 1
TECO macros may also be invoked
with the command
.s 1;.i 10
TECO @filespec
.s 1
It is exactly equivalent to
.s 1;.i 10
MUNG filespec
.s2
.test page 4
G.2 INITIALIZATION
.skip 1
TECO performs initialization by attempting to translate the logical
name TEC$INIT. If this name does not translate, no special initialization
is done. If it translates to a string of the form $filespec (where
"$" is a dollar sign), TECO executes the TECO commands in the specified
filespec during initialization. If TEC$INIT translates to any other
string, TECO executes that string as TECO commands during initialization.
The original command line is available in the text buffer when the
user initialization commands execute.
Generally, you would set user private modes and/or flags at this time.
This is also the normal place to detect, strip off, and do something
appropriate with user private qualifiers.
.s1
TECO's memory is controlled by the logical name TEC$MEMORY. If this name
translates to a string of the form $filespec, TECO uses the specified
file for its memory. Otherwise, TECO uses the logical name itself
as the memory.
.s1
If TECO is requested to load VTEDIT at startup (e.g., via a TECO#/VTEDIT
command), it attempts to translate the logical name TEC$VTEDIT. If
the name is defined, the resulting filespec is used as the file from
which to load the scope editor.
If TEC$VTEDIT is not defined, TECO attempts to translate the logical name
TEC$LIBRARY.  If that logical is defined, it is used as the (device and)
directory name of where to find VTEDIT.TEC.
Elsewise, TECO defaults to SYS$LIBRARY:VTEDIT.TEC.
.s1
These four logical names (TEC$INIT, TEC$MEMORY, TEC$VTEDIT, and TEC$LIBRARY)
are the information holders corresponding to the four standard :EG commands
INI, MEM, VTE, and LIB respectively (see section 5.1.3).
.s2
.test page 4
G.3 FILE SPECIFICATION
.skip 1
All file specifiers are subject to the VAX/VMS file specifier rules;
logical names and multi-level directories are properly handled,
including transparent network file access.
The filename field must be specified whenever the device name
references a file structured device.
The type field must be explicitly given if
used. There is no default type except for EI commands
which default the type field to .TEC.
.skip 1
Qualifiers may be applied to file specifications to control
format and attributes;  see G.11.
.skip 1
The qualifier /RW may be applied to any file specification in an ER,
EW, and EI command. If the file specification references a magtape, the tape
is rewound before the file is opened. Note that for output files, this has the
effect of zeroing the tape. The /RW qualifier is ignored for all other
device types.
.skip 1
The presence of version numbers in Files-11 causes file processing to
behave slightly differently under VAX/VMS than under other operating systems.
For example, no .BAK files are used; each execution of an EB command
simply produces a new version of the file. Thus a user may retain any level
of backup he feels to be comfortable. It also means that one must occasionally
delete obsolete files to avoid cluttering the disk. Thus the command
.s1;.i 10
EBname.typ;version`
.s1
is equivalent to the commands
.s1;.i 10
ERname.typ;version`EWname.typ;0`
.skip 1
 The EW command also
creates a new version  (one higher than the current highest) if no version
number is given. If an explicit version number is given, then that number is
used, and if another file of the same name, type, and version previously
existed, it is superseded without warning. (See use of the EK command below.)
.skip 1
In reading files, version numbers behave the same as in other VAX/VMS
utilities: the default is the highest version. This leads to a problem in
re-opening the input file while a file is being edited with EB. Since
the output file is already created and in the directory, the input file is
no longer the highest version. One may deduce the version number of the
input file by doing a ER`:G*`` which types the file string of the current
(primary) input file.
.skip 1
In symmetry with the EB command, the EK command functions by simply
deleting the current output file. Note, however, that a supersede
(EW of same name, type, and version) is not undone - the file is already
deleted!
.skip 1
When files are processed concurrently on the primary and secondary
channels, all files are kept open. Thus the problems that occur under
RSX-11 do not exist under VAX/VMS.
.s 2
.test page 4
G.4 WILD CARD LOOKUP
.skip 1
Wild card file name processing supports all of the wild carding
facilities of RMS.  For VAX/VMS V2 and later systems this includes
embedded * and % and multi-level directory wildcarding.
.s2
.test page 4
G.5 SYMBOL CONSTITUENTS
.skip 1
The match control character _^EC and the conditional n"C accept the VAX/VMS
symbol constituent character set, which consists of upper and lower case
alphabetics, numerics, ., $, and __.
.s 2
.test page 4
G.6 EXITING FROM TECO
.skip 1
The normal method of exiting from TECO is with the EX command.
This copies the remaining input file to the output file,
closes all files and exits.
.skip 1
The _<CTRL/C_> (or Caret-C) command is the "give up and get out" command.
Executed from main command level, it will cause TECO to exit regardless
of the state of the buffer. If there is an open output file, it is deleted.
The _<CTRL/C_> command is roughly equivalent to EKHKEX.
.skip 1
TECO's normal exit status code (as reflected by the DCL symbols $STATUS
and `SEVERITY) is 1 (success).  An exit caused by an EG` command sets the
exit status code to 9 (also success).
An error exit caused by an error or _<CTRL/C_> with the 128 bit set in ET
sets the exit status code to hexidecimal 1000002C which is SS$__ABORT
with the inhibit message bit set.
All other exits are from fatal internal errors and the exit status code
is the fatal error status code.
.s 2
.test page 4
G.7 _<CTRL/C_>
.skip 1
The action taken when the user types _<CTRL/C_> depends on what
TECO is doing.
.skip 1
If TECO is executing commands, or is awaiting type-in for the _^T command,
the ?XAB error occurs.
.skip 1
If TECO is at command level, typing _<CTRL/C_> cancels the command string
currently being typed and returns TECO to its prompt. Two consecutive
_<CTRL/C_> characters will cause an instant HKEKEX exit.
.skip 1
Sometimes it is desireable for a TECO macro to detect when a _<CTRL/C_>
was typed. By detecting the _<CTRL/C_>, the macro can exit cleanly back
to command level (pop saved Q-registers, restore any flag values, etc.).
To do this, the macro sets Bit 15 (Octal 100000, Decimal -32768)
of the ET flag. When a _<CTRL/C_> is typed, TECO will automatically
turn off Bit 15, but will continue execution of the macro. The macro
periodically checks Bit 15 and exits cleanly if it ever goes off.
For example:
.s 1
.center
[0 [1 -32768_#ETET _< ... ET;#_> 32767_&ETET ]1 ]0
.s1
Setting the _<CTRL/C_> intercept bit in the ET flag must be done with some
care; if the bit is set inside a command loop which does not check it, it
will be impossible for the user to abort the loop. The only remedy for this
situation is to abort TECO with _<CTRL/Y_>, resulting in the loss of the
edit.
.s2
.test page 4
G.8 _<CTRL/Y_>
.s1
_<CTRL/Y_> is
not handled at all by TECO and
will result in trapping to the command interpreter.
Should you accidentally type _<CTRL/Y_>, immediately type CONTINUE in
response to the DCL prompt to resume editing.
.s 2
.test page 4
G.9 EXIT AND GO
.s1
If TECO is exited with the EGstring` command, the string is passed to
the command interpreter as the next command to execute after TECO has
closed its files and exited.
This feature works only on VAX/VMS V2 and later systems.
.s 2
.test page 4
G.10 ET FLAG HANDLING
.skip 1
TECO will automatically turn off the following bits in the ET
flag on every error: Bit 0 (image output), Bit 3 (no echo on _^T),
Bit 4 (cancel _^O), Bit 5 (no stall on _^T), and Bit 15
(_^C trap).
.skip 1
In addition, TECO always turns off Bit 7 (exit on error, etc.)
every time is reaches prompt (*) level.
.skip 1
Bit 6 (the detach flag) has no meaning in VAX/VMS.

.s 2
.test page 4
G.11 FILE RECORD FORMAT
.skip 1
Files-11 files are record structured, while TECO'S text buffer is
ASCII stream. Thus TECO must make format conversions when reading and
writing files. The conversion depends on the record attributes of the file.
While reading a file, the records are packed into the buffer. If the file is
implied carriage control (the standard VAX/VMS source format) or FORTRAN
carriage control, TECO inserts a carriage return and line feed after each
record to make each record appear as a line of text in the buffer,
unless the record ends with ESCAPE, carriage return, line feed,
vertical tab, or form feed.
A record containing a form feed is interpreted as an end of page mark;
it stops the read operation
and the form feed is not entered in the buffer.
The portion of the record after the form feed, if any, is saved
for the next input command.
If the file has print file carriage
control, TECO interprets the carriage control bytes and inserts the
resulting carriage return and line feed characters about the record.
If the input file has no carriage control
(also called internal carriage control), TECO simply packs the records
together in the text buffer.
.skip 1
On output, TECO scans the text buffer for carriage return, line feed,
vertical tab, and form feed characters. Each such character
delimits the end of an output
record. If the output file is implied or FORTRAN carriage control, and
the record ends with exactly carriage return / line feed, the
carriage return and line feed are not output with the record;
Otherwise, the record is output in its entirety.
The carriage return and line feed are also output with the record if the
record ends with ESCAPE / carriage return / line feed.
.skip 1
Qualifiers may be applied to the input and output file specifications.
When a carriage control qualifier is applied to an input file,
the file is read as if it had that attribute;
when the qualifier is applied to an output file,
the file is written with that attribute.
Applying a qualifier to an EB file specification
causes the qualifier to apply to both input and output files.
.tab stops 10,30
.skip
The following qualifiers may be used to control input processing:
.skip
.nofill
	/-CR	Force "none" file record attributes
	/CR	Force "Implied" file record attributes
	/FT	Force "FORTRAN" file record attributes
	/FTN	Same as /FT
	/B2	BASIC-PLUS-x handling (see Appendix J)
.fill
.skip
The following qualifiers may be used to control output processing:
.skip
.nofill
	/VAR	Create file record format "Var"
	/STM	Create file record format "Stm"
	/-CR	Create file record format "None"
	/CR	Create file record format "Implied"
	/FT	Create file record format "FORTRAN"
	/FTN	Same as /FT
	/B2	BASIC-PLUS-x handling (see Appendix J)
.fill
.skip
The following qualifiers may be used to control open/create/access options:
.skip
.nofill
	/RW	Rewind before open/create
	/SH	Enable file sharing
	/SHR	Same as /SH
.fill
.skip
Below is a complete list of valid TECO input file record
format/attribute combinations and the resulting file format/attribute
combinations for EB commands:
.skip
.nofill
      Input                     Output
  Format Attribute          Format Attribute

   Fix     none              Var     Implied
   Fix     Implied           Var     Implied
   Fix     FORTRAN           Var     FORTRAN
   Var     none              Var     Implied
   Var     Implied           Var     Implied
   Var     FORTRAN           Var     FORTRAN
   VFC     Print             Var     Implied
   Stm     none              Stm     Implied
   Stm     Implied           Stm     Implied
.fill
.skip 1
Files read with the EI command have their record attributes interpreted in
the same manner. This leads to an unexpected side effect with EI files
containing an entire command. The last record of the file presumably contains
as its last characters the two alt modes which initiate execution of the
macro. If the file is implied carriage control, however, there are also
the final carriage return / line feed belonging to the last record, which
remain in the type in buffer while the macro executes. If the macro attempts
to receive input with the _<CTRL/T_> command, the carriage return /
line feed will be the first two characters read. Alternatively, if the macro
does no type in, the carriage return / line feed will be read by TECO as
the first two characters of the next command. Then no asterisk (*) will
appear as the prompt for the next command. The remedy for both cases is
for the macro to execute an EI` command early on. This causes the remainder
of the indirect file to be discarded and further input to be read from the
terminal as soon as the double alt mode is encountered.
.s 2
.test page 4
G.12 COMMAND LINE PROCESSING
.skip 1
The mechanism used to process the command line in VAX/VMS TECO is designed
to allow sophisticated TECO users the greatest flexibility in customizing
TECO for their own use. It functions as follows:
.skip 1
The initialization routine places a built-in command decoding TECO macro
into Q-register Y and the original command line (including the keyword
TECO, MAKE, or MUNG) into Q-register Z.
.s1
It then looks for a user private command decoding TECO macro by attempting
.ls
.le;an EITECO`` if the logical name "TECO" exists, elsewise
.le;an EISYS$LOGIN:TECO`` if the logical name "SYS$LOGIN" exists, elsewise
.le;an EITECO``
.els
If the EI succeeds, the found file is executed.  The file may, or course,
do anything it pleases.
Generally, you would use a private command decoder to automate some sort
of system specific editing package.  For example, to implement an editing
package called FOOBAR, you would define the logical TECO with
.i +10
$ DEFINE/SYSTEM TECO dev:[dir]FOOBAR
.br
define a DCL foreign command symbol with
.i +10
$ FOOBAR :== $SYS$SYSTEM:TECO FOOBAR
.br
and place the TECO macro the implements the FOOBAR editor in
dev:[dir]FOOBAR.TEC.  Now, whenever a TECO, MAKE, MUNG, or FOOBAR
command is issued, the your macro will gain control.  It should
fetch Q-register Z (the original command line), check the command
type, if it's FOOBAR then go do its thing, else it should terminate
and execute TECO's built-in command decoder.
.lm+10;.nf;.s1
GZ               ! Put command into text buffer !
J ::@S/FOOBAR/"U ! Is the command for us? !
  @EI//          ! Not for us, turn us off !
  HK             ! Clear out text buffer !
  MY             ! Let the real TECO takeover !
'                ! It's for us, just flow on... !
$$               ! Double ESCAPE; 1st command's end !
_...              ! Do your own thing here... !
.lm-10;.f;.s1
This mechanism should not be used for simple initialization;
the standard TEC$INIT facility should suffice for that.
This facility is provided for the sophisticated user who wants his
own command processing and thus wishes to usurp control.
.s2
.test page 4
G.13 HELP
.skip 1
On VAX/VMS, TECO can provide HELP in any of three ways.
.skip 1
You can issue a HELP command at TECO's asterisk prompt.
This HELP command obeys the standard VAX/VMS HELP command syntax rules.
The HELP command may be terminated by either RETURN or ``.
.skip 1
You can type the / command immediately after an error.
(See section 4.2.)
TECO will respond with a one-paragraph description of the error.
.skip
You can set EH to 3.
(See section 5.16.)
This will cause TECO to automatically respond with a
one-paragraph description of any error which occurs.
.s2
.test page 4
G.14 INSTALLING TECO
.skip 1
TECO is distributed with VAX/VMS; the files are already in place.
If TECO will receive heavy use, it should be installed /OPEN and
/HEADER__RESIDENT.
.skip 1
The following commands, if used in a LOGIN.COM file,
would define the three normal TECO invocation commands:
.s1.nf.lm+10
$ TE*CO :== $SYS$SYSTEM:TECO TECO
$ MAK*E :== $SYS$SYSTEM:TECO MAKE
$ MU*NG :== $SYS$SYSTEM:TECO MUNG
.s1.f.lm-10
The asterisk allows for abbreviation of these commands.  For example,
the TE*CO definition permits TE, TEC, or TECO.
.s1
One may include command qualifiers in the command definitions. For example,
one can define a command to invoke TECO with VTEDIT as follows:
.s1.i 10
$ VTECO :== $SYS$SYSTEM:TECO TECO /VTEDIT

.page
.subtitle #####Appendix H
.index ^^OH####APPENDIX H       OS/8 OPERATING CHARACTERISTICS
.center
APPENDIX H
.skip 2
.center
OS/8 OPERATING CHARACTERISTICS
.skip 2
.left margin 5
.test page 4
H.1 STARTUP
.skip 1
TECO is started with the
.s 1;.i 10
_.R TECO
.s 1
command.  TECO is now immediately ready to accept commands.
The text buffer and Q-register areas are empty.
.skip 1
The TECO command
.s 1;.i 10
_.TECO filespec
.s 1
is used to edit an already existing file. It is equivalent to
.s 1;.i 10
_.R TECO
.i 10
*EBfilespec`Y``
.skip
OS/8 "remembers" the filespec as the name of the last file that has been
edited.
.skip 1
The MAKE command
.skip 1
.i 10
_.MAKE filespec
.skip 1
is used to create a new file.
It is equivalent to
.skip 1
.indent 10
_.R TECO
.indent 10
*EWfilespec``
.skip
OS/8 "remembers" the filespec as the name of the last file that was
edited.
.skip 1
The command
.skip 1
.i 10
_.TECO filespec1=filespec2
.skip 1
is used to edit filespec2 into filespec1.  That is, filespec2
is opened as the input file, and filespec1 is created as the
output file.  It is equivalent to
.skip
.indent 10
_.R TECO
.indent 10
*ERfilespec2`EWfilespec1`Y``
.skip
OS/8 "remembers" the filespec1 as the name of the
last file that was edited.
.skip 1
The command
.skip
.i 10
_.TECO
.skip 1
with no arguments, causes CCL to execute the command
.skip 1
.i 10
_.TECO filespec
.skip 1
where filespec was the file that was previously remembered
as the last file to be edited.  The system purposely does
not remember filenames from one day to the next, but it
will remember names across bootstraps.
.skip 1
The command
.skip 1
.i 10
_.MUNG filespec
.skip 1
executes the specified TECO program.  The default extension is .TEC .
This is equivalent to the sequence:
.skip 1
.i 10
_.R TECO
.i 10
*ERfilespec`YHXYHKMY``
.skip 1
Another format of this command is
.skip 1
.i 10
_.MUNG filespec,argument
.skip
which is used to pass an argument to the TECO program to control
its action.  This is equivalent to the sequence:
.skip 1
.i 10
_.R TECO
.i 10
*ERfilespec`YHXYHKIargument`MY``
.skip 1
.skip 1
The argument may be the name of a file that the TECO program
is to mung, or it may be a command to the program to specify what
action to take, or whatever.  It is up to the TECO program to decode
this argument (which is left in the text buffer) and take appropriate
action.  A TECO program executed via the MUNG command must never
destroy the text storage area of Q-register Y and expect to ever see
the light of day again.
.s 1
Note the input file remains open and can provide more input to the
macro.
.s 2
.test page 4
H.2 STARTUP CONDITIONS
.skip 1
The initial value of the EU flag is 0
if the CCL command SET TTY NO SCOPE had been previously
issued, and is -1 if the CCL command SET TTY SCOPE had previously
been issued.
.skip 1
The initial value of the ET flag is as follows:
.break
.ts25
.skip 1
#####Bit value	Initial value
.skip 1
.lm15
1	0
.break
2	0 (1 if terminal is a scope)
.break
4	0
.break
8	0
.break
16	0
.break
32	0
.break
64	0
.break
128	1 (TECO's prompt sets this to 0)
.break
256	0
.break
512	0 (1 if VT support is present)
.break
1024	0 (1 if VR12 support is present)
.break
2048	0
.lm5
.skip 1
The initial value of the ED flag is 1.
.s 2
.test page 4
H.3 FILE SPECIFICATION
.skip 1
The file access commands ER, EB, and EW accept a file
specification in the standard OS/8 format:
.s 1;.i 10
dev:filename.type
.s 1
in which dev: is a physical device name or a user assigned logical
name; if dev: is not specified, the default DSK: is assumed.
The filename field must be specified in the commands ER, EB, and
EW and be a legal OS/8 filename.  The type field is a file
extension and must be explicitly given if used (there is no
default).
Any characters after the second will be ignored, thus the filespecs
FOO.TEC and FOO.TE are equivalent.
The EB and EW commands do not accept the extended
notation for an output file size
.skip
.center
 dev:filename.type[n]
.skip
specifying an output size allocation.
.s 2
.test page 4
H.5 BACKUP FILES
.skip 1
The EB command maintains one level of file backup on OS/8.
The pre-edited input file name is changed to
.s 1
.i 10
filename.BK
.s 1
before the new output file is closed with the original name.
Only normal file closing commands (EC, EF, EG, and EX)
cause this renaming to happen.  If TECO is aborted or
the output file is purged by the EK command, the input filename
remains unchanged.  Note only one .BK file for
a given name is kept; earlier .BK backup files are deleted each
time a new backup file is created.
.skip 1
A good policy to follow when editing is to close the edited
file frequently enough so that an unexpected incident would not cause
a substantial loss of work.  Files should be backed up regularly.
TECO has the power to let an unsuspecting user alter
a good file into a completely useless state.  The SRCCOM
program can be used to verify an editing session.
.s 2
.test page 4
H.6 EXIT AND GO
.skip 1
If TECO is exited via the EGstring` command, the string
is passed to the system as the next command to execute.
This string may be any valid command or an indirect command file
specification.
The command may be either a KBM or a CCL command.
This command is especially useful while running under BATCH.
.skip 1
If TECO is exited via the EG` command, then OS/8 will re-execute the last
explicit compile-class command that was executed that day.
The commands that are
considered to be compile-class commands are:
.skip
COMPILE file
.break
LOAD file
.break
EXECUTE file
.break
LINK file
.break
MACRO file.
.skip
This feature, combined with OS/8's other remembering features, minimizes
the number of keystrokes necessary to do normal program development.
The programmer does not have to constantly type in the name of the file
he is working with.  A typical debugging session would look like this:
.skip
.left margin 20
_.MAKE FOO.MAC
.break
*!type in assembly language file to be executed!
.break
*EX``
.break
_.EXECUTE FOO
.break
(get error messages)
.break
_.TECO
.break
*!fix bugs!
.break
*EG``######!re-compile and execute program!
.break
(watch program work or repeat process)
.left margin 5
.s 2
.test page 4
H.7 _<CTRL/C_>
.skip 1
The action taken when the user types _<CTRL/C_> depends
on what TECO is doing. At command level _<CTRL/C_> is an immediate action
command.  If typed as the very first character in a command string
(not necessarily the first keystroke) it aborts TECO and returns
to the keyboard monitor.  If this was done accidentally, TECO
may be restarted (at your own risk) by using ODT to branch to
location 207 in your program's image.
If _<CTRL/C_> is typed in the middle of entering a command string,
then the ?XAB error message is given and TECO reprompts with its
asterisk.
Note that if TECO executes _<CTRL/C_> as a command from command level,
TECO is aborted.
If TECO executes a _<CTRL/C_> command from within a macro, TECO
is also aborted.
If a _<CTRL/C_> is typed while TECO is running, or while TECO is
typing on the terminal, or while an error message is printing, then
the ?XAB error message is given and TECO reprompts with its
asterisk.  TECO will abort similarly,
if _<CTRL/C_> is typed while TECO is waiting
for input because of a _^T command.
Note that if TECO is performing I/O using non-system handlers,
the non-system handler may intercept the _<CTRL/C_> and abort
back to the keyboard monitor.  In such a case, you may attempt
to re-enter TECO. However, part of your file has been lost;
good luck in attempting to issue an EF command.
Manually resetting the value of Z might recover your data.
.skip 1
If TECO is executing commands or doing I/O, a _<CTRL/C_>
will stop the operation and generate the ?XAB error message.
.skip 1
Sometimes it is desireable for a TECO macro to detect when
a _<CTRL/C_>
was typed. By detecting the _<CTRL/C_>,
the macro can exit cleanly back
to command level (restore any flag values, etc.).
To do this, the macro sets Bit 0 (Octal 4000, Decimal 2048)
of the ET flag. When a _<CTRL/C_> is typed,
TECO will automatically
turn off Bit 0, but will continue execution of the macro. The macro
periodically checks Bit 0 and exits cleanly if it ever goes off.
If the _<CTRL/C_> trap bit is on, then the _^T can read a _<CTRL/C_>
typed at the terminal.  It has an ASCII value of 3.
.s 2
.test page 4
H.8 FILE RECOVERY
.skip 1
TECO can be a useful tool in recovering ASCII files lost on a
block replaceable device.  TECO allows non-file-structured devices
to be opened in a non-file structured mode.  This gives the user
the capability to open a disk and access ASCII data
anywhere on it, independent of file boundaries.
To do this, you must issue a command of the form
.skip 1
.indent 10
_.SET dev: NOFILES
.skip 1
to the monitor to make it think that your disk is non-file-structured.
The command
.s 1;.i 10
ERdev:`
.s 1
is used to open the device at which point __ (underscore or
backarrow) searches may be used to locate specific ASCII data
and transfer it to new output files.  Note that files tend to get
reproduced, in whole or part, many places on a block
replaceable device; be sure to verify that any given text is indeed
complete and the correct version.
.skip 1
If the disk's directory has not been clobbered (or if you are
willing to create a new one), then it is not necessary to turn
the disk into a non-file-structured device.  Merely open up
a file early on the disk for input and read through end-of-files
until you locate the lost file.  To read through end-of-files,
you must use the /S switch on an ER, EB, or EW command.
For example, the command
.skip 1
.center
ERFOO.MAC/S`
.skip 1
will open the file FOO.MA for input and put TECO into "SUPERTECO"
mode.  In this mode, TECO will not treat a _<CTRL/Z_> found in a file
as an end-of-file character.
Instead, _<CTRL/Z_> will be treated like any other character.
It is not a line terminator or a page terminator.
This mode continues until an ER, EW, or EB command is issued
without a /S switch.
.s 2
.test page 4
H.9 VR12 GRAPHICS SUPPORT
.skip 1
If TECO is run on a PDP-12,
TECO will automatically start up in display mode,
adjusting to both the size of the display screen and to the
presence or absence of the scroller.
.skip 1
On a PDP-12, TECO only permits one-page input and output
handlers.
.skip 1
See Section 5.17 for a description of the available
commands to interact with the display.
.skip 1
Various aspects of the display screen become immediately obvious
upon seeing them; the text pointer, its position and shape and its
position between lines; wrap around of more than 72 characters per
line, and so on.  Experiment with a scratch
file for more familiarity.
.skip 2
.test page 4
H.10 EXCEPTIONS
.skip 1
TECO-8 does not support the following commands which are described
in this manual:
.ls
.le;Secondary streams (EP, EA, ER`, EW`)
.le;Auxiliary command streams (EI)
.le;Wildcards (EN)
.le;Zeroing of directories (EZ)
.le;Magtape commands (EM)
.le;View command (nV)
.le;Bounded searches
.le;Anchored searches
.le;Search verification (ES)
.le;Command verification (EV)
.le;Backward searches
.le;Extended string build or match constructs (_^Ex)
.els
The following incompatibilities exist between TECO-8 and Standard TECO:
.ls
.le;In octal mode, the digits 8 and 9 are not treated as errors when occurring
in a numeric string.
.le;The *q immediate action command is not implemented.
Instead, the immediate
action command * has the same effect as *Z of the standard.
(The immediate mode command _^S is still accepted for compatibility with
OS/8 TECO V5.)
.els
.skip 2
.test page 4
H.11 CHAINING TO TECO
.skip 1
A user program may chain to TECO passing it a command to be executed.  There
are two formats that such a command may take.
.skip 1
Format 1 (the TECO command format)
passes TECO a valid TECO command to be executed.  This TECO command
is placed in a buffer starting at location 17600,
one 7-bit ASCII character per word.
A negative word represents a pointer to a continuation buffer in field 1.
There may be any number of continuation buffers, but they must all begin
above location 4000 in field 1.  Since TECO clobbers most of field 1, these
buffers must in fact start above location 7400.  TECO will never load
into page 7400 of field 1.  The buffer ends with a fullword 0.
.skip 1
Format 2 (the CCL command format) passes TECO a CCL command to be parsed and
executed.  Such a command usually begins with the words TECO, MAKE, or MUNG,
but is not limited to these words.  Such a CCL command is placed in a buffer
starting at location 17601, one 7-bit ASCII character per word.
Location 17600 must be a fullword 0 to specify that this format is being used.
A negative word
in the buffer represents a pointer to a continuation buffer in field 1 as
described above.  The buffer ends with a fullword 0.  If this format is
used, the passed CCL command will be parsed and executed by TECO.TEC as
described below.  A user may write his own TECO.TEC, thus implementing his
own CCL commands.  There is no limit to the possiblities, other than the
user's imagination.
.skip 2
.test page 4
H.12 USER INITIALIZATION
.skip 1
If a user has a file called TECO.INI on SYS:, then when TECO starts up (via a
CCL command, it
will execute the contents of this file (as a TECO macro).  This file must
contain a valid TECO program (which will execute out of Q-register W).
God help you if you have any errors in this program.  This start-up file
must not modify itself (Q-register W) and must not modify the contents of
Q-register V.
It should not indiscriminately modify the contents of Q-register Z or the
text buffer.
TECO.INI will be executed before TECO opens any
files.  That is, if TECO was invoked via a MAKE command, TECO.INI will be
executed before the EW command (for the MAKE) is executed.
At this point, the text buffer will contain a copy of the CCL command that
invoked TECO (assuming your monitor has TECO.TEC support).  However, TECO
has not as yet parsed this line.  The user may examine this line for himself,
and modify it, but you had better know what you are doing (and do it right!).
TECO.TEC will parse the contents of the text buffer at the conclusion of
execution of TECO.INI.
.skip 1
If your monitor does not have TECO.TEC support, or if a user program chained
to TECO passing it a TECO command (rather than a CCL command), then the
initial TECO command will be in Q-register Z when TECO.INI gets control.
That command has not as yet been executed.
The initialization file may examine the contents of Q-register Z to determine
what TECO command will be executed and proceed accordingly.  It may also
modify the contents of Q-register Z (but you better know what you are doing).
.skip 1
In this case, TECO.INI is started up via the sequence
.skip
.lm20.nofill
@:ER/SYS:TECO.INI/"SYHXWHK
@_^UZ_^@teco command_^@
MW+0ES.,.XWMZES"N0ESMX'``
.SKIP
.lm5.fill
which loads TECO.INI into Q-register W, loads the chain argument consisting
of an appropriate teco command into Q-register Z, and temporarily stores the
value returned by TECO.INI in the search verification flag (this feature
may change in a subsequent release).  Q-register W and ES are cleared
before the post-processing command in Q-register X is executed.  Note that
the chain argument may not contain any embedded nulls.
.skip 2
.test page 4
H.13 RETURNED VALUES FROM TECO.INI
.skip 1
TECO.INI may also return a value.  If your monitor does not support TECO.TEC,
then only two values are permitted.  Returning a 0 (or not returning anything)
is the normal sequence of events.  Returning a 1 means that TECO should
execute the contents of Q-register X (via an MX command) after it executes
the initial TECO command (in Q-register Z).  TECO.INI may set up Q-register
X with the appropriate post-processing commands.
A typical use of this feature
would be to have TECO.INI load up Q-register I with an editing macro and then
put an "MI" command in Q-register X for subsequent execution.
If your  monitor
does have TECO.TEC support, then TECO.TEC can support additional
returned values.
It is recommended that TECO.TEC support
the returned values of 0 and 1 as above,
but in addition, it may support additional values determined by the user.
.skip
Note that TECO.INI is not invoked if TECO is started with a RUN or R command.
.skip 2
.test page 4
H.14 TECO.TEC SUPPORT
.skip 1
If the version of CCL you are using to invoke TECO supports TECO.TEC, then
it will chain to TECO with a 0 at location 17600 and will pass TECO the
invokig CCL command (beginning at location 17601).  If TECO is invoked in
this manner, it will parse this CCL command by executing the TECO command
line parser macro stored in SYS:TECO.TEC.  This macro can be modified
by the user to parse switches or do any special processing that is desired.
TECO.TEC is started up via the command
.skip
.center
@I_^@ccl command_^@:ER/SYS:TECO.TEC/"F_^ACan't find SYS:TECO.TEC
.break
.center
_^A_^C_^CA.,ZXV.,ZKMV.,.XV``
.skip
which puts your CCL command in the text buffer and then loads (the first
page of) TECO.TEC into Q-register V.  TECO.TEC is then executed with the
MV command and then Q-register V is cleared.  It is the responsibility of
TECO.TEC to parse the command line in the text buffer and do the appropriate
processing and clean-up.  It is also the responsibility of TECO.TEC to
execute a user's start-up file (TECO.INI) if one is present.
Note that TECO.TEC
is not invoked if TECO is started via a RUN or R command.
Also note, that the CCL command may not contain any embedded nulls.
.skip 2
.test page 4
H.15 OVERLAYS
.skip 1
The key to writing fast TECO programs lies in understanding TECO-8's overlay
structure.  If TECO-8 is run in 16K or more (20K or more if VT support is
present), then the overlays will be memory-resident rather than disk-resident.
Although this is much faster than swapping from the disk, swapping from memory
still involves some overhead,
so it would be wise to structure your TECO program
to minimize the number of swaps necessary.
.skip 1
The overlay structure is designed so that the minimal number of swaps
will be required unless obscure TECO features are used.  There are five
overlays to TECO:
.ls
.le;The I/O-overlay.  This overlay handles file opening and is initially
resident.  Thus no swapping is necessary to do an initial ER, EW, or EB.
.le;The Q-overlay.  This overlay contains most of the frequently used
conditional commands and branching commands.  It is intended that this overlay
swap in once and remain in memory until TECO is exited.
.le;The X-overlay.  This is the exit overlay and handles commands needed only
when TECO is exiting, such as EX, EF, EC, and EG.  It is intended that this
overlay will swap in only once when you are ready to leave TECO.
.le;The F-overlay.  This overlay contains the flag commands and other
little-used commands.  It is intended that this overlay be not used at all,
or if it is used, it will be used so infrequently that it will not slow down
system performance.
.le;The E-overlay.  This is the error overlay.  It is swapped in only when
an error occurs.  It is intended that this overlay never be swapped in.
.els
.skip 1
To write efficient TECO code, the user must know exactly which commands
are handled by which overlay.  This information is summarized below.
.skip
.lm 20
.ts 20
.indent -15
Overlay	Commands
.skip
.indent -15
I-overlay	ERfile`, EWfile`, EBfile`, :ERfile`, :EBfile`
.skip
.indent -15
Q-overlay	Otag`, n"Xthen|else', n;, search;, n_<..._>, _<..._>
.skip
.indent -15
X-overlay	EC, EG`, EGcmd`, EF, EK, EX,
.break
*q, ?, nEJ, n_^__, V, _^B, _^E, _^F, _^L, _^N, _^Uqtext`
.skip
.indent -15
F-overlay	ED, EH, EO, ES, ET, EU, _^D, _^O,
.break
_\, n_\, n=, n==, n:=, n:==, |
.skip
.lm 5
Several things are immediately obvious.  The command 0TT should always
be preferred to the V command.  ELSE clauses should be avoided.  (In future
releases, we will try to move the processing of the | command into overlay Q.)
The commands _\ and = should be used as infrequently as possible from within
long-running macros.  Xq is preferred to _^Uq to load up a Q-register.
-n-1 is preferred to n_^__ to take a one's complement.  Radix changes
should be avoided.  Flags, such as ET and ED, should be set once at the
beginning of a macro, and then not fiddled with if at all possible.
.skip 2
.test page 4
H.16 INSTALLATION INSTRUCTIONS
.skip 1
The source of TECO consists of the following modules:
.skip
TECO.MAC	Main module
.break
TECINI.MAC	Initialization module
.break
TECTBL.MAC	Tables
.break
TECDEF.MAC	Global definitions
.BREAK
TECO12.MAC	VR12 support
.break
TECOVT.MAC	VT support
.break
TECOVI.MAC	I/O-overlay
.break
TECOVQ.MAC	Q-overlay
.BREAK
TECOVX.MAC	X-overlay
.break
TECOVF.MAC	F-overlay
.break
TECERR.MAC	E-overlay and error processor
.break
TECSRH.MAC	Search processor
.break
TECNUM.MAC	Arithmetic processor
.skip
Each of these modules should be assembled (using MACREL V2 or later).
This can be accomplished via the command
.skip
.center
_.MAC TEC???.MAC
.skip
if your monitor supports wildcards in compile-class commands.
.skip 1
The resulting relocatable modules are then linked together (using LINK V2
or later) to produce the executable TECO.SV image which should be put
on SYS: (but it may reside on any device).  If your monitor supports TECO.TEC,
then TECO.TEC must be placed on SYS:.
.skip 2
.test page 4
H.17 ARITHMETIC PRECISION
.skip 1
TECO-8 performs 13-bit arithmetic except that multiplication and division
by negative numbers gives unpredictable results.
All numbers stored in Q-registers are 13 bits long.
Numbers stored in flags (such as ET, EU, etc.) are only 12-bits
long.  When storing a number into a flag, the high order (sign bit) is lost.
When using the value of a flag in an arithmetic expression, the 12-bit value
is sign extended first.
.skip 2
.test page 4
H.18 ALTERNATE STARTING ADDRESS
.skip 1
The normal starting address of TECO is location 00200.  In this (normal) mode,
TECO will simulate tabs by spaces on type out and will simulate vertical
tabs and form feeds by line feeds.  If your terminal has hardware tabs and
vertical tabs (such as a KSR-35),
then TECO can take advantage of these features.
To enable this ability, you should change TECO's starting address to be 05200.
This can be done by the monitor commands:
.skip
.lm 15
_.GET SYS:TECO
.break
_.SAVE SYS:TECO;5200
.lm 5
.skip
.test page 4
H.19 VT05 SUPPORT
.skip 1
TECO will automatically handle command string scope editing
correctly on a VT05.
The VT support (obtained via use of the -1W command) will handle VT05's
correctly.  The VTEDIT macro does not currently support the VT05 keypad.

.page
.subtitle #####Appendix I
.index ^^OI####APPENDIX I       TOPS-10 OPERATING CHARACTERISTICS
.center
APPENDIX I
.skip 2
.center
TOPS-10 OPERATING CHARACTERISTICS
.skip 2
.left margin 5
.test page 4
I.1 STARTUP
.skip 1
TECO is started with the
.s 1;.i 10
_.R TECO
.s 1
command.  TECO is now immediately ready to accept commands.  
The text buffer and Q-register areas are empty. Initial commands may also
be specifified by following the monitor command with a dollar sign ($)
and then some TECO commands.  For example,
.s 1
_.R TECO $3EH
.s 1
starts TECO with the help level flag set to 3.
.skip 1
The TECO command
.s 1;.i 10
_.TECO filespec
.s 1
is used to edit an already existing file. It is equivalent to
.s 1;.i 10
_.R TECO
.i 10
*EBfilespec`Y``
.skip
TOPS-10 "remembers" the filespec as the name of the last file that has been
edited.
.skip 1
The MAKE command
.skip 1
.i 10
_.MAKE filespec
.skip 1
is used to create a new file.
It is equivalent to
.skip 1
.indent 10
_.R TECO
.indent 10
*EWfilespec``
.skip
TOPS-10 "remembers" the filespec as the name of the last file that was
edited.
.skip 1
The command
.skip 1
.i 10
_.MAKE filespec1=filespec2
.skip 1
is used to edit filespec2 into filespec1.  That is, filespec2
is opened as the input file, and filespec1 is created as the
output file.  It is equivalent to
.skip
.indent 10
_.R TECO
.indent 10
*ERfilespec2`EWfilespec1`Y``
.skip
TOPS-10 "remembers" the filespec1 as the name of the
last file that was edited.
.skip 1
The command
.skip
.i 10
_.TECO
.skip 1
with no arguments, causes CCL to execute the command
.skip 1
.i 10
_.TECO filespec
.skip 1
where filespec was the file that was previously remembered
as the last file to be edited.  The system purposely does
not remember filenames from one editing session to the next,
that is, when you log out, the system "forgets" the name of the
file you were editing.
.skip 1
TECO-10 does not require the use of the MUNG command to execute
TECO macros because runnable TECO programs can be created via use of the
EE command and these can then be run with the standard R or RUN command.
This TECO command has the format
.skip 1
.i 10
EEfilespec`
.skip 1
which saves away the current image of TECO in the filename specified.
The default extension is .EXE.
When the file is subsequently run (using the R or RUN monitor command),
TECO resumes execution with the TECO command
immediately following the EE command.
.s 2
.test page 4
I.2 STARTUP CONDITIONS
.skip 1
The initial value of the EU flag is 0 if you are running on a terminal
that does not support lower case,
and is -1 if you are running on a terminal that does support lower case.
.skip 1
The initial value of the ET flag is as follows:
.break
.ts25
.skip 1
#####Bit value	Initial value
.skip 1
.lm15
1	0
.break
2	0 (1 if terminal is a scope)
.break
4	1
.break
8	0
.break
16	0
.break
32	0
.break
64	0
.break
128	1 (TECO's prompt sets this to 0)
.break
256	0
.break
512	0 (1 if VT support is present)
.break
1024	0
.break
2048	0
.lm5
.skip 1
The initial value of the ED flag is 1.
.s 2
.test page 4
I.3 FILE SPECIFICATION
.skip 1
The file access commands ER, EB, and EW accept a file
specification in the standard TOPS-10 format:
.s 1;.i 10
dev:filename.type[p,pn]
.s 1
in which dev: is a physical device name or a user assigned logical
name; if dev: is not specified, the default DSK: is assumed.
The filename field must be specified in the commands ER, EB, and
EW and be a legal TOPS-10 filename.  The type field is a file
extension and must be explicitly given the first time.
Thereafter, if a corresponding command is given with no extension specified,
the system uses the previously specified extension as the default.
The same defaulting rules hold for the dev: field.
The <prot> construct is permitted on any output filespecification
to allow setting the protection of the file being created.
.s 2
.test page 4
I.4 BACKUP FILES
.skip 1
The EB command maintains one level of file backup on TOPS-10.
The pre-edited input file name is changed to
.s 1
.i 10
filename.BAK
.s 1
before the new output file is closed with the original name.
Only normal file closing commands (EC, EF, EG, and EX)
cause this renaming to happen.  If TECO is aborted or
the output file is purged by the EK command, the input filename
remains unchanged.  Note only one .BAK file for
a given name is kept; earlier .BAK backup files are deleted each
time a new backup file is created.
.skip 1
A good policy to follow when editing is to close the edited 
file frequently enough so that an unexpected incident would not cause
a substantial loss of work.  Files should be backed up regularly.
TECO has the power to let an unsuspecting user alter
a good file into a completely useless state.  The FILCOM 
program can be used to verify an editing session.
.s 2
.test page 4
I.5 EXIT AND GO
.skip 1
If TECO is exited via the EG` command, then TOPS-10 will re-execute the last
explicit compile-class command that was executed during that session.
.s 2
.test page 4
I.6 <CTRL/C>
.skip 1
The action taken when the user types <CTRL/C> depends
on what TECO is doing. At command level <CTRL/C> is an immediate action
command.  If typed as the very first character in a command string
(not necessarily the first keystroke) it aborts TECO and returns
to the monitor.
No Control-C trapping is available under TOPS-10.  The ?XAB error message
is not supported.
If <CTRL/C> is typed in the middle of entering a command string,
then TECO returns control to the monitor.
Note that if TECO executes <CTRL/C> as a command from command level,
TECO is aborted.
If TECO executes a <CTRL/C> command from within a macro, TECO
is also aborted.
If two consecutive <CTRL/C>s are typed while TECO is running, or while TECO is
typing on the terminal, or while an error message is printing, then
control returns to the operating system.
If one <CTRL/C> is typed to TECO while it is waiting for input, then
control returns to the operating system.
.skip 2
.test page 4
I.7 EXCEPTIONS
.skip 1
TECO-10 does not support the following commands which are described
in this manual:
.ls
.le;Secondary streams (EP, EA, ER`, EW`)
.le;Wildcards (EN)
.le;Immediate aids LF and BS.
.els
The following incompatibilities exist between TECO-10 and DEC's TOPS-10 TECO
V24:
.ls
.le;The nA command under TOPS-10 TECO V24 always returned the value of the
current character, regardless of the value of n.  In TECO-10, 0A gives the
value of the current character.
.els
.skip 2
.test page 4
I.8 USER INITIALIZATION
.skip 1
If a user has a file called TECO.INI in his area,
then when TECO starts up (via a 
CCL command), it
will execute the contents of this file (as a TECO macro).  This file must
contain a valid TECO program.
TECO.INI will be executed before TECO opens any
files.  That is, if TECO was invoked via a MAKE command, TECO.INI will be
executed before the EW command (for the MAKE) is executed.
.skip 2
.test page 4
I.9 INSTALLATION INSTRUCTIONS
.skip 1
To create TECO for TOPS-10 from the sources, issue the following commands:
.s 1
_.LOAD/MAC/COMPILE TECO10.T10+TECO10.MAC
.BR
_.SAVE TECO10
.BR
_.LOAD/MAC/COMPILE TECERR.T10+TECO10.MAC
.BR
_.SAVE TECERR
.SKIP
To create TECO for TOPS-20 from the sources, issue the following commands:
.S 1
@LOAD/MAC/COMPILE TECO10
.BR
@SAVE TECO20
.SKIP
This builds a raw TECO.  This version of TECO does not contain any window
support since the W and :W commands are implemented as macros.  To load window
support, issue the following commands:
.S 1
_.RUN TECO10 (or TECO20)
.BREAK
*EITECO10.TEC``
.BREAK
*EETECO``
.S 1
You now have a runnable TECO image with window support.
.skip
.test page 4
I.10 TMPCOR SUPPORT
.skip 1
The EQ and E% commands support the pseudo-device TMP: for TMPCOR.
Only the first three letters of the file name will be used, to try and
access a TMPCOR file.  If that fails, it will try nnnNAM.TMP where nnn
is your job number and NAM is the three-character name.
For example: for job 23, EQqTMP:FOOBAR` will read TMPCOR file FOO or
023FOO.TMP.
.skip
.test page 4
I.11 Q-REGISTER NAMES
.skip 1
Any printable character (except open parenthesis)
is valid as a Q-register name.
A Q-register whose name is a lower case alphabetic character is the same as
the Q-register whose name consists of the corresponding upper case
letter.  Thus Qa and QA are equivalent commands.  Q-register names may also
be up to 6 characters long, by enclosing the name in parentheses,
for example, Q(FOOBAR).  Q-register names may contain any printable
characters, however all characters other than letters, digits, dollar-sign,
space, and underline are reserved for special use by TECO.  A Q-register name
consisting entirely of zero or more spaces is the same as Q-register (),
which is special and discussed below.  Trailing spaces in Q-register names are
discarded, and lower case is converted to upper case.
.skip
.test page 4
I.12 REFERENCING THE TEXT BUFFER AS A Q-REGISTER
.skip 1
The Q-register with the null name: () is the text buffer.
The numeric part of this
Q-register is the value of dot.  The sequence [A ]() causes Q-register A
to share with the text buffer.  The old main text buffer is lost (unless it is
also sharing with some Q-register or if it has been saved on the Q-register
push-down list).
The text in Q-register A becomes the text buffer and the numeric
part of Q-register A is used for "." if it is in range,
otherwise dot is set to 0.
.skip
.test page 4
I.13 SHARING OF Q-REGISTER POINTERS
.skip 1
Q-registers may share their text with each other and with the text buffer as
a result of [ and ] commands.
When a Q-register is pushed onto the Q-register pushdown list,
all that is pushed is the numeric part of the Q-register and
a pointer to the text
part of the Q-register.
Thus a command such as [A ]B would cause Q-registers A and B
to share the same text.
The commands X, _^U, and EQ could be applied to either
Q-register without modifying the other,
since the Q-register is unbound from its
previous text first.
However, the colon-modified forms of X and _^U append to the
existing text,
so a :X or :_^U command for either of them would affect the other.
.skip
.test page 4
I.14 EDITING LINE SEQUENCE NUMBERED FILES
.S 1
Some ASCII files have a special type of line number
at the beginning of each line.
These "line-sequence numbers" conform to certain rules so that they may
be ignored or treated specially by compilers and other programs.
The standards
for line-sequence numbers are given in the LINED Program Reference Manual.
.skip
TECO does not need line-sequence numbers for operation, but TECO can be used
to edit files containing them.  If such a file is edited with TECO-10, the
line-sequence numbers are, in the normal case, simply preserved as
additional text at the beginning of each line.  The line-sequence numbers may
be deleted, edited, and inserted exactly like any other text.  On output, the
line-sequence numbers are output according to the standard, except that
the tab after the number is output only if it is already there.  Leading zeros
are added as necessary.
If a line without a line-sequence number is encountered,
a line-sequence number word of five spaces is placed
at the beginning of the line.
.skip
The following switches are available for use with
line-sequence numebred files.
These switches are merely added to the appropriate file selection command.
.skip
ERfilespec/SUPLSN`
.BR
EBfilespec/SUPLSN`
.skip
causes line sequence numbers to be suppressed at input time.
The numbers will not be read
into the editing buffer.  Also, the tabs following the line-sequence numbers,
if they exist, will be suppressed.
.skip
EWfilespec/SUPLSN`
.skip
causes the line-sequence numbers to be suppressed at output time.
Tabs following
the line-sequence numbers will also be suppressed if they exist.
.skip
EWfilespec/GENLSN`
.BR
EBfilespec/GENLSN`
.skip
causes line sequence numbers to be generated for the output file if they did
not already exist in the input file.
Generated line-sequence numbers begin at 00010 and continue
with increments of 10 for
each line.
.skip
Note that these switches are needed only if a change
is to be made in the format of the
file being edited.
If no switches are specified, a file is output in the same
form as it was input.
.skip
.test page 4
I.15 COMPILER RESTRICTIONS
.skip
TECO-10 is a compiler rather than an interpreter.  This means, that before
your command string is executed, TECO-10 compiles it into assembly language
code.  This makes it must faster than most other TECOs.  Before executing a
macro (with the Mq command) TECO compiles the program in the macro.  The
next time the macro is executed,
TECO notes that the macro has already been compiled
and merely branches to the compiled code.  If the contents of the Q-register
are changed (via an X or ^U command), then TECO notes that it must re-compile
the commands should the Q-register be invoked as a macro.
.skip
One consequence of this is that if a syntax error is detected in a command,
no portion of that command will have been executed.  For example,
typing the command HK= will yield the ?NAE error message and the text
buffer will NOT be cleared.  Another consequence of this is that you must
not invoke a macro two different times
using two different numbers of arguments.
If a macro gets initially invoked with two arguments, then all subsequent
invocations must supply two arguments.  Also, TECO cannot tell while compiling
an Mq command whether or not the macro returns a value.  Therefore it assumes
that a value is always returned.
This value can be explicitly removed by followed
the Mq command with an <ESCAPE>.  The MqA command will compile the A command
as if it were an nA command rather than an APPEND.
.lm5

.page
.subtitle #####Appendix J
.index ^^OJ####APPENDIX J       BASIC-PLUS/BASIC-PLUS-2 HANDLING
.center
APPENDIX J
.skip 2
.center
BASIC-PLUS/BASIC-PLUS-2 HANDLING
.skip 2
.left margin 5
.test page 4
J.1 PURPOSE
.skip
In BASIC-PLUS and BASIC-PLUS-2 a program statement may be continued
over more than one text line.
A text line which is not the last text line of a given statement
may need to be flagged as a "continued" line.
(See the appropriate language reference manual for
requirements of each version of each language processor.)
.s
The standard continuation flag is the _& character.
A line which must be marked as "continued" is written
with an _& as the last non-whitespace character before
the _<CR_>_<LF_>.
.skip
(An older form of continuation was, in BASIC-PLUS only,
to end the text line by typing a _<LF_> key instead of _<CR_>.)
.skip
The switches described in this appendix cause TECO to
manipulate the text files in such a way that each text line
appears in the editing buffer to be completely "conventional":
that is, each text line ends with a standard _<CR_>_<LF_>,
and no text line has a trailing _& character.
You can correctly edit well-formed BASIC-PLUS or BASIC-PLUS-2
source files without having to be concerned about
continuation conventions.
.skip 2
J.2 METHOD
.skip
TECO allows you to work with "unemcumbered" lines in the
editing buffer by removing continuation conventions as each
text line is read in.
You indicate that you want this processing by specifying
a switch on the file specification supplied to the ER
(or the EB) command.
.skip
TECO (again) adds appropriate continuation conventions to each
text line as it is written out from the editing buffer.
You indicate that you want this processing by specifying
a switch on the file specification supplied to the EW
(or the EB) command.
.skip 2
J.3 INPUT PROCESSING
.skip
As TECO reads each new text line into the editing buffer,
it is examined for a trailing _& character.
If one is found, TECO removes it, and then additionally
removes any trailing spaces and/or tabs.
.skip
(In the case of _<LF_> continuation, TECO converts
that kind of line terminator character sequence to _<CR_>_<LF_>.)
.skip
The available switches follow.
(Consult the appropriate appendix to see which switches
are supported on your operating system.)
.skip
.nofill
       /B2    TECO strips trailing _& sequences

       /n     Same as /B2 for input processing

       /B+    TECO changes _<LF_>_<CR_>_<NUL_>
              sequences to _<CR_>_<LF_>.
.fill

.skip 2
J.4 OUTPUT PROCESSING
.skip
As TECO writes each text line from the editing buffer,
it takes a look at the text line which will follow.
If the following line begins with a digit,
the current line is written without change.
If the following line does not begin with a digit,
TECO assumes that the current line must be continued.
.skip
The convention applied to an output text line which
TECO marks as "continued" depends on the form of the
switch you specify.
(Consult the appropriate appendix to see which switches
are supported on your operating system.)
.skip
.nofill
       /B2    TECO appends a space and an _&

       /n     TECO appends an _&, after padding out
              the line with tabs and/or spaces to make
              the _& appear in column n

       /B+    TECO ends the line with a
              _<LF_>_<CR_>_<NUL_> sequence
              (instead of _<CR_>_<LF_>.)
.fill

.skip 2
J.5 FORM FEED INTERACTION
.skip
When TECO reads a page of text into the editing buffer,
it stops when a _<form feed_> character is encountered,
or when the buffer has been filled to capacity.
In the latter case, the last line will be complete,
and will include its line delimiter.
However, no look-ahead is done to examine the next line in the file.
.skip
If TECO is being used with one of the switches described in this appendix,
a very long BASIC-PLUS-x source program which is not segmented with <FF>
characters can cause the last line in the buffer to not be the last
text line of a multi-line source statement.
.skip
When the buffer is written to the output file,
TECO has no way of determining whether the next text line
(the first line of the next buffer load)
will begin with a line number.
TECO makes the assumption that the buffer's last text line
is not to be "continued", and terminates it with _<CR_>_<LF_>.
If this assumption is incorrect (frequently the case),
remaining text lines of that multi-line statement will be
lost when the program is subsequently OLDed.
.skip
To avoid this problem, lengthy BASIC-PLUS or BASIC-PLUS-2
programs should be segmented with _<form feed_> characters
before editing them using these TECO switches.
Segments of approximately 150 to 200 lines are convenient.
Starting a new page even more frequently to make listings
readable isn't a bad idea, either.
.lm5

.page
.subtitle #####Glossary
.index ^^OY####GLOSSARY
.center
GLOSSARY OF OBSCURE TECO TERMS
.skip 2
.left margin 20
.ts 20
.test page 3
.i -15
Accent grave
.break
The ` character.
Echoed for TECO's text and command string delimiter
when an ESCape surrogate is in effect.
Actually set as the ESCape surrogate by the 8192 ET bit.
.skip
.test page 3
.i -15
Abort-on-error bit
.break
The 128's bit of the ET flag.  If this bit is set, then TECO will
abort execution on encountering an error (after printing the error
message) and control returns to the operating system.
This bit is initially set when TECO starts up, but is reset whenever
TECO issues its prompt.
.skip
.test page 3
.i -15
_<ALTMODE_>	One of several characters that TECO treats specially for use as a
delimiter.  Known as ESCAPE in more recent times, but traditional TECO
users will still go on ending their command strings with "ALT" "ALT".
.skip
.test page 3
.i -15
Anchored search
.break
A search (S) or search and replace (FS) command that is preceded by a ::.
This indicates that the search must match the characters immediately
following the current pointer position.  If these characters do not
match, no further searching is performed and the text buffer pointer
does not move.
.skip
.test page 3
.i -15
Argument pair	A command of the form m,n where m and n are numbers
(or TECO commands that return numbers).  When used before a command that
normally acts on lines, the argument pair causes the command to work on
characters.  The characters specified by this argument pair is the set of
characters between pointer positions m and n.  The number m should normally
be less than or equal to n.
.skip
.test page 3
.i -15
ASCII code	The American Standard Code for Information Interchange.
The code used by TECO to represent characters internally.  Consult Appendix A
for details.
.skip
.test page 3
.i -15
@-sign modified command
.break
A command that is preceded by an @-sign modifier.
.skip
.test page 3
.i -15
@-sign modifier
.break
An at-sign (@) that proceeds a command.  It indicates to TECO that the
string argument to the command is to delimited on both sides by
a user-supplied delimiter rather than to be delimited only at the
end by a TECO-designated delimiter (normally _<ESCAPE_>).
.skip
.test page 3
.i -15
Automatic refresh
.break
A refresh of the buffer display done when scrolling is active
(when 7:W is non-zero) just before TECO issues its asterisk prompt.
Automatic refresh can be disabled by the 128 ED bit.
.skip
.test page 3
.i -15
Automatic type out
.break
The feature of TECO that causes lines of text to be automatically typed out.
The ES flag may be used to control the automatic type out of lines after
search commands, and the EV flag may be used to cause automatic type out
of lines after command execution.
.skip
.test page 3
.i -15
Auto-trace mode
.break
A mode that TECO goes into when the 4's bit of the EH (Help-level) flag
is set.  In this mode, TECO will automatically print out the erroneous
command string after an error occurs.
.skip
.test page 3
.i -15
Backup protection
.break
The process of preserving the user's original file (as a backup) when
editing that file with the EB (Edit with Backup) command.
.skip
.test page 3
.i -15
Backwards searches
.break
A search that proceeds in the backwards direction.  If the string being
looked for does not occur at the current pointer position, the pointer
position is moved back one character and the search is tried again.
This continues until the string is found or until the boundary of
the search has been reached or until the beginning of the current
text buffer has been reached.  Backward searches are initiated by using
a negative argument to a search command or by using an argument pair
m,n with m greater than n to an FB or FC command.
.skip
.test page 3
.i -15
Bounded searches
.break
A search command that requires searching only a portion of the
text buffer.  Of particular importance is the case where you only want
to search the current line for a given string.  Bounded searches are
accomplished using the FB command.
.skip
.test page 3
.i -15
Case flagging	A mode of TECO wherein, on type out,
it will flag alphabetic characters (in either
upper or lower case) by preceding them with a single quote.  Lower
case flagging is particularly useful on terminals that do not display
lower case.  Case flagging is controlled by EU, the case flag.  Setting
EU to 0 sets lower case flagging mode; setting EU to 1 sets upper case
flagging mode, and setting EU to -1 removes all case flagging.
.skip
.test page 3
.i -15
Character-oriented editor
.break
An editor that allows modification of single characters, so that if just
one character of a line is wrong, the entire line does not have to be
retyped.  TECO is a character-oriented editor
(although it has a number of facilities for dealing with text lines, too).
.skip
.test page 3
.i -15
Colon-modified command
.break
A command that is preceded by a colon (:) modifier.
.skip
.test page 3
.i -15
Colon-modifier
.break
A colon preceding a TECO command, used to indicate that the action of the
command is to change.  Frequently indicates that the command is to return
a value (-1 if the command succeeded, 0 if the command failed).
.skip
.test page 3
.i -15
Command line	The current line of the command string that is
being typed into TECO.
.skip
.test page 3
.i -15
Command string scope editing
.break
The feature of TECO that is enabled when editing is performed on a CRT
terminal.  In this mode, typing the immediate action _<DELETE_> command
causes the character deleted from the command string to physically
disappear from the screen.  Other commands, such as _<CTRL/U_> also behave
differently, taking best advantage of the properties of a video terminal.
.skip
.test page 3
.i -15
Command string
.break
The string of TECO commands that is currently being typed into TECO, or
is currently being executed by TECO.
.skip
.test page 3
.i -15
Comment	An informative message used within a TECO program, to make the
code more readable.  The comment explains the meaning and purpose of
the associated TECO commands.  The comment is enclosed in exclamation
marks.
.skip
.test page 3
.i -15
Compile-class command
.break
A set of operating systems commands (such as COMPILE) that causes
compilation (translation) of a source file written in a computer
language into machine instructions.  The EG` command is useful to finish
an editing session and re-execute the last compile-class command
(normally a command that compiles the file that was just edited).
.skip
.test page 3
.i -15
Conditional	A TECO language construct used to specify code
to be conditionally
executed depending upon the results of some test.  The most general form
of the TECO conditional is
.i +10
n"X _<then-clause_> | _<else-clause_> '
.br
which tests the number n using condition X (See section 5.13 for details).
The commands specified by the _<then-clause_> are executed if the condition
succeeds,
otherwise the commands specified by the _<else-clause_> are executed.
.skip
.test page 3
.i -15
Control-character
.break
An ASCII character whose octal code is in the range 0-37.  Usually denoted
in this manual by _<CTRL/X_> where X is the character whose ASCII code is
100 (octal) greater than the ASCII code
for the control character being represented.
TECO displays such a character as _^X (Caret-X) except for _<TAB_>, _<LF_>,
_<VT_>, _<FF_>, AND _<CR_> which have their normal display,
and _<ESC_> which is displayed as $ (dollar sign)
or, if a user-designated ESCAPE surrogate is in effect, as ` (accent grave).
Anytime a single control-character, _<CTRL/X_>
is a valid TECO command, the two-character sequence, _^X, may be used instead.
.skip
.test page 3
.i -15
_<CTRL/C_> trapping
.break
A mode of operation wherein a TECO macro will regain control (rather than
TECO) when _<CTRL/C_> or _<CTRL/C_>_<CTRL/C_> is typed on the
user's terminal to abort execution of the current command string.
_<CTRL/C_> trapping is enabled by setting the high-order bit of the
ET flag.
.skip
.test page 3
.i -15
Current character
.break
The character immediately following the current text buffer pointer
position.
.skip
.test page 3
.i -15
Cursor	A visible pattern on a CRT terminal (usually blinking) that
would specify to a true scope editor (like VTEDIT) the current location
of the text buffer pointer, or which would specify the location
where subsequently typed characters would be displayed.

.skip
.test page 3
.i -15
_<DELIM_>	Terminology in this manual for an ESCape typed
at the console and passed to TECO.
On newer terminals, there may be no ESCape key.
Some versions of TECO provide for an "ESCape surrogate",
a user-designated key which is to cause transmission of
an ESCape to TECO.
The term _<DELIM_> is used to indicate an ESCape transmitted to TECO
whether it was generated by the designated "surrogate" key
or by a "real" ESCape key.
An ESCape types out as ` when a surrogate is active,
but as $ when no surrogate is active.
.skip
.test page 3
.i -15
Destructive search
.break
A form of global search in which pages of text that are passed over (because
they did not contain the string being searched for) are discarded rather
than written to the output file.  Destructive searches are initiated in TECO
via use of the __ command.
.skip
.test page 3
.i -15
Display editor
.break
A true display editor is on which makes efficent use of a CRT terminal
or display scope.  Such an editor maintains a "window" into the text
being edited.  As characters are typed on the terminal, these characters
immediately are entered into the text buffer and
the window is immediately updated
to reflect this change.  With the help of some macro support, TECO can be
made to be a true display editor.
A more modest use of a CRT terminal (and which requires no macro
support) is scrolling, q.v.
.skip
.test page 3
.i -15
Dot	A mnemonic for "the current text buffer pointer position".
Stems from the fact that the . (dot, or period) TECO command returns this
number as its value.
.skip
.test page 3
.i -15
E command	One of several two-character TECO commands that start
with the letter 'E'.
.skip
.test page 3
.i -15
Echo mode	A normal mode of operation in which TECO will automatically
echo (display) each character that is typed in response to a _^T command.
Opposite of no-echo mode.  This mode is controlled by the 8's bit of the
ET flag. (0 means no-echo mode.)
.skip
.test page 3
.i -15
ED flag	The edit level flag.
.skip
.test page 3
.i -15
Edit-class command
.break
A type of operating system command (such as MAKE and TECO) that specifies
that file editing is to occur.  Many operating systems remember the argument
specified with the last Edit-class command,
so that the next time an edit-class
command is used without an argument, the previous argument can be recalled.
.skip
.test page 3
.i -15
Edit level flag
.break
A bit-encoded flag, referenced by the ED command, that describes
how TECO should behave with reference to certain features.  See section 5.16
for more details.
.skip
.test page 3
.i -15
Edit verify flag
.break
A flag that describes how TECO should act
after processing of a command string.
This flag can be set so that TECO will display the line just edited on the
terminal after each command.  See section 5.16 for more details.
.skip
.test page 3
.i -15
EH flag	The help level flag.
.skip
.test page 3
.i -15
Either-case search mode
.break
A standard mode of operation in which alphabetic characters
specified within a search string are permitted to match
a corresponding character of either upper or lower
case.
.skip
.test page 3
.i -15
Else-clause	The part of a conditional command that is executed if the
condition is not satisfied.  In TECO, these are the commands that occur
between the | and the ' characters within the conditional construct.
.skip
.test page 3
.i -15
End-of-file flag
.break
A read-only flag, referenced by the _^N command that specifies whether or not
end-of-file has been seen on the currently selected input stream.
A value of 0 means that end-of-file has not been seen; a value of -1
means that end-of-file has been reached.  This flag is initially 0 and
is reset to 0 each time a new file is selected for input.
.skip
.i -15
EO level	The current version level of TECO-10.
.skip
.i -15
ES flag	The search verification flag.
.skip
.test page 3
.i -15
_<ESCAPE_>	The character whose ASCII code is 33 (octal).
It is a general-purpose
delimiter used by TECO.  Traditionally known as an _<ALTMODE_>.
When no ESCape surrogate is active, an ESCape types out as $
(dollar sign).
See also _<DELIM_>.
.skip
.test page 3
.i -15
ESCape surrogate
.break
A character (designated via the 8192 ET bit, or via the EE flag)
which causes an ESCape to be transmitted to TECO.
When an ESCape surrogate is active, an ESCape types out as `
(accent grave).
See also _<DELIM_>.
.skip
.i -15
ET flag	The terminal characteristics flag
.skip
.i -15
EU flag	The upper/lower case flag.
.skip
.i -15
EV flag	The edit verify flag.
.skip
.test page 3
.i -15
Exact-case search mode
.break
A mode of operation in which alphabetic characters within a search string
must match the exact case (upper case or lower case) of characters specified.
.skip
.test page 3
.i -15
Exit Protection
.break
A protective feature of TECO that prevents a user from exiting TECO
if a potential los of data is imminent.  The EX and EG commands are
aborted (with the ?NFO error message)
if there is text in the text buffer, but no output file is open.
.skip
.test page 3
.i -15
F command	One of several two-character TECO commands that start
with the letter 'F'.
.skip
.test page 3
.i -15
Flag	A data register used by TECO to control various modes of
operation.  The contents of the flag are set by specifying the new value
before the flag name; and the contents are returned by using the flag
name without a numeric argument.  The TECO flags are: _^X, _^E, _^N,
ED, EE, EH, EO, ES, ET, EU, and EV.
.skip
.test page 3
.i -15
Flow command	A TECO-11 command that is used to flow (branch) to a
particular flow control character.
The flow commands are F_<, F_>, F', and F|.
.skip
.test page 3
.i -15
Form feed flag
.break
A read-only flag, referenced by the _^E command that specifies whether
the previous append from the input file terminated because of encountering
a form feed character in the input file, or because the text buffer became
nearly full.  The value of this flag is automatically set to -1 by TECO
if input is terminated by the presence of a form feed character in the
input file.

.skip
.test page 3
.i -15
Garbage collection
.break
A process used by TECO-10 to collect unused memory when
more memory is required.
.skip
.test page 3
.i -15
Global Q-register
.break
A Q-register available throughout all macro levels
(including "outside", or at prompt level).
Global Q-registers are named A-Z and 0-9.
See also Local Q-Registers, and section 3.3.2.
.skip
.test page 3
.i -15
Global search	A type of search that continues through the
entire input file until the
specified characters are found.  Successive pages of the file are read
into the text buffer and then written out into the output file (if the
string is not located).  Global searches in TECO are initiated via the N
command.
.skip
.test page 3
.i -15
Hard-copy editing mode
.break
A mode of operation that TECO uses when the user's terminal is not
a CRT.  In this mode, when a character is rubbed out using the _<DELETE_>
key, the rubbed-out character is re-typed on the terminal as a visible
indication that this character was rubbed out.  Opposite of scope editing
mode.  This mode can be entered, even on a scope terminal, by turning off
the 2's bit of the ET flag.
.skip
.test page 3
.i -15
Help level flag
.break
A bit-encoded flag, referenced by the EH command, that controls properties
of TECO having to do with error messages and user assistance.
.skip
.test page 3
.i -15
Immediate command
.break
A special command to TECO that takes immediate effect, requiring no
_<DELIM_>s to begin its execution.
.skip
"Immediate action editing characters" are commands such as _<DELETE_>
and _<CTRL/U_>, which perform editing of the TECO command string
currently being typed in.
See section 4.1.
.skip
An "immediate inspection command" is a single-character command
which can be typed as the very first character after TECO's
prompting asterisk, and which causes the current location counter
to be moved by one line and the new current line to be typed out.
Examples are _<LF_> and _<BS_>.
See section 1.6.1.
.skip
"Immediate action commands" are other commands which may be typed
right after TECO's prompting asterisk, such as the *q to save the
previously-typed command in a Q-register or the _^W to re-display
a scrolling buffer window.
See section 4.2.
.skip
"Immediate ESCape sequence" commands are invoked by keys which
generate escape sequences, such as "arrow" or "auxiliary keypad" keys.
See section 4.4.
Such commands are usually used to
perform editing of the TECO command string currently being entered
into TECO.  For example, the commands _<DELETE_> and _<CTRL/U_> are
immediate action commands.
.skip
.test page 3
.i -15
Iteration	A language construct that permits a sequence of operations
to be re-executed indefinitely or a given number of times.
In TECO, this is accomplished by enclosing the commands in angle brackets.
.skip
.test page 3
.i -15
Kernel	The TECO-11 kernel refers to the TECO-11 module that implements
all those features of TECO-11 that are common to all PDP-11 operating
systems.  Operating system specific features and the interface to the
operating system is accomplished by linking an I/O module tailored
for the desired operating system with the kernel.
.skip
.test page 3
.i -15
Keypad editor	A true scope editor that uses special keys
on the terminal (such as a VT52 or VT100) to control editing functions.
VTEDIT is an example of a keypad editor.

.skip
.test page 3
.i -15
Line	A portion of text delimited by _<LF_>, _<VT_>, _<FF_>,
or the beginning or end of the text buffer.
The final delimiter is considered to be part of the line.
.skip
.test page 3
.i -15
Line-numbered file
.break
In TOPS-10, an ASCII file that contains line numbers embedded in the start
of each line.  TECO does not require these line numbers, but can handle them
if they are present.  They can also be generated or suppressed via the /GENLSN
and /SUPLSN switches respectively.
.skip
.test page 3
.i -15
Line-oriented editor
.break
An editor that primarily uses line numbers to direct editing, and most
of whose commands are line-oriented.  TECO is a character-oriented editor,
but also has many facilities that work with lines.
.skip
.test page 3
.i -15
Line-wrap mode
.break
A standard mode of TECO's window support wherein lines
that are too long to fit
on a single physical line of the user's terminal are automatically
continued on the next line.  Opposite of truncate mode.
.skip
.test page 3
.i -15
Literal type out mode
.break
A mode that TECO can be put into by setting the 1's bit in the ET flag,
or (for a single character on a one-shot basis) by using the :_^T command.
In this mode, any characters typed by a TECO program via use of one of the
commands T, V, _^A, or :G, will be displayed on the user's terminal
without any modification.  When not in this mode, TECO will convert
characters that normally do not print to a form that can be displayed
on the user's terminal
(e.g. _<CTRL/X_> displays as _^X and _<ESCAPE_> displays as $
or, if a user-designated ESCAPE surrogate is in effect, as `).
Literal type out mode is useful when trying to
do real-time displays on a CRT terminal.
Normal (up-arrow) mode is particularly useful
to let you see what characters are really in your file.
.skip
.test page 3
.i -15
Local Q-register
.break
A Q-register available to only a single macro level
(including "outside", or at prompt level).
The local Q-registers for a particular macro level
are automatically saved and restored by TECO around
execution of a lower-level macro.
Local Q-registers are named .A-.Z and .0-.9.
See also Global Q-Registers, and section 3.3.2.
.skip
.test page 3
.i -15
Log file	An audit trail that TECO-10 can keep showing all the
commands that were typed to TECO and/or all the type out made by TECO.
This is useful for reviewing what went wrong with a 'bad' edit.
The log file is initiated with the EL command (see Appendix C).
.skip
.test page 3
.i -15
Macro	A sequence of TECO commands intended to be loaded into
a Q-register and executed as a TECO program.
.skip
.test page 3
.i -15
Macro level	Two commands within the same TECO macro are said to
be at the same macro level.
When one TECO macro calls another, the calling macro is said to
be at the higher macro level, and the called macro at the lower
macro level.
.skip
.test page 3
.i -15
Match control construct
.break
A command, consisting of certain special characters, used within a
search string to indicate to TECO that special groups of characters
are permitted to match at this point.
.skip
.test page 3
.i -15
Memory expansion
.break
TECO's act of acquiring additional storage from the operating system
when the currently allocated storage is insufficient to handle the
current TECO command.  Typically, TECO will attempt to acquire this
additional memory before it completely runs out of memory, so as to
allow a 'buffer zone' for the user.  This allows him to complete
a few more commands even in the case where TECO is unable to
get more memory.  The informative message "[nK Bytes]" or its
equivalent is printed on the terminal informing the user that memory
usage has expanded.
.skip
.test page 3
.i -15
Mung	A recursive acronym for "Mung Until No Good";
an act applied by novice TECO users to their source files.
.skip
.test page 3
.i -15
MUNG command	An operating system command used to invoke
a pre-written TECO program.
The most general form of this command is "MUNG file,data" where "file"
is the name of a TECO source program, and "data" is data to be passed
to that program.

.skip
.test page 3
.i -15
No-echo mode	A mode of operation in which TECO will not
automatically echo (display) the
character typed by the user in response to the _^T command.
This mode is entered by setting the 8's bit of the ET flag.
Opposite of echo mode.
.skip
.test page 3
.i -15
Page	A portion of text delimited by form feeds.  The form feeds are
not considered to be part of the page.  Sometimes the term 'page' is
used to refer to all the text currently in the text buffer.
.skip
.test page 3
.i -15
Panic Mode	A condition that occurs
(on small, single-user operating systems),
when, in the middle of outputting
during an edit, the output device fills up so that
the I/O transfer cannot continue.
TECO recovers gracefully from this condition
by printing the ?FUL error message and returning control to TECO without
any loss of data.  At this point, the user closes the current output
file and opens another one on another device (with more room) and resumes
editing.  At a subsequent time, the two parts of his file can be
concatenated back together.
.skip
.test page 3
.i -15
Pipeline editor
.break
An editor which only makes sequential edits to a file.  The file to be edited
is read into the text buffer one piece at a time.
Each piece is edited and then written out.
Once a piece has been written out, further editing to that piece
is not possible unless the output file is re-opened in a later edit as a new
file to be edited.
TECOs are pipeline editors, with the exception of TECO-11 on VAX/VMS
(which offers the capability to page backwards as well as forward).
.skip
.test page 3
.i -15
Pointer preservation mode
.break
A mode of operation in which the text buffer pointer will not change after
a failing search.  This mode is controlled by the 16's bit of the ED flag.
.skip
.test page 3
.i -15
Primary input stream
.break
A term used by TECO-11 to refer to the main input file that TECO is using.
.skip
.test page 3
.i -15
Primary output stream
.break
A term used by TECO-11 to refer to the main output file that TECO is using.
.skip
.test page 3
.i -15
Prompt level	A TECO command is said to be executed from prompt level
if it was typed in
directly in response to TECO's prompt,
as opposed to being executed from a macro.
.skip
.test page 3
.i -15
Q-register	One of 36 global or 36 local user-accessible registers
provided by TECO.
Each Q-register can hold both a number and a string of text.
Of particular importance is the ability to store TECO command strings in
Q-registers to be used as "macros".
.skip
.test page 3
.i -15
Q-register push down list
.break
A last-in first-out stack available to users for saving and restoring the
contents of Q-registers.
.skip
.test page 3
.i -15
Read-with-no-wait mode
.break
A mode of operation in which the _^T command will not hang until a key
is typed on the user's terminal.  In this mode, if no key has been struck,
TECO returns a -1 as the value of the _^T command.  This mode is entered
by setting the 32's bit of the ET flag.
.skip
.test page 3
.i -15
Scrolling	A form of TECO operation available on CRT terminals
capable of supporting split-screen operation.
The bottom n lines are used for TECO's asterisk prompt and the usual
typed command lines;
the remaining lines above are used for an automatically-updated window
into the text buffer.
A valuable training aid:  one can experiment with TECO commands and
immediately observe their effects.
Not a bad idea for advanced users, either.
Controlled by the n,7:W command.
.skip
.test page 3
.i -15
SEALL mode	A mode of window operation in which all
characters have a distinctive
visible display, including characters such as _<TAB_>, _<CR_>, and _<LF_>,
which normally do not print.
Controlled by the 3:W flag (see section 5.17).
Also known as "View all" mode.
.skip
.test page 3
.i -15
Search verification flag
.break
A flag, referenced by the ES command, that controls the action of TECO
subsequent to the execution of a command string containg a search command.
Proper setting of this flag will enable the user to verify that the search
located the correct string, by having the line containing the string found
displayed on the terminal.  See section 5.16 for more details.
.skip
.test page 3
.i -15
Search mode flag
.break
A flag, referenced by the _^X command, that controls how TECO treats
alphabetical characters within search strings.  This flag is used
to put TECO into either exact-case mode, or either-case mode.
If the _^X flag is set to 0, then either case matches in searches.
If the _^X flag is set to 1, then exact case matches are required.
.skip
.test page 3
.i -15
Secondary input stream
.break
A term used by TECO-11 to refer to an auxiliary input "channel" that
was formed by use of the EP command.
.skip
.test page 3
.i -15
Secondary output stream
.break
A term used by TECO-11 to refer to an auxiliary output "channel" that
was formed by use of the EA command.  See section 5.1.4 for details.
.skip
.test page 3
.i -15
Scope editing mode
.break
A mode of TECO in which command line scope editing (q.v.) algorithms are used.
This mode is enabled by setting the 2's bit of the ET flag.  It is usually
automatically enabled by TECO if the operating system can detect that the
user has invoked TECO from a scope terminal.  Opposite of hard-copy editing
mode.
.skip
.test page 3
.i -15
Split Q-registers
.break
The feature of TECO that permits storing of both a number and a string
within a Q-register.  Each Q-register can be considered to consist of
two compartments.
.skip
.test page 3
.i -15
String build construct
.break
A command, consisting of special characters, used within a text argument
to build up the contents of the text argument from other components.
.skip
.test page 3
.i -15
SUPER TECO mode
.break
A mode of TECO-8 wherein TECO will read past the end-of-file mark (CTRL/Z)
of a sequential ASCII file.  This mode is enabled by using the /S switch on an
ER or EB command and is terminated when an ER or EB command
is issued with no /S switch.  This mode is useful for scanning through
mass storage devices in an attempt to recover data from files that
had previously been deleted.
.skip
.test page 3
.i -15
Switch	A construct of the form /SWITCH used within a command
that takes a filespecification, to modify the action of the command or
attributes of the file specified.
Also known as a qualifier.

.skip
.test page 3
.i -15
Tag	A label specified within exclamation marks to mark a point within
a TECO program.  Control can be transferred to this point by the use of
a GOTO (Otag`) command.
.skip
.test page 3
.i -15
TECO	Text Editor and COrrector program.
.skip
.test page 3
.i -15
TECO.INI	A file containing TECO commands that is used as a user's
private initialization file.  When TECO starts up, it looks for such a
file in the user's area, and if it finds one, the TECO commands in this
file are executed before editing commences.
.skip
.test page 3
.i -15
TECO.TEC	A TECO macro used by many operating systems to parse the
user's edit-class commands.
.skip
.test page 3
.i -15
TECO I/O mode	A mode of I/O operation under the RSTS/E
and RSX-11 operating systems,
in which the system buffers most characters and returns control to the caller
(usually TECO) only when interesting characters
(such as _<DELETE_>, _<DELIM_>,
etc.) are typed.
.skip
.test page 3
.i -15
TECO's prompt	refers to the asterisk (*)
that TECO prints to indicate that it is
ready to accept commands.
.skip
.test page 3
.i -15
TECO SIG	A DECUS Special Interest Group, consisting of users
who are dedicated to the spread of, improvement of,
and standardization of TECO.
.skip
.test page 3
.i -15
Terminal characteristics flag
.break
A bit-encoded flag, referenced via the ET command, that contains
information about the user's console terminal and specifies in what
manner TECO should support it.
.skip
.test page 3
.i -15
Text buffer
.break
The main buffer used by TECO to hold the text to be edited.
.skip
.test page 3
.i -15
Text buffer pointer
.break
A pointer that marks the position within the text buffer where
TECO is currently 'at'.  This pointer always points to positions between
characters; it never points at a character.
The current character is considred
to be the character immediately to the right of the current position of
the text buffer pointer.
.skip
.test page 3
.i -15
Then-clause	The set of commands within a conditional that are executed
if the condition is satisfied.  In TECO, these commands immediately follow the
"X at the start of the conditional.
They are terminated by a | or ' character.
.skip
.test page 3
.i -15
Tracing	The act of watching the command-by-command execution of a TECO
program.  This is accomplished by putting TECO into trace mode, via use of
the ? command.
.skip
.test page 3
.i -15
Trace mode	A mode of TECO wherein each command that
is executed by TECO is also
displayed on the user's terminal as it is being executed.  This mode is useful
for debugging complicated TECO programs.  TECO is toggled in and out
of this mode via use of the ? command.  See section 5.18.4 for more details.
.skip
.test page 3
.i -15
Truncate mode	A mode of TECO's window support wherein
lines that are too long to fit on
a single physical line of the user's terminal are truncated when the
right margin of the scope is encountered.  This mode is entered by setting
the 256's bit in the ET flag.  Opposite of line-wrap mode.
.skip
.test page 3
.i -15
Type-out-time command
.break
A special command that makes sense only while TECO is typing out text on
the terminal.
These commands are _<CTRL/S_>, _<CTRL/Q_>, and _<CTRL/O_> and affect
the type out.
.skip
.test page 3
.i -15
Up-arrow mode	A standard mode of operation wherein
upon type out, TECO will display
control characters by typing the visible two-character sequence _^X
to represent the control character _<CTRL/X_>.  On many older terminals,
the caret character (_^), whose octal ASCII code is 136, prints as an
up-arrow.  Some control characters are not printed in up-arrow mode,
notably _<TAB_>, _<LF_>, _<VT_>, _<FF_>, and _<CR_>.
.skip
.test page 3
.i -15
Upper/lower case flag
.break
A flag, referenced by the EU command, that specifies whether or not
case flagging is to occur.  If set to -1, no case flagging occurs.
If set to 0, lower case characters are flagged on type out.  If set to
+1, upper case characters are flagged on type out.
.skip
.test page 3
.i -15
View all mode	A mode of window operation in which all
characters have a distinctive
visible display, including characters such as _<TAB_>, _<CR_>, and _<LF_>,
which normally do not print.
Controlled by the 3:W flag (see section 5.17).
Also known as SEALL mode.
.skip
.test page 3
.i -15
War and Peace mode
.break
A mode of operation in which TECO outputs a large informative paragraph
of information automatically upon encountering an error in a user's program.
This paragraph of information describes the error in painstaking detail
and tells the user how to recover.  This mode is entered by setting the
help level to 3.  This mode is particularly useful to Novices and
particularly obnoxious to experts.
.skip
.test page 3
.i -15
Window	The portion of the text buffer that is currently being displayed
on the user's terminal or auxiliary display device.
.skip
.test page 3
.i -15
Window support
.break
Assembly language code, built into TECO, that maintains a window into the
text buffer on the user's terminal or auxiliary display device.
.skip
.test page 3
.i -15
Yank protection
.break
A feature of TECO wherein any Y, __, or F__ command that will potentially
destroy valid data is aborted.  This mode is normally enabled and will
cause any of the aforementioned commands to abort with the ?YCA error
message if there is text in the text buffer and an output file is open.
This feature can be disabled by turning off the 2's bit in the ED flag.

.right margin +40
.left margin 0
.page
.subtitle #####Index
.index ^^OZ####INDEX
.i +25
INDEX TO TECO COMMANDS
.i +25
AND SPECIAL CHARACTERS
.index ^^I020##_^P     Not a TECO command
.index ^^I034##_^_\     Not a TECO command
.index ^^I035##_^]     Not a TECO command
.index ^^I060##0-9    Digit
.index ^^I141##a-z    Treated the same as upper case A-Z
.index ^^I173##{      Not a TECO command
.index ^^I175##}      Not a TECO command
.index ^^I176##~      Not a TECO command
.skip 1
.upper case
.print index


